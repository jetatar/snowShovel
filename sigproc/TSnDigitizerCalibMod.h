#ifndef SNS_TSnDigitizerCalibMod
#define SNS_TSnDigitizerCalibMod

#include <TString.h>

#include "TAModule.h"
class TSnDualGainCalibSet;
class TSnCalWvData;

class TSnDigitizerCalibMod : public TAModule {
 private:
   TString    fCalSetNm; // name of calibration parameter set in published objs
   TString    fFpnSubNm; // name of (input) FPN sub waveform data object in evt (default "FPNSubData") (or branch name if fFpnSubFromTree is true)
   TString    fCalDatNm; // name of (output) calib waveform obj to add to evt (default "AmpOutData")
   Bool_t     fFpnSubFromTree; // if true, get FPN sub data via ReqBranch; if false, get via FindObjThisEvt (i.e. if it's generated by another module). default: false
   
   // temp stuff
   const TSnDualGainCalibSet* fCalSet; //! the calibration parameters
   TSnCalWvData*              fFpnSub; //! the fpn subtracted data
   
 protected:
   virtual void        SlaveBegin();
   virtual void        Process();

 public:
   TSnDigitizerCalibMod() : fFpnSubFromTree(kFALSE), 
                            fCalSet(0), fFpnSub(0) {}
   TSnDigitizerCalibMod(const Char_t* name,
                        const Char_t* calname,
                        const Char_t* fpnsubnm="FPNSubData",
                        const Char_t* caldatnm="AmpOutData") :
      TAModule(name, "readout calibration module"),
      fCalSetNm(calname), fFpnSubNm(fpnsubnm), fCalDatNm(caldatnm),
      fFpnSubFromTree(kFALSE),
      fCalSet(0), fFpnSub(0) {}
   virtual ~TSnDigitizerCalibMod() {}
   
   const Char_t* GetCalibSetNm() const { return fCalSetNm.Data(); }
   const Char_t* GetFPNSubDatNm() const { return fFpnSubNm.Data(); }
   const Char_t* GetAmpOutDatNm() const { return fCalDatNm.Data(); }
   Bool_t        IsGettingFpnSubFromTree() const { return fFpnSubFromTree; }

   void          SetCalibSetNm(const Char_t* n) { fCalSetNm = n; }
   void          SetFPNSubDatNm(const Char_t* n) { fFpnSubNm = n; }
   void          SetAmpOutDatNm(const Char_t* n) { fCalDatNm = n; }
   void          SetFpnSubFromTree(const Bool_t b) { fFpnSubFromTree = b; }
   
   ClassDef(TSnDigitizerCalibMod, 2); // apply gain corrections to pedestal subtracted data
};

#endif // SNS_TSnDigitizerCalibMod
