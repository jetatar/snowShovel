//
// File generated by /data/users/jtatar/Software/root/bin/rootcint at Wed Apr 30 16:57:15 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME sigprocdIG__sigproc
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__sigproc.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TParameter< unsigned int > TParameterlEunsignedsPintgR;
      #else
      class TParameterlEunsignedsPintgR  :  public ::TObject {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::TParameter< unsigned int >::EStatusBits EStatusBits;
         #else
         enum EStatusBits  {
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~TParameterlEunsignedsPintgR() throw() {};
         ::TString fName; //
         unsigned int fVal; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TSnRawTreeMaker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnRawTreeMaker(void *p = 0);
   static void *newArray_TSnRawTreeMaker(Long_t size, void *p);
   static void delete_TSnRawTreeMaker(void *p);
   static void deleteArray_TSnRawTreeMaker(void *p);
   static void destruct_TSnRawTreeMaker(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnRawTreeMaker*)
   {
      ::TSnRawTreeMaker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnRawTreeMaker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnRawTreeMaker", ::TSnRawTreeMaker::Class_Version(), "./sigproc/TSnRawTreeMaker.h", 25,
                  typeid(::TSnRawTreeMaker), DefineBehavior(ptr, ptr),
                  &::TSnRawTreeMaker::Dictionary, isa_proxy, 4,
                  sizeof(::TSnRawTreeMaker) );
      instance.SetNew(&new_TSnRawTreeMaker);
      instance.SetNewArray(&newArray_TSnRawTreeMaker);
      instance.SetDelete(&delete_TSnRawTreeMaker);
      instance.SetDeleteArray(&deleteArray_TSnRawTreeMaker);
      instance.SetDestructor(&destruct_TSnRawTreeMaker);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnRawTreeMaker*)
   {
      return GenerateInitInstanceLocal((::TSnRawTreeMaker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnRawTreeMaker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnBasicEvtSelMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnBasicEvtSelMod(void *p = 0);
   static void *newArray_TSnBasicEvtSelMod(Long_t size, void *p);
   static void delete_TSnBasicEvtSelMod(void *p);
   static void deleteArray_TSnBasicEvtSelMod(void *p);
   static void destruct_TSnBasicEvtSelMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnBasicEvtSelMod*)
   {
      ::TSnBasicEvtSelMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnBasicEvtSelMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnBasicEvtSelMod", ::TSnBasicEvtSelMod::Class_Version(), "./sigproc/TSnBasicEvtSelMod.h", 11,
                  typeid(::TSnBasicEvtSelMod), DefineBehavior(ptr, ptr),
                  &::TSnBasicEvtSelMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnBasicEvtSelMod) );
      instance.SetNew(&new_TSnBasicEvtSelMod);
      instance.SetNewArray(&newArray_TSnBasicEvtSelMod);
      instance.SetDelete(&delete_TSnBasicEvtSelMod);
      instance.SetDeleteArray(&deleteArray_TSnBasicEvtSelMod);
      instance.SetDestructor(&destruct_TSnBasicEvtSelMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnBasicEvtSelMod*)
   {
      return GenerateInitInstanceLocal((::TSnBasicEvtSelMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnBasicEvtSelMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnRejectBadClocksMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnRejectBadClocksMod(void *p = 0);
   static void *newArray_TSnRejectBadClocksMod(Long_t size, void *p);
   static void delete_TSnRejectBadClocksMod(void *p);
   static void deleteArray_TSnRejectBadClocksMod(void *p);
   static void destruct_TSnRejectBadClocksMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnRejectBadClocksMod*)
   {
      ::TSnRejectBadClocksMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnRejectBadClocksMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnRejectBadClocksMod", ::TSnRejectBadClocksMod::Class_Version(), "./sigproc/TSnRejectBadClocksMod.h", 10,
                  typeid(::TSnRejectBadClocksMod), DefineBehavior(ptr, ptr),
                  &::TSnRejectBadClocksMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnRejectBadClocksMod) );
      instance.SetNew(&new_TSnRejectBadClocksMod);
      instance.SetNewArray(&newArray_TSnRejectBadClocksMod);
      instance.SetDelete(&delete_TSnRejectBadClocksMod);
      instance.SetDeleteArray(&deleteArray_TSnRejectBadClocksMod);
      instance.SetDestructor(&destruct_TSnRejectBadClocksMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnRejectBadClocksMod*)
   {
      return GenerateInitInstanceLocal((::TSnRejectBadClocksMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnRejectBadClocksMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnRejectEarlyEvtsMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnRejectEarlyEvtsMod(void *p = 0);
   static void *newArray_TSnRejectEarlyEvtsMod(Long_t size, void *p);
   static void delete_TSnRejectEarlyEvtsMod(void *p);
   static void deleteArray_TSnRejectEarlyEvtsMod(void *p);
   static void destruct_TSnRejectEarlyEvtsMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnRejectEarlyEvtsMod*)
   {
      ::TSnRejectEarlyEvtsMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnRejectEarlyEvtsMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnRejectEarlyEvtsMod", ::TSnRejectEarlyEvtsMod::Class_Version(), "./sigproc/TSnRejectEarlyEvtsMod.h", 9,
                  typeid(::TSnRejectEarlyEvtsMod), DefineBehavior(ptr, ptr),
                  &::TSnRejectEarlyEvtsMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnRejectEarlyEvtsMod) );
      instance.SetNew(&new_TSnRejectEarlyEvtsMod);
      instance.SetNewArray(&newArray_TSnRejectEarlyEvtsMod);
      instance.SetDelete(&delete_TSnRejectEarlyEvtsMod);
      instance.SetDeleteArray(&deleteArray_TSnRejectEarlyEvtsMod);
      instance.SetDestructor(&destruct_TSnRejectEarlyEvtsMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnRejectEarlyEvtsMod*)
   {
      return GenerateInitInstanceLocal((::TSnRejectEarlyEvtsMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnRejectEarlyEvtsMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnFPNCalcMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnFPNCalcMod(void *p = 0);
   static void *newArray_TSnFPNCalcMod(Long_t size, void *p);
   static void delete_TSnFPNCalcMod(void *p);
   static void deleteArray_TSnFPNCalcMod(void *p);
   static void destruct_TSnFPNCalcMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnFPNCalcMod*)
   {
      ::TSnFPNCalcMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnFPNCalcMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnFPNCalcMod", ::TSnFPNCalcMod::Class_Version(), "./sigproc/TSnFPNCalcMod.h", 12,
                  typeid(::TSnFPNCalcMod), DefineBehavior(ptr, ptr),
                  &::TSnFPNCalcMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnFPNCalcMod) );
      instance.SetNew(&new_TSnFPNCalcMod);
      instance.SetNewArray(&newArray_TSnFPNCalcMod);
      instance.SetDelete(&delete_TSnFPNCalcMod);
      instance.SetDeleteArray(&deleteArray_TSnFPNCalcMod);
      instance.SetDestructor(&destruct_TSnFPNCalcMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnFPNCalcMod*)
   {
      return GenerateInitInstanceLocal((::TSnFPNCalcMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnFPNCalcMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnFPNSubMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnFPNSubMod(void *p = 0);
   static void *newArray_TSnFPNSubMod(Long_t size, void *p);
   static void delete_TSnFPNSubMod(void *p);
   static void deleteArray_TSnFPNSubMod(void *p);
   static void destruct_TSnFPNSubMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnFPNSubMod*)
   {
      ::TSnFPNSubMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnFPNSubMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnFPNSubMod", ::TSnFPNSubMod::Class_Version(), "./sigproc/TSnFPNSubMod.h", 11,
                  typeid(::TSnFPNSubMod), DefineBehavior(ptr, ptr),
                  &::TSnFPNSubMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnFPNSubMod) );
      instance.SetNew(&new_TSnFPNSubMod);
      instance.SetNewArray(&newArray_TSnFPNSubMod);
      instance.SetDelete(&delete_TSnFPNSubMod);
      instance.SetDeleteArray(&deleteArray_TSnFPNSubMod);
      instance.SetDestructor(&destruct_TSnFPNSubMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnFPNSubMod*)
   {
      return GenerateInitInstanceLocal((::TSnFPNSubMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnFPNSubMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnDigitizerCalibMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnDigitizerCalibMod(void *p = 0);
   static void *newArray_TSnDigitizerCalibMod(Long_t size, void *p);
   static void delete_TSnDigitizerCalibMod(void *p);
   static void deleteArray_TSnDigitizerCalibMod(void *p);
   static void destruct_TSnDigitizerCalibMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnDigitizerCalibMod*)
   {
      ::TSnDigitizerCalibMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnDigitizerCalibMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnDigitizerCalibMod", ::TSnDigitizerCalibMod::Class_Version(), "./sigproc/TSnDigitizerCalibMod.h", 10,
                  typeid(::TSnDigitizerCalibMod), DefineBehavior(ptr, ptr),
                  &::TSnDigitizerCalibMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnDigitizerCalibMod) );
      instance.SetNew(&new_TSnDigitizerCalibMod);
      instance.SetNewArray(&newArray_TSnDigitizerCalibMod);
      instance.SetDelete(&delete_TSnDigitizerCalibMod);
      instance.SetDeleteArray(&deleteArray_TSnDigitizerCalibMod);
      instance.SetDestructor(&destruct_TSnDigitizerCalibMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnDigitizerCalibMod*)
   {
      return GenerateInitInstanceLocal((::TSnDigitizerCalibMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnDigitizerCalibMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnSaveCalibDataMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnSaveCalibDataMod(void *p = 0);
   static void *newArray_TSnSaveCalibDataMod(Long_t size, void *p);
   static void delete_TSnSaveCalibDataMod(void *p);
   static void deleteArray_TSnSaveCalibDataMod(void *p);
   static void destruct_TSnSaveCalibDataMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnSaveCalibDataMod*)
   {
      ::TSnSaveCalibDataMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnSaveCalibDataMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnSaveCalibDataMod", ::TSnSaveCalibDataMod::Class_Version(), "./sigproc/TSnSaveCalibDataMod.h", 13,
                  typeid(::TSnSaveCalibDataMod), DefineBehavior(ptr, ptr),
                  &::TSnSaveCalibDataMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnSaveCalibDataMod) );
      instance.SetNew(&new_TSnSaveCalibDataMod);
      instance.SetNewArray(&newArray_TSnSaveCalibDataMod);
      instance.SetDelete(&delete_TSnSaveCalibDataMod);
      instance.SetDeleteArray(&deleteArray_TSnSaveCalibDataMod);
      instance.SetDestructor(&destruct_TSnSaveCalibDataMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnSaveCalibDataMod*)
   {
      return GenerateInitInstanceLocal((::TSnSaveCalibDataMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnSaveCalibDataMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnCalcAbsTimeMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnCalcAbsTimeMod(void *p = 0);
   static void *newArray_TSnCalcAbsTimeMod(Long_t size, void *p);
   static void delete_TSnCalcAbsTimeMod(void *p);
   static void deleteArray_TSnCalcAbsTimeMod(void *p);
   static void destruct_TSnCalcAbsTimeMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnCalcAbsTimeMod*)
   {
      ::TSnCalcAbsTimeMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnCalcAbsTimeMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnCalcAbsTimeMod", ::TSnCalcAbsTimeMod::Class_Version(), "./sigproc/TSnCalcAbsTimeMod.h", 12,
                  typeid(::TSnCalcAbsTimeMod), DefineBehavior(ptr, ptr),
                  &::TSnCalcAbsTimeMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnCalcAbsTimeMod) );
      instance.SetNew(&new_TSnCalcAbsTimeMod);
      instance.SetNewArray(&newArray_TSnCalcAbsTimeMod);
      instance.SetDelete(&delete_TSnCalcAbsTimeMod);
      instance.SetDeleteArray(&deleteArray_TSnCalcAbsTimeMod);
      instance.SetDestructor(&destruct_TSnCalcAbsTimeMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnCalcAbsTimeMod*)
   {
      return GenerateInitInstanceLocal((::TSnCalcAbsTimeMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnCalcAbsTimeMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnFindTimeLimitsMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnFindTimeLimitsMod(void *p = 0);
   static void *newArray_TSnFindTimeLimitsMod(Long_t size, void *p);
   static void delete_TSnFindTimeLimitsMod(void *p);
   static void deleteArray_TSnFindTimeLimitsMod(void *p);
   static void destruct_TSnFindTimeLimitsMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnFindTimeLimitsMod*)
   {
      ::TSnFindTimeLimitsMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnFindTimeLimitsMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnFindTimeLimitsMod", ::TSnFindTimeLimitsMod::Class_Version(), "./sigproc/TSnFindTimeLimitsMod.h", 12,
                  typeid(::TSnFindTimeLimitsMod), DefineBehavior(ptr, ptr),
                  &::TSnFindTimeLimitsMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnFindTimeLimitsMod) );
      instance.SetNew(&new_TSnFindTimeLimitsMod);
      instance.SetNewArray(&newArray_TSnFindTimeLimitsMod);
      instance.SetDelete(&delete_TSnFindTimeLimitsMod);
      instance.SetDeleteArray(&deleteArray_TSnFindTimeLimitsMod);
      instance.SetDestructor(&destruct_TSnFindTimeLimitsMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnFindTimeLimitsMod*)
   {
      return GenerateInitInstanceLocal((::TSnFindTimeLimitsMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnFindTimeLimitsMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnFindEvtNumLimitsMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnFindEvtNumLimitsMod(void *p = 0);
   static void *newArray_TSnFindEvtNumLimitsMod(Long_t size, void *p);
   static void delete_TSnFindEvtNumLimitsMod(void *p);
   static void deleteArray_TSnFindEvtNumLimitsMod(void *p);
   static void destruct_TSnFindEvtNumLimitsMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnFindEvtNumLimitsMod*)
   {
      ::TSnFindEvtNumLimitsMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnFindEvtNumLimitsMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnFindEvtNumLimitsMod", ::TSnFindEvtNumLimitsMod::Class_Version(), "./sigproc/TSnFindEvtNumLimitsMod.h", 11,
                  typeid(::TSnFindEvtNumLimitsMod), DefineBehavior(ptr, ptr),
                  &::TSnFindEvtNumLimitsMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnFindEvtNumLimitsMod) );
      instance.SetNew(&new_TSnFindEvtNumLimitsMod);
      instance.SetNewArray(&newArray_TSnFindEvtNumLimitsMod);
      instance.SetDelete(&delete_TSnFindEvtNumLimitsMod);
      instance.SetDeleteArray(&deleteArray_TSnFindEvtNumLimitsMod);
      instance.SetDestructor(&destruct_TSnFindEvtNumLimitsMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnFindEvtNumLimitsMod*)
   {
      return GenerateInitInstanceLocal((::TSnFindEvtNumLimitsMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnFindEvtNumLimitsMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TParameterlEunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TParameterlEunsignedsPintgR_Dictionary();
   static void *new_TParameterlEunsignedsPintgR(void *p = 0);
   static void *newArray_TParameterlEunsignedsPintgR(Long_t size, void *p);
   static void delete_TParameterlEunsignedsPintgR(void *p);
   static void deleteArray_TParameterlEunsignedsPintgR(void *p);
   static void destruct_TParameterlEunsignedsPintgR(void *p);
   static Long64_t merge_TParameterlEunsignedsPintgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TParameter<unsigned int>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TParameter<unsigned int>) == sizeof(::ROOT::Shadow::TParameterlEunsignedsPintgR));
      ::TParameter<unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TParameter<unsigned int> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TParameter<unsigned int>", ::TParameter<unsigned int>::Class_Version(), "/data/users/jtatar/Software/root/include/TParameter.h", 49,
                  typeid(::TParameter<unsigned int>), DefineBehavior(ptr, ptr),
                  &TParameterlEunsignedsPintgR_Dictionary, isa_proxy, 4,
                  sizeof(::TParameter<unsigned int>) );
      instance.SetNew(&new_TParameterlEunsignedsPintgR);
      instance.SetNewArray(&newArray_TParameterlEunsignedsPintgR);
      instance.SetDelete(&delete_TParameterlEunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_TParameterlEunsignedsPintgR);
      instance.SetDestructor(&destruct_TParameterlEunsignedsPintgR);
      instance.SetMerge(&merge_TParameterlEunsignedsPintgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TParameter<unsigned int>*)
   {
      return GenerateInitInstanceLocal((::TParameter<unsigned int>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TParameter<unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TParameterlEunsignedsPintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TParameter<unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TSnPlotEvtRateMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnPlotEvtRateMod(void *p = 0);
   static void *newArray_TSnPlotEvtRateMod(Long_t size, void *p);
   static void delete_TSnPlotEvtRateMod(void *p);
   static void deleteArray_TSnPlotEvtRateMod(void *p);
   static void destruct_TSnPlotEvtRateMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnPlotEvtRateMod*)
   {
      ::TSnPlotEvtRateMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnPlotEvtRateMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnPlotEvtRateMod", ::TSnPlotEvtRateMod::Class_Version(), "./sigproc/TSnPlotEvtRateMod.h", 20,
                  typeid(::TSnPlotEvtRateMod), DefineBehavior(ptr, ptr),
                  &::TSnPlotEvtRateMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnPlotEvtRateMod) );
      instance.SetNew(&new_TSnPlotEvtRateMod);
      instance.SetNewArray(&newArray_TSnPlotEvtRateMod);
      instance.SetDelete(&delete_TSnPlotEvtRateMod);
      instance.SetDeleteArray(&deleteArray_TSnPlotEvtRateMod);
      instance.SetDestructor(&destruct_TSnPlotEvtRateMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnPlotEvtRateMod*)
   {
      return GenerateInitInstanceLocal((::TSnPlotEvtRateMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnPlotEvtRateMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnPlotWaveformsMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnPlotWaveformsMod(void *p = 0);
   static void *newArray_TSnPlotWaveformsMod(Long_t size, void *p);
   static void delete_TSnPlotWaveformsMod(void *p);
   static void deleteArray_TSnPlotWaveformsMod(void *p);
   static void destruct_TSnPlotWaveformsMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnPlotWaveformsMod*)
   {
      ::TSnPlotWaveformsMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnPlotWaveformsMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnPlotWaveformsMod", ::TSnPlotWaveformsMod::Class_Version(), "./sigproc/TSnPlotWaveformsMod.h", 14,
                  typeid(::TSnPlotWaveformsMod), DefineBehavior(ptr, ptr),
                  &::TSnPlotWaveformsMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnPlotWaveformsMod) );
      instance.SetNew(&new_TSnPlotWaveformsMod);
      instance.SetNewArray(&newArray_TSnPlotWaveformsMod);
      instance.SetDelete(&delete_TSnPlotWaveformsMod);
      instance.SetDeleteArray(&deleteArray_TSnPlotWaveformsMod);
      instance.SetDestructor(&destruct_TSnPlotWaveformsMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnPlotWaveformsMod*)
   {
      return GenerateInitInstanceLocal((::TSnPlotWaveformsMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnPlotWaveformsMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnEvtGuiCanvFrame_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnEvtGuiCanvFrame(void *p = 0);
   static void *newArray_TSnEvtGuiCanvFrame(Long_t size, void *p);
   static void delete_TSnEvtGuiCanvFrame(void *p);
   static void deleteArray_TSnEvtGuiCanvFrame(void *p);
   static void destruct_TSnEvtGuiCanvFrame(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnEvtGuiCanvFrame*)
   {
      ::TSnEvtGuiCanvFrame *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnEvtGuiCanvFrame >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnEvtGuiCanvFrame", ::TSnEvtGuiCanvFrame::Class_Version(), "./sigproc/TSnEvtGuiCanvFrame.h", 11,
                  typeid(::TSnEvtGuiCanvFrame), DefineBehavior(ptr, ptr),
                  &::TSnEvtGuiCanvFrame::Dictionary, isa_proxy, 4,
                  sizeof(::TSnEvtGuiCanvFrame) );
      instance.SetNew(&new_TSnEvtGuiCanvFrame);
      instance.SetNewArray(&newArray_TSnEvtGuiCanvFrame);
      instance.SetDelete(&delete_TSnEvtGuiCanvFrame);
      instance.SetDeleteArray(&deleteArray_TSnEvtGuiCanvFrame);
      instance.SetDestructor(&destruct_TSnEvtGuiCanvFrame);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnEvtGuiCanvFrame*)
   {
      return GenerateInitInstanceLocal((::TSnEvtGuiCanvFrame*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnEvtGuiCanvFrame*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnEvtGuiSeleFrame_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnEvtGuiSeleFrame(void *p = 0);
   static void *newArray_TSnEvtGuiSeleFrame(Long_t size, void *p);
   static void delete_TSnEvtGuiSeleFrame(void *p);
   static void deleteArray_TSnEvtGuiSeleFrame(void *p);
   static void destruct_TSnEvtGuiSeleFrame(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnEvtGuiSeleFrame*)
   {
      ::TSnEvtGuiSeleFrame *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnEvtGuiSeleFrame >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnEvtGuiSeleFrame", ::TSnEvtGuiSeleFrame::Class_Version(), "./sigproc/TSnEvtGuiSeleFrame.h", 22,
                  typeid(::TSnEvtGuiSeleFrame), DefineBehavior(ptr, ptr),
                  &::TSnEvtGuiSeleFrame::Dictionary, isa_proxy, 4,
                  sizeof(::TSnEvtGuiSeleFrame) );
      instance.SetNew(&new_TSnEvtGuiSeleFrame);
      instance.SetNewArray(&newArray_TSnEvtGuiSeleFrame);
      instance.SetDelete(&delete_TSnEvtGuiSeleFrame);
      instance.SetDeleteArray(&deleteArray_TSnEvtGuiSeleFrame);
      instance.SetDestructor(&destruct_TSnEvtGuiSeleFrame);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnEvtGuiSeleFrame*)
   {
      return GenerateInitInstanceLocal((::TSnEvtGuiSeleFrame*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnEvtGuiSeleFrame*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnEvtGuiDataGuru_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnEvtGuiDataGuru(void *p = 0);
   static void *newArray_TSnEvtGuiDataGuru(Long_t size, void *p);
   static void delete_TSnEvtGuiDataGuru(void *p);
   static void deleteArray_TSnEvtGuiDataGuru(void *p);
   static void destruct_TSnEvtGuiDataGuru(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnEvtGuiDataGuru*)
   {
      ::TSnEvtGuiDataGuru *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnEvtGuiDataGuru >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnEvtGuiDataGuru", ::TSnEvtGuiDataGuru::Class_Version(), "./sigproc/TSnEvtGuiDataGuru.h", 23,
                  typeid(::TSnEvtGuiDataGuru), DefineBehavior(ptr, ptr),
                  &::TSnEvtGuiDataGuru::Dictionary, isa_proxy, 4,
                  sizeof(::TSnEvtGuiDataGuru) );
      instance.SetNew(&new_TSnEvtGuiDataGuru);
      instance.SetNewArray(&newArray_TSnEvtGuiDataGuru);
      instance.SetDelete(&delete_TSnEvtGuiDataGuru);
      instance.SetDeleteArray(&deleteArray_TSnEvtGuiDataGuru);
      instance.SetDestructor(&destruct_TSnEvtGuiDataGuru);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnEvtGuiDataGuru*)
   {
      return GenerateInitInstanceLocal((::TSnEvtGuiDataGuru*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnEvtGuiDataGuru*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnEvtGuiMainFrame_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnEvtGuiMainFrame(void *p = 0);
   static void *newArray_TSnEvtGuiMainFrame(Long_t size, void *p);
   static void delete_TSnEvtGuiMainFrame(void *p);
   static void deleteArray_TSnEvtGuiMainFrame(void *p);
   static void destruct_TSnEvtGuiMainFrame(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnEvtGuiMainFrame*)
   {
      ::TSnEvtGuiMainFrame *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnEvtGuiMainFrame >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnEvtGuiMainFrame", ::TSnEvtGuiMainFrame::Class_Version(), "./sigproc/TSnEvtGuiMainFrame.h", 13,
                  typeid(::TSnEvtGuiMainFrame), DefineBehavior(ptr, ptr),
                  &::TSnEvtGuiMainFrame::Dictionary, isa_proxy, 4,
                  sizeof(::TSnEvtGuiMainFrame) );
      instance.SetNew(&new_TSnEvtGuiMainFrame);
      instance.SetNewArray(&newArray_TSnEvtGuiMainFrame);
      instance.SetDelete(&delete_TSnEvtGuiMainFrame);
      instance.SetDeleteArray(&deleteArray_TSnEvtGuiMainFrame);
      instance.SetDestructor(&destruct_TSnEvtGuiMainFrame);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnEvtGuiMainFrame*)
   {
      return GenerateInitInstanceLocal((::TSnEvtGuiMainFrame*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnEvtGuiMainFrame*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnGCanvasSaveDialog_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnGCanvasSaveDialog(void *p = 0);
   static void *newArray_TSnGCanvasSaveDialog(Long_t size, void *p);
   static void delete_TSnGCanvasSaveDialog(void *p);
   static void deleteArray_TSnGCanvasSaveDialog(void *p);
   static void destruct_TSnGCanvasSaveDialog(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnGCanvasSaveDialog*)
   {
      ::TSnGCanvasSaveDialog *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnGCanvasSaveDialog >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnGCanvasSaveDialog", ::TSnGCanvasSaveDialog::Class_Version(), "./sigproc/TSnGCanvasSaveDialog.h", 12,
                  typeid(::TSnGCanvasSaveDialog), DefineBehavior(ptr, ptr),
                  &::TSnGCanvasSaveDialog::Dictionary, isa_proxy, 4,
                  sizeof(::TSnGCanvasSaveDialog) );
      instance.SetNew(&new_TSnGCanvasSaveDialog);
      instance.SetNewArray(&newArray_TSnGCanvasSaveDialog);
      instance.SetDelete(&delete_TSnGCanvasSaveDialog);
      instance.SetDeleteArray(&deleteArray_TSnGCanvasSaveDialog);
      instance.SetDestructor(&destruct_TSnGCanvasSaveDialog);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnGCanvasSaveDialog*)
   {
      return GenerateInitInstanceLocal((::TSnGCanvasSaveDialog*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnGCanvasSaveDialog*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnRejectBadVoltTimesMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnRejectBadVoltTimesMod(void *p = 0);
   static void *newArray_TSnRejectBadVoltTimesMod(Long_t size, void *p);
   static void delete_TSnRejectBadVoltTimesMod(void *p);
   static void deleteArray_TSnRejectBadVoltTimesMod(void *p);
   static void destruct_TSnRejectBadVoltTimesMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnRejectBadVoltTimesMod*)
   {
      ::TSnRejectBadVoltTimesMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnRejectBadVoltTimesMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnRejectBadVoltTimesMod", ::TSnRejectBadVoltTimesMod::Class_Version(), "./sigproc/TSnRejectBadVoltTimesMod.h", 7,
                  typeid(::TSnRejectBadVoltTimesMod), DefineBehavior(ptr, ptr),
                  &::TSnRejectBadVoltTimesMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnRejectBadVoltTimesMod) );
      instance.SetNew(&new_TSnRejectBadVoltTimesMod);
      instance.SetNewArray(&newArray_TSnRejectBadVoltTimesMod);
      instance.SetDelete(&delete_TSnRejectBadVoltTimesMod);
      instance.SetDeleteArray(&deleteArray_TSnRejectBadVoltTimesMod);
      instance.SetDestructor(&destruct_TSnRejectBadVoltTimesMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnRejectBadVoltTimesMod*)
   {
      return GenerateInitInstanceLocal((::TSnRejectBadVoltTimesMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnRejectBadVoltTimesMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnPlotPowerReadingsMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnPlotPowerReadingsMod(void *p = 0);
   static void *newArray_TSnPlotPowerReadingsMod(Long_t size, void *p);
   static void delete_TSnPlotPowerReadingsMod(void *p);
   static void deleteArray_TSnPlotPowerReadingsMod(void *p);
   static void destruct_TSnPlotPowerReadingsMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnPlotPowerReadingsMod*)
   {
      ::TSnPlotPowerReadingsMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnPlotPowerReadingsMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnPlotPowerReadingsMod", ::TSnPlotPowerReadingsMod::Class_Version(), "./sigproc/TSnPlotPowerReadingsMod.h", 12,
                  typeid(::TSnPlotPowerReadingsMod), DefineBehavior(ptr, ptr),
                  &::TSnPlotPowerReadingsMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnPlotPowerReadingsMod) );
      instance.SetNew(&new_TSnPlotPowerReadingsMod);
      instance.SetNewArray(&newArray_TSnPlotPowerReadingsMod);
      instance.SetDelete(&delete_TSnPlotPowerReadingsMod);
      instance.SetDeleteArray(&deleteArray_TSnPlotPowerReadingsMod);
      instance.SetDestructor(&destruct_TSnPlotPowerReadingsMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnPlotPowerReadingsMod*)
   {
      return GenerateInitInstanceLocal((::TSnPlotPowerReadingsMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnPlotPowerReadingsMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnPlotAdcDists_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnPlotAdcDists(void *p = 0);
   static void *newArray_TSnPlotAdcDists(Long_t size, void *p);
   static void delete_TSnPlotAdcDists(void *p);
   static void deleteArray_TSnPlotAdcDists(void *p);
   static void destruct_TSnPlotAdcDists(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnPlotAdcDists*)
   {
      ::TSnPlotAdcDists *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnPlotAdcDists >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnPlotAdcDists", ::TSnPlotAdcDists::Class_Version(), "./sigproc/TSnPlotAdcDists.h", 14,
                  typeid(::TSnPlotAdcDists), DefineBehavior(ptr, ptr),
                  &::TSnPlotAdcDists::Dictionary, isa_proxy, 4,
                  sizeof(::TSnPlotAdcDists) );
      instance.SetNew(&new_TSnPlotAdcDists);
      instance.SetNewArray(&newArray_TSnPlotAdcDists);
      instance.SetDelete(&delete_TSnPlotAdcDists);
      instance.SetDeleteArray(&deleteArray_TSnPlotAdcDists);
      instance.SetDestructor(&destruct_TSnPlotAdcDists);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnPlotAdcDists*)
   {
      return GenerateInitInstanceLocal((::TSnPlotAdcDists*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnPlotAdcDists*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnCalDatModule_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TSnCalDatModule(void *p);
   static void deleteArray_TSnCalDatModule(void *p);
   static void destruct_TSnCalDatModule(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnCalDatModule*)
   {
      ::TSnCalDatModule *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnCalDatModule >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnCalDatModule", ::TSnCalDatModule::Class_Version(), "./sigproc/TSnCalDatModule.h", 10,
                  typeid(::TSnCalDatModule), DefineBehavior(ptr, ptr),
                  &::TSnCalDatModule::Dictionary, isa_proxy, 4,
                  sizeof(::TSnCalDatModule) );
      instance.SetDelete(&delete_TSnCalDatModule);
      instance.SetDeleteArray(&deleteArray_TSnCalDatModule);
      instance.SetDestructor(&destruct_TSnCalDatModule);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnCalDatModule*)
   {
      return GenerateInitInstanceLocal((::TSnCalDatModule*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnCalDatModule*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnCalDatModulecLcLAdrWrap_t_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnCalDatModulecLcLAdrWrap_t(void *p = 0);
   static void *newArray_TSnCalDatModulecLcLAdrWrap_t(Long_t size, void *p);
   static void delete_TSnCalDatModulecLcLAdrWrap_t(void *p);
   static void deleteArray_TSnCalDatModulecLcLAdrWrap_t(void *p);
   static void destruct_TSnCalDatModulecLcLAdrWrap_t(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnCalDatModule::AdrWrap_t*)
   {
      ::TSnCalDatModule::AdrWrap_t *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnCalDatModule::AdrWrap_t >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnCalDatModule::AdrWrap_t", ::TSnCalDatModule::AdrWrap_t::Class_Version(), "./sigproc/TSnCalDatModule.h", 14,
                  typeid(::TSnCalDatModule::AdrWrap_t), DefineBehavior(ptr, ptr),
                  &::TSnCalDatModule::AdrWrap_t::Dictionary, isa_proxy, 4,
                  sizeof(::TSnCalDatModule::AdrWrap_t) );
      instance.SetNew(&new_TSnCalDatModulecLcLAdrWrap_t);
      instance.SetNewArray(&newArray_TSnCalDatModulecLcLAdrWrap_t);
      instance.SetDelete(&delete_TSnCalDatModulecLcLAdrWrap_t);
      instance.SetDeleteArray(&deleteArray_TSnCalDatModulecLcLAdrWrap_t);
      instance.SetDestructor(&destruct_TSnCalDatModulecLcLAdrWrap_t);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnCalDatModule::AdrWrap_t*)
   {
      return GenerateInitInstanceLocal((::TSnCalDatModule::AdrWrap_t*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnCalDatModule::AdrWrap_t*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnFilterWaveformMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnFilterWaveformMod(void *p = 0);
   static void *newArray_TSnFilterWaveformMod(Long_t size, void *p);
   static void delete_TSnFilterWaveformMod(void *p);
   static void deleteArray_TSnFilterWaveformMod(void *p);
   static void destruct_TSnFilterWaveformMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnFilterWaveformMod*)
   {
      ::TSnFilterWaveformMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnFilterWaveformMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnFilterWaveformMod", ::TSnFilterWaveformMod::Class_Version(), "./sigproc/TSnFilterWaveformMod.h", 11,
                  typeid(::TSnFilterWaveformMod), DefineBehavior(ptr, ptr),
                  &::TSnFilterWaveformMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnFilterWaveformMod) );
      instance.SetNew(&new_TSnFilterWaveformMod);
      instance.SetNewArray(&newArray_TSnFilterWaveformMod);
      instance.SetDelete(&delete_TSnFilterWaveformMod);
      instance.SetDeleteArray(&deleteArray_TSnFilterWaveformMod);
      instance.SetDestructor(&destruct_TSnFilterWaveformMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnFilterWaveformMod*)
   {
      return GenerateInitInstanceLocal((::TSnFilterWaveformMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnFilterWaveformMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnStopFindRms_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnStopFindRms(void *p = 0);
   static void *newArray_TSnStopFindRms(Long_t size, void *p);
   static void delete_TSnStopFindRms(void *p);
   static void deleteArray_TSnStopFindRms(void *p);
   static void destruct_TSnStopFindRms(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnStopFindRms*)
   {
      ::TSnStopFindRms *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnStopFindRms >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnStopFindRms", ::TSnStopFindRms::Class_Version(), "./sigproc/TSnStopFindRms.h", 11,
                  typeid(::TSnStopFindRms), DefineBehavior(ptr, ptr),
                  &::TSnStopFindRms::Dictionary, isa_proxy, 4,
                  sizeof(::TSnStopFindRms) );
      instance.SetNew(&new_TSnStopFindRms);
      instance.SetNewArray(&newArray_TSnStopFindRms);
      instance.SetDelete(&delete_TSnStopFindRms);
      instance.SetDeleteArray(&deleteArray_TSnStopFindRms);
      instance.SetDestructor(&destruct_TSnStopFindRms);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnStopFindRms*)
   {
      return GenerateInitInstanceLocal((::TSnStopFindRms*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnStopFindRms*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnShiftCalWvDataMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnShiftCalWvDataMod(void *p = 0);
   static void *newArray_TSnShiftCalWvDataMod(Long_t size, void *p);
   static void delete_TSnShiftCalWvDataMod(void *p);
   static void deleteArray_TSnShiftCalWvDataMod(void *p);
   static void destruct_TSnShiftCalWvDataMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnShiftCalWvDataMod*)
   {
      ::TSnShiftCalWvDataMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnShiftCalWvDataMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnShiftCalWvDataMod", ::TSnShiftCalWvDataMod::Class_Version(), "./sigproc/TSnShiftCalWvDataMod.h", 10,
                  typeid(::TSnShiftCalWvDataMod), DefineBehavior(ptr, ptr),
                  &::TSnShiftCalWvDataMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnShiftCalWvDataMod) );
      instance.SetNew(&new_TSnShiftCalWvDataMod);
      instance.SetNewArray(&newArray_TSnShiftCalWvDataMod);
      instance.SetDelete(&delete_TSnShiftCalWvDataMod);
      instance.SetDeleteArray(&deleteArray_TSnShiftCalWvDataMod);
      instance.SetDestructor(&destruct_TSnShiftCalWvDataMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnShiftCalWvDataMod*)
   {
      return GenerateInitInstanceLocal((::TSnShiftCalWvDataMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnShiftCalWvDataMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnMakeShiftTree_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnMakeShiftTree(void *p = 0);
   static void *newArray_TSnMakeShiftTree(Long_t size, void *p);
   static void delete_TSnMakeShiftTree(void *p);
   static void deleteArray_TSnMakeShiftTree(void *p);
   static void destruct_TSnMakeShiftTree(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnMakeShiftTree*)
   {
      ::TSnMakeShiftTree *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnMakeShiftTree >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnMakeShiftTree", ::TSnMakeShiftTree::Class_Version(), "./sigproc/TSnMakeShiftTree.h", 14,
                  typeid(::TSnMakeShiftTree), DefineBehavior(ptr, ptr),
                  &::TSnMakeShiftTree::Dictionary, isa_proxy, 4,
                  sizeof(::TSnMakeShiftTree) );
      instance.SetNew(&new_TSnMakeShiftTree);
      instance.SetNewArray(&newArray_TSnMakeShiftTree);
      instance.SetDelete(&delete_TSnMakeShiftTree);
      instance.SetDeleteArray(&deleteArray_TSnMakeShiftTree);
      instance.SetDestructor(&destruct_TSnMakeShiftTree);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnMakeShiftTree*)
   {
      return GenerateInitInstanceLocal((::TSnMakeShiftTree*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnMakeShiftTree*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnPruneBadEvtsMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnPruneBadEvtsMod(void *p = 0);
   static void *newArray_TSnPruneBadEvtsMod(Long_t size, void *p);
   static void delete_TSnPruneBadEvtsMod(void *p);
   static void deleteArray_TSnPruneBadEvtsMod(void *p);
   static void destruct_TSnPruneBadEvtsMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnPruneBadEvtsMod*)
   {
      ::TSnPruneBadEvtsMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnPruneBadEvtsMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnPruneBadEvtsMod", ::TSnPruneBadEvtsMod::Class_Version(), "./sigproc/TSnPruneBadEvtsMod.h", 15,
                  typeid(::TSnPruneBadEvtsMod), DefineBehavior(ptr, ptr),
                  &::TSnPruneBadEvtsMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnPruneBadEvtsMod) );
      instance.SetNew(&new_TSnPruneBadEvtsMod);
      instance.SetNewArray(&newArray_TSnPruneBadEvtsMod);
      instance.SetDelete(&delete_TSnPruneBadEvtsMod);
      instance.SetDeleteArray(&deleteArray_TSnPruneBadEvtsMod);
      instance.SetDestructor(&destruct_TSnPruneBadEvtsMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnPruneBadEvtsMod*)
   {
      return GenerateInitInstanceLocal((::TSnPruneBadEvtsMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnPruneBadEvtsMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnFFTCalcMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnFFTCalcMod(void *p = 0);
   static void *newArray_TSnFFTCalcMod(Long_t size, void *p);
   static void delete_TSnFFTCalcMod(void *p);
   static void deleteArray_TSnFFTCalcMod(void *p);
   static void destruct_TSnFFTCalcMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnFFTCalcMod*)
   {
      ::TSnFFTCalcMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnFFTCalcMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnFFTCalcMod", ::TSnFFTCalcMod::Class_Version(), "./sigproc/TSnFFTCalcMod.h", 10,
                  typeid(::TSnFFTCalcMod), DefineBehavior(ptr, ptr),
                  &::TSnFFTCalcMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnFFTCalcMod) );
      instance.SetNew(&new_TSnFFTCalcMod);
      instance.SetNewArray(&newArray_TSnFFTCalcMod);
      instance.SetDelete(&delete_TSnFFTCalcMod);
      instance.SetDeleteArray(&deleteArray_TSnFFTCalcMod);
      instance.SetDestructor(&destruct_TSnFFTCalcMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnFFTCalcMod*)
   {
      return GenerateInitInstanceLocal((::TSnFFTCalcMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnFFTCalcMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnFindWaveformEnvelopeMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnFindWaveformEnvelopeMod(void *p = 0);
   static void *newArray_TSnFindWaveformEnvelopeMod(Long_t size, void *p);
   static void delete_TSnFindWaveformEnvelopeMod(void *p);
   static void deleteArray_TSnFindWaveformEnvelopeMod(void *p);
   static void destruct_TSnFindWaveformEnvelopeMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnFindWaveformEnvelopeMod*)
   {
      ::TSnFindWaveformEnvelopeMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnFindWaveformEnvelopeMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnFindWaveformEnvelopeMod", ::TSnFindWaveformEnvelopeMod::Class_Version(), "./sigproc/TSnFindWaveformEnvelopeMod.h", 8,
                  typeid(::TSnFindWaveformEnvelopeMod), DefineBehavior(ptr, ptr),
                  &::TSnFindWaveformEnvelopeMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnFindWaveformEnvelopeMod) );
      instance.SetNew(&new_TSnFindWaveformEnvelopeMod);
      instance.SetNewArray(&newArray_TSnFindWaveformEnvelopeMod);
      instance.SetDelete(&delete_TSnFindWaveformEnvelopeMod);
      instance.SetDeleteArray(&deleteArray_TSnFindWaveformEnvelopeMod);
      instance.SetDestructor(&destruct_TSnFindWaveformEnvelopeMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnFindWaveformEnvelopeMod*)
   {
      return GenerateInitInstanceLocal((::TSnFindWaveformEnvelopeMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnFindWaveformEnvelopeMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TSnRawTreeMaker::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnRawTreeMaker::Class_Name()
{
   return "TSnRawTreeMaker";
}

//______________________________________________________________________________
const char *TSnRawTreeMaker::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnRawTreeMaker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnRawTreeMaker::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnRawTreeMaker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnRawTreeMaker::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnRawTreeMaker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnRawTreeMaker::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnRawTreeMaker*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnBasicEvtSelMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnBasicEvtSelMod::Class_Name()
{
   return "TSnBasicEvtSelMod";
}

//______________________________________________________________________________
const char *TSnBasicEvtSelMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnBasicEvtSelMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnBasicEvtSelMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnBasicEvtSelMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnBasicEvtSelMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnBasicEvtSelMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnBasicEvtSelMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnBasicEvtSelMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnRejectBadClocksMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnRejectBadClocksMod::Class_Name()
{
   return "TSnRejectBadClocksMod";
}

//______________________________________________________________________________
const char *TSnRejectBadClocksMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnRejectBadClocksMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnRejectBadClocksMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnRejectBadClocksMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnRejectBadClocksMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnRejectBadClocksMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnRejectBadClocksMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnRejectBadClocksMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnRejectEarlyEvtsMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnRejectEarlyEvtsMod::Class_Name()
{
   return "TSnRejectEarlyEvtsMod";
}

//______________________________________________________________________________
const char *TSnRejectEarlyEvtsMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnRejectEarlyEvtsMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnRejectEarlyEvtsMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnRejectEarlyEvtsMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnRejectEarlyEvtsMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnRejectEarlyEvtsMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnRejectEarlyEvtsMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnRejectEarlyEvtsMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnFPNCalcMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnFPNCalcMod::Class_Name()
{
   return "TSnFPNCalcMod";
}

//______________________________________________________________________________
const char *TSnFPNCalcMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNCalcMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnFPNCalcMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNCalcMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnFPNCalcMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNCalcMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnFPNCalcMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNCalcMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnFPNSubMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnFPNSubMod::Class_Name()
{
   return "TSnFPNSubMod";
}

//______________________________________________________________________________
const char *TSnFPNSubMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNSubMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnFPNSubMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNSubMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnFPNSubMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNSubMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnFPNSubMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNSubMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnDigitizerCalibMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnDigitizerCalibMod::Class_Name()
{
   return "TSnDigitizerCalibMod";
}

//______________________________________________________________________________
const char *TSnDigitizerCalibMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnDigitizerCalibMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnDigitizerCalibMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnDigitizerCalibMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnDigitizerCalibMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnDigitizerCalibMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnDigitizerCalibMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnDigitizerCalibMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnSaveCalibDataMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnSaveCalibDataMod::Class_Name()
{
   return "TSnSaveCalibDataMod";
}

//______________________________________________________________________________
const char *TSnSaveCalibDataMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnSaveCalibDataMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnSaveCalibDataMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnSaveCalibDataMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnSaveCalibDataMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnSaveCalibDataMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnSaveCalibDataMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnSaveCalibDataMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnCalcAbsTimeMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnCalcAbsTimeMod::Class_Name()
{
   return "TSnCalcAbsTimeMod";
}

//______________________________________________________________________________
const char *TSnCalcAbsTimeMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalcAbsTimeMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnCalcAbsTimeMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalcAbsTimeMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnCalcAbsTimeMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalcAbsTimeMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnCalcAbsTimeMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalcAbsTimeMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnFindTimeLimitsMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnFindTimeLimitsMod::Class_Name()
{
   return "TSnFindTimeLimitsMod";
}

//______________________________________________________________________________
const char *TSnFindTimeLimitsMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFindTimeLimitsMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnFindTimeLimitsMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFindTimeLimitsMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnFindTimeLimitsMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFindTimeLimitsMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnFindTimeLimitsMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFindTimeLimitsMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnFindEvtNumLimitsMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnFindEvtNumLimitsMod::Class_Name()
{
   return "TSnFindEvtNumLimitsMod";
}

//______________________________________________________________________________
const char *TSnFindEvtNumLimitsMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFindEvtNumLimitsMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnFindEvtNumLimitsMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFindEvtNumLimitsMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnFindEvtNumLimitsMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFindEvtNumLimitsMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnFindEvtNumLimitsMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFindEvtNumLimitsMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *TParameter<unsigned int>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *TParameter<unsigned int>::Class_Name()
{
   return "TParameter<unsigned int>";
}

//______________________________________________________________________________
template <> const char *TParameter<unsigned int>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TParameter<unsigned int>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int TParameter<unsigned int>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TParameter<unsigned int>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void TParameter<unsigned int>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TParameter<unsigned int>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *TParameter<unsigned int>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TParameter<unsigned int>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnPlotEvtRateMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnPlotEvtRateMod::Class_Name()
{
   return "TSnPlotEvtRateMod";
}

//______________________________________________________________________________
const char *TSnPlotEvtRateMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotEvtRateMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnPlotEvtRateMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotEvtRateMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnPlotEvtRateMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotEvtRateMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnPlotEvtRateMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotEvtRateMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnPlotWaveformsMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnPlotWaveformsMod::Class_Name()
{
   return "TSnPlotWaveformsMod";
}

//______________________________________________________________________________
const char *TSnPlotWaveformsMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotWaveformsMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnPlotWaveformsMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotWaveformsMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnPlotWaveformsMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotWaveformsMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnPlotWaveformsMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotWaveformsMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnEvtGuiCanvFrame::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnEvtGuiCanvFrame::Class_Name()
{
   return "TSnEvtGuiCanvFrame";
}

//______________________________________________________________________________
const char *TSnEvtGuiCanvFrame::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiCanvFrame*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnEvtGuiCanvFrame::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiCanvFrame*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnEvtGuiCanvFrame::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiCanvFrame*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnEvtGuiCanvFrame::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiCanvFrame*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnEvtGuiSeleFrame::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnEvtGuiSeleFrame::Class_Name()
{
   return "TSnEvtGuiSeleFrame";
}

//______________________________________________________________________________
const char *TSnEvtGuiSeleFrame::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiSeleFrame*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnEvtGuiSeleFrame::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiSeleFrame*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnEvtGuiSeleFrame::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiSeleFrame*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnEvtGuiSeleFrame::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiSeleFrame*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnEvtGuiDataGuru::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnEvtGuiDataGuru::Class_Name()
{
   return "TSnEvtGuiDataGuru";
}

//______________________________________________________________________________
const char *TSnEvtGuiDataGuru::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiDataGuru*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnEvtGuiDataGuru::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiDataGuru*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnEvtGuiDataGuru::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiDataGuru*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnEvtGuiDataGuru::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiDataGuru*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnEvtGuiMainFrame::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnEvtGuiMainFrame::Class_Name()
{
   return "TSnEvtGuiMainFrame";
}

//______________________________________________________________________________
const char *TSnEvtGuiMainFrame::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiMainFrame*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnEvtGuiMainFrame::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiMainFrame*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnEvtGuiMainFrame::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiMainFrame*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnEvtGuiMainFrame::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEvtGuiMainFrame*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnGCanvasSaveDialog::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnGCanvasSaveDialog::Class_Name()
{
   return "TSnGCanvasSaveDialog";
}

//______________________________________________________________________________
const char *TSnGCanvasSaveDialog::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnGCanvasSaveDialog*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnGCanvasSaveDialog::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnGCanvasSaveDialog*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnGCanvasSaveDialog::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnGCanvasSaveDialog*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnGCanvasSaveDialog::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnGCanvasSaveDialog*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnRejectBadVoltTimesMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnRejectBadVoltTimesMod::Class_Name()
{
   return "TSnRejectBadVoltTimesMod";
}

//______________________________________________________________________________
const char *TSnRejectBadVoltTimesMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnRejectBadVoltTimesMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnRejectBadVoltTimesMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnRejectBadVoltTimesMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnRejectBadVoltTimesMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnRejectBadVoltTimesMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnRejectBadVoltTimesMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnRejectBadVoltTimesMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnPlotPowerReadingsMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnPlotPowerReadingsMod::Class_Name()
{
   return "TSnPlotPowerReadingsMod";
}

//______________________________________________________________________________
const char *TSnPlotPowerReadingsMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotPowerReadingsMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnPlotPowerReadingsMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotPowerReadingsMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnPlotPowerReadingsMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotPowerReadingsMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnPlotPowerReadingsMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotPowerReadingsMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnPlotAdcDists::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnPlotAdcDists::Class_Name()
{
   return "TSnPlotAdcDists";
}

//______________________________________________________________________________
const char *TSnPlotAdcDists::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotAdcDists*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnPlotAdcDists::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotAdcDists*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnPlotAdcDists::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotAdcDists*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnPlotAdcDists::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPlotAdcDists*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnCalDatModule::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnCalDatModule::Class_Name()
{
   return "TSnCalDatModule";
}

//______________________________________________________________________________
const char *TSnCalDatModule::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalDatModule*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnCalDatModule::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalDatModule*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnCalDatModule::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalDatModule*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnCalDatModule::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalDatModule*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnCalDatModule::AdrWrap_t::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnCalDatModule::AdrWrap_t::Class_Name()
{
   return "TSnCalDatModule::AdrWrap_t";
}

//______________________________________________________________________________
const char *TSnCalDatModule::AdrWrap_t::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalDatModule::AdrWrap_t*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnCalDatModule::AdrWrap_t::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalDatModule::AdrWrap_t*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnCalDatModule::AdrWrap_t::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalDatModule::AdrWrap_t*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnCalDatModule::AdrWrap_t::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalDatModule::AdrWrap_t*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnFilterWaveformMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnFilterWaveformMod::Class_Name()
{
   return "TSnFilterWaveformMod";
}

//______________________________________________________________________________
const char *TSnFilterWaveformMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFilterWaveformMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnFilterWaveformMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFilterWaveformMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnFilterWaveformMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFilterWaveformMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnFilterWaveformMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFilterWaveformMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnStopFindRms::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnStopFindRms::Class_Name()
{
   return "TSnStopFindRms";
}

//______________________________________________________________________________
const char *TSnStopFindRms::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnStopFindRms*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnStopFindRms::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnStopFindRms*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnStopFindRms::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnStopFindRms*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnStopFindRms::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnStopFindRms*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnShiftCalWvDataMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnShiftCalWvDataMod::Class_Name()
{
   return "TSnShiftCalWvDataMod";
}

//______________________________________________________________________________
const char *TSnShiftCalWvDataMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnShiftCalWvDataMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnShiftCalWvDataMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnShiftCalWvDataMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnShiftCalWvDataMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnShiftCalWvDataMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnShiftCalWvDataMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnShiftCalWvDataMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnMakeShiftTree::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnMakeShiftTree::Class_Name()
{
   return "TSnMakeShiftTree";
}

//______________________________________________________________________________
const char *TSnMakeShiftTree::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnMakeShiftTree*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnMakeShiftTree::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnMakeShiftTree*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnMakeShiftTree::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnMakeShiftTree*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnMakeShiftTree::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnMakeShiftTree*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnPruneBadEvtsMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnPruneBadEvtsMod::Class_Name()
{
   return "TSnPruneBadEvtsMod";
}

//______________________________________________________________________________
const char *TSnPruneBadEvtsMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPruneBadEvtsMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnPruneBadEvtsMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPruneBadEvtsMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnPruneBadEvtsMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPruneBadEvtsMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnPruneBadEvtsMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPruneBadEvtsMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnFFTCalcMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnFFTCalcMod::Class_Name()
{
   return "TSnFFTCalcMod";
}

//______________________________________________________________________________
const char *TSnFFTCalcMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFFTCalcMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnFFTCalcMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFFTCalcMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnFFTCalcMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFFTCalcMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnFFTCalcMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFFTCalcMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnFindWaveformEnvelopeMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnFindWaveformEnvelopeMod::Class_Name()
{
   return "TSnFindWaveformEnvelopeMod";
}

//______________________________________________________________________________
const char *TSnFindWaveformEnvelopeMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFindWaveformEnvelopeMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnFindWaveformEnvelopeMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFindWaveformEnvelopeMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnFindWaveformEnvelopeMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFindWaveformEnvelopeMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnFindWaveformEnvelopeMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFindWaveformEnvelopeMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TSnRawTreeMaker::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnRawTreeMaker.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnRawTreeMaker::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnRawTreeMaker::Class(),this);
   }
}

//______________________________________________________________________________
void TSnRawTreeMaker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnRawTreeMaker.
      TClass *R__cl = ::TSnRawTreeMaker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInfn", &fInfn);
      R__insp.InspectMember(fInfn, "fInfn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOdir", &fOdir);
      R__insp.InspectMember(fOdir, "fOdir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOpre", &fOpre);
      R__insp.InspectMember(fOpre, "fOpre.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBufsz", &fBufsz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSplit", &fSplit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCompr", &fCompr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInf", &fInf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutf", &fOutf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVt", &fVt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHt", &fHt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCt", &fCt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEt", &fEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPwr", &fPwr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHrt", &fHrt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtMeta", &fEvtMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fConf", &fConf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunf", &fRunf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNets", &fNets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHrun", &fHrun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fComp", &fComp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSeq", &fSeq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClkStrt", &fClkStrt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClkStop", &fClkStop);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnRawTreeMaker(void *p) {
      return  p ? new(p) ::TSnRawTreeMaker : new ::TSnRawTreeMaker;
   }
   static void *newArray_TSnRawTreeMaker(Long_t nElements, void *p) {
      return p ? new(p) ::TSnRawTreeMaker[nElements] : new ::TSnRawTreeMaker[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnRawTreeMaker(void *p) {
      delete ((::TSnRawTreeMaker*)p);
   }
   static void deleteArray_TSnRawTreeMaker(void *p) {
      delete [] ((::TSnRawTreeMaker*)p);
   }
   static void destruct_TSnRawTreeMaker(void *p) {
      typedef ::TSnRawTreeMaker current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnRawTreeMaker

//______________________________________________________________________________
void TSnBasicEvtSelMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnBasicEvtSelMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnBasicEvtSelMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnBasicEvtSelMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnBasicEvtSelMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnBasicEvtSelMod.
      TClass *R__cl = ::TSnBasicEvtSelMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHdrBrNm", &fHdrBrNm);
      R__insp.InspectMember(fHdrBrNm, "fHdrBrNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEWvBrNm", &fEWvBrNm);
      R__insp.InspectMember(fEWvBrNm, "fEWvBrNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTbits", &fTbits);
      R__insp.InspectMember(fTbits, "fTbits.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRbits", &fRbits);
      R__insp.InspectMember(fRbits, "fRbits.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoCRC", &fDoCRC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRaw", &fRaw);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnBasicEvtSelMod(void *p) {
      return  p ? new(p) ::TSnBasicEvtSelMod : new ::TSnBasicEvtSelMod;
   }
   static void *newArray_TSnBasicEvtSelMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnBasicEvtSelMod[nElements] : new ::TSnBasicEvtSelMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnBasicEvtSelMod(void *p) {
      delete ((::TSnBasicEvtSelMod*)p);
   }
   static void deleteArray_TSnBasicEvtSelMod(void *p) {
      delete [] ((::TSnBasicEvtSelMod*)p);
   }
   static void destruct_TSnBasicEvtSelMod(void *p) {
      typedef ::TSnBasicEvtSelMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnBasicEvtSelMod

//______________________________________________________________________________
void TSnRejectBadClocksMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnRejectBadClocksMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnRejectBadClocksMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnRejectBadClocksMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnRejectBadClocksMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnRejectBadClocksMod.
      TClass *R__cl = ::TSnRejectBadClocksMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinTime", &fMinTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxTime", &fMaxTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bInclude", &bInclude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnRejectBadClocksMod(void *p) {
      return  p ? new(p) ::TSnRejectBadClocksMod : new ::TSnRejectBadClocksMod;
   }
   static void *newArray_TSnRejectBadClocksMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnRejectBadClocksMod[nElements] : new ::TSnRejectBadClocksMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnRejectBadClocksMod(void *p) {
      delete ((::TSnRejectBadClocksMod*)p);
   }
   static void deleteArray_TSnRejectBadClocksMod(void *p) {
      delete [] ((::TSnRejectBadClocksMod*)p);
   }
   static void destruct_TSnRejectBadClocksMod(void *p) {
      typedef ::TSnRejectBadClocksMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnRejectBadClocksMod

//______________________________________________________________________________
void TSnRejectEarlyEvtsMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnRejectEarlyEvtsMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnRejectEarlyEvtsMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnRejectEarlyEvtsMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnRejectEarlyEvtsMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnRejectEarlyEvtsMod.
      TClass *R__cl = ::TSnRejectEarlyEvtsMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEarlyTime", &fEarlyTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStart", &fStart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnRejectEarlyEvtsMod(void *p) {
      return  p ? new(p) ::TSnRejectEarlyEvtsMod : new ::TSnRejectEarlyEvtsMod;
   }
   static void *newArray_TSnRejectEarlyEvtsMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnRejectEarlyEvtsMod[nElements] : new ::TSnRejectEarlyEvtsMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnRejectEarlyEvtsMod(void *p) {
      delete ((::TSnRejectEarlyEvtsMod*)p);
   }
   static void deleteArray_TSnRejectEarlyEvtsMod(void *p) {
      delete [] ((::TSnRejectEarlyEvtsMod*)p);
   }
   static void destruct_TSnRejectEarlyEvtsMod(void *p) {
      typedef ::TSnRejectEarlyEvtsMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnRejectEarlyEvtsMod

//______________________________________________________________________________
void TSnFPNCalcMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnFPNCalcMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnFPNCalcMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnFPNCalcMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnFPNCalcMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnFPNCalcMod.
      TClass *R__cl = ::TSnFPNCalcMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSet", &fFpnSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeakFrc", &fPeakFrc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFpnSetNm", &fFpnSetNm);
      R__insp.InspectMember(fFpnSetNm, "fFpnSetNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGausFit", &fGausFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSbins", &fSbins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSmin", &fSmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSmax", &fSmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbins", &fAbins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmin", &fAmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmax", &fAmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHadcs", &fHadcs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRaw", &fRaw);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnFPNCalcMod(void *p) {
      return  p ? new(p) ::TSnFPNCalcMod : new ::TSnFPNCalcMod;
   }
   static void *newArray_TSnFPNCalcMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnFPNCalcMod[nElements] : new ::TSnFPNCalcMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnFPNCalcMod(void *p) {
      delete ((::TSnFPNCalcMod*)p);
   }
   static void deleteArray_TSnFPNCalcMod(void *p) {
      delete [] ((::TSnFPNCalcMod*)p);
   }
   static void destruct_TSnFPNCalcMod(void *p) {
      typedef ::TSnFPNCalcMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnFPNCalcMod

//______________________________________________________________________________
void TSnFPNSubMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnFPNSubMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnFPNSubMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnFPNSubMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnFPNSubMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnFPNSubMod.
      TClass *R__cl = ::TSnFPNSubMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFpnSetName", &fFpnSetName);
      R__insp.InspectMember(fFpnSetName, "fFpnSetName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalDatNm", &fCalDatNm);
      R__insp.InspectMember(fCalDatNm, "fCalDatNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRaw", &fRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSet", &fFpnSet);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnFPNSubMod(void *p) {
      return  p ? new(p) ::TSnFPNSubMod : new ::TSnFPNSubMod;
   }
   static void *newArray_TSnFPNSubMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnFPNSubMod[nElements] : new ::TSnFPNSubMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnFPNSubMod(void *p) {
      delete ((::TSnFPNSubMod*)p);
   }
   static void deleteArray_TSnFPNSubMod(void *p) {
      delete [] ((::TSnFPNSubMod*)p);
   }
   static void destruct_TSnFPNSubMod(void *p) {
      typedef ::TSnFPNSubMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnFPNSubMod

//______________________________________________________________________________
void TSnDigitizerCalibMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnDigitizerCalibMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnDigitizerCalibMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnDigitizerCalibMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnDigitizerCalibMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnDigitizerCalibMod.
      TClass *R__cl = ::TSnDigitizerCalibMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalSetNm", &fCalSetNm);
      R__insp.InspectMember(fCalSetNm, "fCalSetNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFpnSubNm", &fFpnSubNm);
      R__insp.InspectMember(fFpnSubNm, "fFpnSubNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalDatNm", &fCalDatNm);
      R__insp.InspectMember(fCalDatNm, "fCalDatNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFpnSubFromTree", &fFpnSubFromTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalSet", &fCalSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSub", &fFpnSub);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnDigitizerCalibMod(void *p) {
      return  p ? new(p) ::TSnDigitizerCalibMod : new ::TSnDigitizerCalibMod;
   }
   static void *newArray_TSnDigitizerCalibMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnDigitizerCalibMod[nElements] : new ::TSnDigitizerCalibMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnDigitizerCalibMod(void *p) {
      delete ((::TSnDigitizerCalibMod*)p);
   }
   static void deleteArray_TSnDigitizerCalibMod(void *p) {
      delete [] ((::TSnDigitizerCalibMod*)p);
   }
   static void destruct_TSnDigitizerCalibMod(void *p) {
      typedef ::TSnDigitizerCalibMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnDigitizerCalibMod

//______________________________________________________________________________
void TSnSaveCalibDataMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnSaveCalibDataMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnSaveCalibDataMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnSaveCalibDataMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnSaveCalibDataMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnSaveCalibDataMod.
      TClass *R__cl = ::TSnSaveCalibDataMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFPNSubDatNm", &fFPNSubDatNm);
      R__insp.InspectMember(fFPNSubDatNm, "fFPNSubDatNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSaveFPNSub", &fSaveFPNSub);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmpOutDatNm", &fAmpOutDatNm);
      R__insp.InspectMember(fAmpOutDatNm, "fAmpOutDatNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSaveAmpOut", &fSaveAmpOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutdir", &fOutdir);
      R__insp.InspectMember(fOutdir, "fOutdir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutprf", &fOutprf);
      R__insp.InspectMember(fOutprf, "fOutprf.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBufsz", &fBufsz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSplit", &fSplit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutTreeTitle", &fOutTreeTitle);
      R__insp.InspectMember(fOutTreeTitle, "fOutTreeTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFPNSubDat", &fFPNSubDat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOutDat", &fAmpOutDat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOt", &fOt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutf", &fOutf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFPNSubBr", &fFPNSubBr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOutBr", &fAmpOutBr);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnSaveCalibDataMod(void *p) {
      return  p ? new(p) ::TSnSaveCalibDataMod : new ::TSnSaveCalibDataMod;
   }
   static void *newArray_TSnSaveCalibDataMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnSaveCalibDataMod[nElements] : new ::TSnSaveCalibDataMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnSaveCalibDataMod(void *p) {
      delete ((::TSnSaveCalibDataMod*)p);
   }
   static void deleteArray_TSnSaveCalibDataMod(void *p) {
      delete [] ((::TSnSaveCalibDataMod*)p);
   }
   static void destruct_TSnSaveCalibDataMod(void *p) {
      typedef ::TSnSaveCalibDataMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnSaveCalibDataMod

//______________________________________________________________________________
void TSnCalcAbsTimeMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnCalcAbsTimeMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnCalcAbsTimeMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnCalcAbsTimeMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnCalcAbsTimeMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnCalcAbsTimeMod.
      TClass *R__cl = ::TSnCalcAbsTimeMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAETimeNm", &fAETimeNm);
      R__insp.InspectMember(fAETimeNm, "fAETimeNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrev", &fPrev);
      R__insp.InspectMember(fPrev, "fPrev.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNewFile", &fNewFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStart", &fStart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPrevStart", &fPrevStart);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnCalcAbsTimeMod(void *p) {
      return  p ? new(p) ::TSnCalcAbsTimeMod : new ::TSnCalcAbsTimeMod;
   }
   static void *newArray_TSnCalcAbsTimeMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnCalcAbsTimeMod[nElements] : new ::TSnCalcAbsTimeMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnCalcAbsTimeMod(void *p) {
      delete ((::TSnCalcAbsTimeMod*)p);
   }
   static void deleteArray_TSnCalcAbsTimeMod(void *p) {
      delete [] ((::TSnCalcAbsTimeMod*)p);
   }
   static void destruct_TSnCalcAbsTimeMod(void *p) {
      typedef ::TSnCalcAbsTimeMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnCalcAbsTimeMod

//______________________________________________________________________________
void TSnFindTimeLimitsMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnFindTimeLimitsMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnFindTimeLimitsMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnFindTimeLimitsMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnFindTimeLimitsMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnFindTimeLimitsMod.
      TClass *R__cl = ::TSnFindTimeLimitsMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAETimeNm", &fAETimeNm);
      R__insp.InspectMember(fAETimeNm, "fAETimeNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinName", &fMinName);
      R__insp.InspectMember(fMinName, "fMinName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxName", &fMaxName);
      R__insp.InspectMember(fMaxName, "fMaxName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMinTime", &fMinTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMaxTime", &fMaxTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirst", &fFirst);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnFindTimeLimitsMod(void *p) {
      return  p ? new(p) ::TSnFindTimeLimitsMod : new ::TSnFindTimeLimitsMod;
   }
   static void *newArray_TSnFindTimeLimitsMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnFindTimeLimitsMod[nElements] : new ::TSnFindTimeLimitsMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnFindTimeLimitsMod(void *p) {
      delete ((::TSnFindTimeLimitsMod*)p);
   }
   static void deleteArray_TSnFindTimeLimitsMod(void *p) {
      delete [] ((::TSnFindTimeLimitsMod*)p);
   }
   static void destruct_TSnFindTimeLimitsMod(void *p) {
      typedef ::TSnFindTimeLimitsMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnFindTimeLimitsMod

//______________________________________________________________________________
void TSnFindEvtNumLimitsMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnFindEvtNumLimitsMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnFindEvtNumLimitsMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnFindEvtNumLimitsMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnFindEvtNumLimitsMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnFindEvtNumLimitsMod.
      TClass *R__cl = ::TSnFindEvtNumLimitsMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinName", &fMinName);
      R__insp.InspectMember(fMinName, "fMinName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxName", &fMaxName);
      R__insp.InspectMember(fMaxName, "fMaxName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMinEvtNum", &fMinEvtNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMaxEvtNum", &fMaxEvtNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirst", &fFirst);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnFindEvtNumLimitsMod(void *p) {
      return  p ? new(p) ::TSnFindEvtNumLimitsMod : new ::TSnFindEvtNumLimitsMod;
   }
   static void *newArray_TSnFindEvtNumLimitsMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnFindEvtNumLimitsMod[nElements] : new ::TSnFindEvtNumLimitsMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnFindEvtNumLimitsMod(void *p) {
      delete ((::TSnFindEvtNumLimitsMod*)p);
   }
   static void deleteArray_TSnFindEvtNumLimitsMod(void *p) {
      delete [] ((::TSnFindEvtNumLimitsMod*)p);
   }
   static void destruct_TSnFindEvtNumLimitsMod(void *p) {
      typedef ::TSnFindEvtNumLimitsMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnFindEvtNumLimitsMod

//______________________________________________________________________________
void TSnPlotEvtRateMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnPlotEvtRateMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnPlotEvtRateMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnPlotEvtRateMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnPlotEvtRateMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnPlotEvtRateMod.
      TClass *R__cl = ::TSnPlotEvtRateMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTwin", &fTwin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConsDTbw", &fConsDTbw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCombDTbw", &fCombDTbw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsTimeNm", &fAbsTimeNm);
      R__insp.InspectMember(fAbsTimeNm, "fAbsTimeNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSecResOk", &fSecResOk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNtimeBins", &fNtimeBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeMin", &fTimeMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeMax", &fTimeMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnumVsTnm", &fEnumVsTnm);
      R__insp.InspectMember(fEnumVsTnm, "fEnumVsTnm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fERvsTnm", &fERvsTnm);
      R__insp.InspectMember(fERvsTnm, "fERvsTnm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fERvsEnumNm", &fERvsEnumNm);
      R__insp.InspectMember(fERvsEnumNm, "fERvsEnumNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawDTnm", &fRawDTnm);
      R__insp.InspectMember(fRawDTnm, "fRawDTnm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDTnm", &fDTnm);
      R__insp.InspectMember(fDTnm, "fDTnm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCombDTnm", &fCombDTnm);
      R__insp.InspectMember(fCombDTnm, "fCombDTnm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDTvsTnm", &fDTvsTnm);
      R__insp.InspectMember(fDTvsTnm, "fDTvsTnm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDTvsTgrNm", &fDTvsTgrNm);
      R__insp.InspectMember(fDTvsTgrNm, "fDTvsTgrNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCombDTvsTnm", &fCombDTvsTnm);
      R__insp.InspectMember(fCombDTvsTnm, "fCombDTvsTnm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEvtsNm", &fNumEvtsNm);
      R__insp.InspectMember(fNumEvtsNm, "fNumEvtsNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLivetimeNm", &fLivetimeNm);
      R__insp.InspectMember(fLivetimeNm, "fLivetimeNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvtNumsNm", &fEvtNumsNm);
      R__insp.InspectMember(fEvtNumsNm, "fEvtNumsNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRateVsTnm", &fRateVsTnm);
      R__insp.InspectMember(fRateVsTnm, "fRateVsTnm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNumEvts", &fNumEvts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLivetime", &fLivetime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtNums", &fEvtNums);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRateVsT", &fRateVsT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEnumVsT", &fEnumVsT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fERvsT", &fERvsT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fERvsEnum", &fERvsEnum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawDT", &fRawDT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDT", &fDT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCombDT", &fCombDT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDTvsT", &fDTvsT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDTvsTgr", &fDTvsTgr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCombDTvsT", &fCombDTvsT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMeta", &fMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPrevMeta", &fPrevMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStop", &fStop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTs", (void*)&fNTs);
      R__insp.InspectMember("TSnPlotEvtRateMod::VectNT_t", (void*)&fNTs, "fNTs.", true);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnPlotEvtRateMod(void *p) {
      return  p ? new(p) ::TSnPlotEvtRateMod : new ::TSnPlotEvtRateMod;
   }
   static void *newArray_TSnPlotEvtRateMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnPlotEvtRateMod[nElements] : new ::TSnPlotEvtRateMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnPlotEvtRateMod(void *p) {
      delete ((::TSnPlotEvtRateMod*)p);
   }
   static void deleteArray_TSnPlotEvtRateMod(void *p) {
      delete [] ((::TSnPlotEvtRateMod*)p);
   }
   static void destruct_TSnPlotEvtRateMod(void *p) {
      typedef ::TSnPlotEvtRateMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnPlotEvtRateMod

//______________________________________________________________________________
void TSnPlotWaveformsMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnPlotWaveformsMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnPlotWaveformsMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnPlotWaveformsMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnPlotWaveformsMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnPlotWaveformsMod.
      TClass *R__cl = ::TSnPlotWaveformsMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNevtBins", &fNevtBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvtMin", &fEvtMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvtMax", &fEvtMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoAdcPlots", &fDoAdcPlots);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoFpnSubPlots", &fDoFpnSubPlots);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoAmpOutPlots", &fDoAmpOutPlots);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAdc", &fAdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSub", &fFpnSub);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOut", &fAmpOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtsPerBin", &fEvtsPerBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAdcVsEvt", &fAdcVsEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubVsEvt", &fFpnSubVsEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubErrVsEvt", &fFpnSubErrVsEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOutVsEvt", &fAmpOutVsEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOutErrVsEvt", &fAmpOutErrVsEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAdcFFTVsEvt", &fAdcFFTVsEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubFFTVsEvt", &fFpnSubFFTVsEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOutFFTVsEvt", &fAmpOutFFTVsEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAdcAveFFT", &fAdcAveFFT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubAveFFT", &fFpnSubAveFFT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOutAveFFT", &fAmpOutAveFFT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEntryVsEvt", &fEntryVsEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAdcVsEntry", &fAdcVsEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubVsEntry", &fFpnSubVsEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubErrVsEntry", &fFpnSubErrVsEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOutVsEntry", &fAmpOutVsEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOutErrVsEntry", &fAmpOutErrVsEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAdcFFTVsEntry", &fAdcFFTVsEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubFFTVsEntry", &fFpnSubFFTVsEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOutFFTVsEntry", &fAmpOutFFTVsEntry);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnPlotWaveformsMod(void *p) {
      return  p ? new(p) ::TSnPlotWaveformsMod : new ::TSnPlotWaveformsMod;
   }
   static void *newArray_TSnPlotWaveformsMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnPlotWaveformsMod[nElements] : new ::TSnPlotWaveformsMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnPlotWaveformsMod(void *p) {
      delete ((::TSnPlotWaveformsMod*)p);
   }
   static void deleteArray_TSnPlotWaveformsMod(void *p) {
      delete [] ((::TSnPlotWaveformsMod*)p);
   }
   static void destruct_TSnPlotWaveformsMod(void *p) {
      typedef ::TSnPlotWaveformsMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnPlotWaveformsMod

//______________________________________________________________________________
void TSnEvtGuiMainFrame::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnEvtGuiMainFrame.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnEvtGuiMainFrame::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnEvtGuiMainFrame::Class(),this);
   }
}

//______________________________________________________________________________
void TSnEvtGuiMainFrame::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnEvtGuiMainFrame.
      TClass *R__cl = ::TSnEvtGuiMainFrame::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQObject", &fQObject);
      R__insp.InspectMember(fQObject, "fQObject.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCanvFrame", &fCanvFrame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSeleFrame", &fSeleFrame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDataGuru", &fDataGuru);
      TGMainFrame::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnEvtGuiMainFrame(void *p) {
      return  p ? new(p) ::TSnEvtGuiMainFrame : new ::TSnEvtGuiMainFrame;
   }
   static void *newArray_TSnEvtGuiMainFrame(Long_t nElements, void *p) {
      return p ? new(p) ::TSnEvtGuiMainFrame[nElements] : new ::TSnEvtGuiMainFrame[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnEvtGuiMainFrame(void *p) {
      delete ((::TSnEvtGuiMainFrame*)p);
   }
   static void deleteArray_TSnEvtGuiMainFrame(void *p) {
      delete [] ((::TSnEvtGuiMainFrame*)p);
   }
   static void destruct_TSnEvtGuiMainFrame(void *p) {
      typedef ::TSnEvtGuiMainFrame current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnEvtGuiMainFrame

//______________________________________________________________________________
void TSnEvtGuiCanvFrame::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnEvtGuiCanvFrame.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnEvtGuiCanvFrame::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnEvtGuiCanvFrame::Class(),this);
   }
}

//______________________________________________________________________________
void TSnEvtGuiCanvFrame::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnEvtGuiCanvFrame.
      TClass *R__cl = ::TSnEvtGuiCanvFrame::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQObject", &fQObject);
      R__insp.InspectMember(fQObject, "fQObject.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWaveCanv", &fWaveCanv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSaveCont", &fSaveCont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMiscCanv", &fMiscCanv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSaveWvBtn", &fSaveWvBtn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSaveMsBtn", &fSaveMsBtn);
      TGVerticalFrame::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnEvtGuiCanvFrame(void *p) {
      return  p ? new(p) ::TSnEvtGuiCanvFrame : new ::TSnEvtGuiCanvFrame;
   }
   static void *newArray_TSnEvtGuiCanvFrame(Long_t nElements, void *p) {
      return p ? new(p) ::TSnEvtGuiCanvFrame[nElements] : new ::TSnEvtGuiCanvFrame[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnEvtGuiCanvFrame(void *p) {
      delete ((::TSnEvtGuiCanvFrame*)p);
   }
   static void deleteArray_TSnEvtGuiCanvFrame(void *p) {
      delete [] ((::TSnEvtGuiCanvFrame*)p);
   }
   static void destruct_TSnEvtGuiCanvFrame(void *p) {
      typedef ::TSnEvtGuiCanvFrame current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnEvtGuiCanvFrame

//______________________________________________________________________________
void TSnEvtGuiSeleFrame::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnEvtGuiSeleFrame.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnEvtGuiSeleFrame::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnEvtGuiSeleFrame::Class(),this);
   }
}

//______________________________________________________________________________
void TSnEvtGuiSeleFrame::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnEvtGuiSeleFrame.
      TClass *R__cl = ::TSnEvtGuiSeleFrame::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQObject", &fQObject);
      R__insp.InspectMember(fQObject, "fQObject.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChanBtnGroup", &fChanBtnGroup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChanBtn[4]", &fChanBtn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWaveBtnGroup", &fWaveBtnGroup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWaveAdcBtn", &fWaveAdcBtn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWaveFpnSubBtn", &fWaveFpnSubBtn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWaveAmpOutBtn", &fWaveAmpOutBtn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWaveAdcFFTBtn", &fWaveAdcFFTBtn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWaveFpnSubFFTBtn", &fWaveFpnSubFFTBtn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWaveAmpOutFFTBtn", &fWaveAmpOutFFTBtn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtLabelFrame", &fEvtLabelFrame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtLabel", &fEvtLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEntryLabel", &fEntryLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtRangeLbl", &fEvtRangeLbl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEntryRangeLbl", &fEntryRangeLbl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtNumEntry", &fEvtNumEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEntryNumEntry", &fEntryNumEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtNavBtnCont", &fEvtNavBtnCont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtNavBtns", &fEvtNavBtns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtPrevBtn", &fEvtPrevBtn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtNextBtn", &fEvtNextBtn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLabelFrame", &fLabelFrame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTimeLabel", &fTimeLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrgLabel", &fTrgLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunLabel", &fRunLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMiscTabs", &fMiscTabs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAdcTab", &fAdcTab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAdcFFTTab", &fAdcFFTTab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubTab", &fFpnSubTab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubFFTTab", &fFpnSubFFTTab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOutTab", &fAmpOutTab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOutFFTTab", &fAmpOutFFTTab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAdcCombo", &fAdcCombo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAdcFFTCombo", &fAdcFFTCombo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubCombo", &fFpnSubCombo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubFFTCombo", &fFpnSubFFTCombo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOutCombo", &fAmpOutCombo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpOutFFTCombo", &fAmpOutFFTCombo);
      TGVerticalFrame::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnEvtGuiSeleFrame(void *p) {
      return  p ? new(p) ::TSnEvtGuiSeleFrame : new ::TSnEvtGuiSeleFrame;
   }
   static void *newArray_TSnEvtGuiSeleFrame(Long_t nElements, void *p) {
      return p ? new(p) ::TSnEvtGuiSeleFrame[nElements] : new ::TSnEvtGuiSeleFrame[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnEvtGuiSeleFrame(void *p) {
      delete ((::TSnEvtGuiSeleFrame*)p);
   }
   static void deleteArray_TSnEvtGuiSeleFrame(void *p) {
      delete [] ((::TSnEvtGuiSeleFrame*)p);
   }
   static void destruct_TSnEvtGuiSeleFrame(void *p) {
      typedef ::TSnEvtGuiSeleFrame current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnEvtGuiSeleFrame

//______________________________________________________________________________
void TSnGCanvasSaveDialog::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnGCanvasSaveDialog.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnGCanvasSaveDialog::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnGCanvasSaveDialog::Class(),this);
   }
}

//______________________________________________________________________________
void TSnGCanvasSaveDialog::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnGCanvasSaveDialog.
      TClass *R__cl = ::TSnGCanvasSaveDialog::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQObject", &fQObject);
      R__insp.InspectMember(fQObject, "fQObject.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDiag", &fDiag);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnGCanvasSaveDialog(void *p) {
      return  p ? new(p) ::TSnGCanvasSaveDialog : new ::TSnGCanvasSaveDialog;
   }
   static void *newArray_TSnGCanvasSaveDialog(Long_t nElements, void *p) {
      return p ? new(p) ::TSnGCanvasSaveDialog[nElements] : new ::TSnGCanvasSaveDialog[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnGCanvasSaveDialog(void *p) {
      delete ((::TSnGCanvasSaveDialog*)p);
   }
   static void deleteArray_TSnGCanvasSaveDialog(void *p) {
      delete [] ((::TSnGCanvasSaveDialog*)p);
   }
   static void destruct_TSnGCanvasSaveDialog(void *p) {
      typedef ::TSnGCanvasSaveDialog current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnGCanvasSaveDialog

//______________________________________________________________________________
void TSnEvtGuiDataGuru::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnEvtGuiDataGuru.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnEvtGuiDataGuru::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnEvtGuiDataGuru::Class(),this);
   }
}

//______________________________________________________________________________
void TSnEvtGuiDataGuru::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnEvtGuiDataGuru.
      TClass *R__cl = ::TSnEvtGuiDataGuru::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPlotf", &fPlotf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWaveChansOn", (void*)&fWaveChansOn);
      R__insp.InspectMember("vector<bool>", (void*)&fWaveChansOn, "fWaveChansOn.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChanColors", (void*)&fChanColors);
      R__insp.InspectMember("vector<Int_t>", (void*)&fChanColors, "fChanColors.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWave", &fWave);
      R__insp.InspectMember(fWave, "fWave.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWaveHists", (void*)&fWaveHists);
      R__insp.InspectMember("vector<TH1*>", (void*)&fWaveHists, "fWaveHists.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWaveSources", &fWaveSources);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMiscPlots", &fMiscPlots);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEntryVsEvt", &fEntryVsEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinEvt", &fMinEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxEvt", &fMaxEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinEntry", &fMinEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxEntry", &fMaxEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtHdr", &fEvtHdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtMeta", &fEvtMeta);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnEvtGuiDataGuru(void *p) {
      return  p ? new(p) ::TSnEvtGuiDataGuru : new ::TSnEvtGuiDataGuru;
   }
   static void *newArray_TSnEvtGuiDataGuru(Long_t nElements, void *p) {
      return p ? new(p) ::TSnEvtGuiDataGuru[nElements] : new ::TSnEvtGuiDataGuru[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnEvtGuiDataGuru(void *p) {
      delete ((::TSnEvtGuiDataGuru*)p);
   }
   static void deleteArray_TSnEvtGuiDataGuru(void *p) {
      delete [] ((::TSnEvtGuiDataGuru*)p);
   }
   static void destruct_TSnEvtGuiDataGuru(void *p) {
      typedef ::TSnEvtGuiDataGuru current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnEvtGuiDataGuru

//______________________________________________________________________________
void TSnRejectBadVoltTimesMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnRejectBadVoltTimesMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnRejectBadVoltTimesMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnRejectBadVoltTimesMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnRejectBadVoltTimesMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnRejectBadVoltTimesMod.
      TClass *R__cl = ::TSnRejectBadVoltTimesMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPwr", &fPwr);
      TSnRejectBadClocksMod::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnRejectBadVoltTimesMod(void *p) {
      return  p ? new(p) ::TSnRejectBadVoltTimesMod : new ::TSnRejectBadVoltTimesMod;
   }
   static void *newArray_TSnRejectBadVoltTimesMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnRejectBadVoltTimesMod[nElements] : new ::TSnRejectBadVoltTimesMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnRejectBadVoltTimesMod(void *p) {
      delete ((::TSnRejectBadVoltTimesMod*)p);
   }
   static void deleteArray_TSnRejectBadVoltTimesMod(void *p) {
      delete [] ((::TSnRejectBadVoltTimesMod*)p);
   }
   static void destruct_TSnRejectBadVoltTimesMod(void *p) {
      typedef ::TSnRejectBadVoltTimesMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnRejectBadVoltTimesMod

//______________________________________________________________________________
void TSnPlotPowerReadingsMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnPlotPowerReadingsMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnPlotPowerReadingsMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnPlotPowerReadingsMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnPlotPowerReadingsMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnPlotPowerReadingsMod.
      TClass *R__cl = ::TSnPlotPowerReadingsMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVoltNm", &fVoltNm);
      R__insp.InspectMember(fVoltNm, "fVoltNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrNm", &fCurrNm);
      R__insp.InspectMember(fCurrNm, "fCurrNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVolt", &fVolt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurr", &fCurr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPwr", &fPwr);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnPlotPowerReadingsMod(void *p) {
      return  p ? new(p) ::TSnPlotPowerReadingsMod : new ::TSnPlotPowerReadingsMod;
   }
   static void *newArray_TSnPlotPowerReadingsMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnPlotPowerReadingsMod[nElements] : new ::TSnPlotPowerReadingsMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnPlotPowerReadingsMod(void *p) {
      delete ((::TSnPlotPowerReadingsMod*)p);
   }
   static void deleteArray_TSnPlotPowerReadingsMod(void *p) {
      delete [] ((::TSnPlotPowerReadingsMod*)p);
   }
   static void destruct_TSnPlotPowerReadingsMod(void *p) {
      typedef ::TSnPlotPowerReadingsMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnPlotPowerReadingsMod

//______________________________________________________________________________
void TSnPlotAdcDists::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnPlotAdcDists.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnPlotAdcDists::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnPlotAdcDists::Class(),this);
   }
}

//______________________________________________________________________________
void TSnPlotAdcDists::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnPlotAdcDists.
      TClass *R__cl = ::TSnPlotAdcDists::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPlotTag", &fPlotTag);
      R__insp.InspectMember(fPlotTag, "fPlotTag.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPlotLbl", &fPlotLbl);
      R__insp.InspectMember(fPlotLbl, "fPlotLbl.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNtimeBins", &fNtimeBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeMin", &fTimeMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeMax", &fTimeMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRawAdcBins", &fNRawAdcBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawAdcMin", &fRawAdcMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawAdcMax", &fRawAdcMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFpnSubBins", &fNFpnSubBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFpnSubMin", &fFpnSubMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFpnSubMax", &fFpnSubMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFracBins", &fNFracBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFracMin", &fFracMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFracMax", &fFracMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoFpnSubPlots", &fDoFpnSubPlots);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLowFreqCut", &fLowFreqCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNormTimeBins", &fNormTimeBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoSmpPlots", &fDoSmpPlots);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAdc", &fAdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpn", &fFpn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtsPerBin", &fEvtsPerBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawAdc", &fRawAdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawAdcVsT", &fRawAdcVsT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSub", &fFpnSub);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubVsT", &fFpnSubVsT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubFftVsT", &fFpnSubFftVsT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubMaxFrqVsT", &fFpnSubMaxFrqVsT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubLowPwrVsT", &fFpnSubLowPwrVsT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawAdcSmp", &fRawAdcSmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawAdcSmpVsT", &fRawAdcSmpVsT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubSmp", &fFpnSubSmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSubSmpVsT", &fFpnSubSmpVsT);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnPlotAdcDists(void *p) {
      return  p ? new(p) ::TSnPlotAdcDists : new ::TSnPlotAdcDists;
   }
   static void *newArray_TSnPlotAdcDists(Long_t nElements, void *p) {
      return p ? new(p) ::TSnPlotAdcDists[nElements] : new ::TSnPlotAdcDists[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnPlotAdcDists(void *p) {
      delete ((::TSnPlotAdcDists*)p);
   }
   static void deleteArray_TSnPlotAdcDists(void *p) {
      delete [] ((::TSnPlotAdcDists*)p);
   }
   static void destruct_TSnPlotAdcDists(void *p) {
      typedef ::TSnPlotAdcDists current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnPlotAdcDists

//______________________________________________________________________________
void TSnCalDatModule::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnCalDatModule.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnCalDatModule::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnCalDatModule::Class(),this);
   }
}

//______________________________________________________________________________
void TSnCalDatModule::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnCalDatModule.
      TClass *R__cl = ::TSnCalDatModule::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNmToCalDat", &fNmToCalDat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsBr", &fIsBr);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TSnCalDatModule(void *p) {
      delete ((::TSnCalDatModule*)p);
   }
   static void deleteArray_TSnCalDatModule(void *p) {
      delete [] ((::TSnCalDatModule*)p);
   }
   static void destruct_TSnCalDatModule(void *p) {
      typedef ::TSnCalDatModule current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnCalDatModule

//______________________________________________________________________________
void TSnCalDatModule::AdrWrap_t::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnCalDatModule::AdrWrap_t.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnCalDatModule::AdrWrap_t::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnCalDatModule::AdrWrap_t::Class(),this);
   }
}

//______________________________________________________________________________
void TSnCalDatModule::AdrWrap_t::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnCalDatModule::AdrWrap_t.
      TClass *R__cl = ::TSnCalDatModule::AdrWrap_t::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAdr", &fAdr);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnCalDatModulecLcLAdrWrap_t(void *p) {
      return  p ? new(p) ::TSnCalDatModule::AdrWrap_t : new ::TSnCalDatModule::AdrWrap_t;
   }
   static void *newArray_TSnCalDatModulecLcLAdrWrap_t(Long_t nElements, void *p) {
      return p ? new(p) ::TSnCalDatModule::AdrWrap_t[nElements] : new ::TSnCalDatModule::AdrWrap_t[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnCalDatModulecLcLAdrWrap_t(void *p) {
      delete ((::TSnCalDatModule::AdrWrap_t*)p);
   }
   static void deleteArray_TSnCalDatModulecLcLAdrWrap_t(void *p) {
      delete [] ((::TSnCalDatModule::AdrWrap_t*)p);
   }
   static void destruct_TSnCalDatModulecLcLAdrWrap_t(void *p) {
      typedef ::TSnCalDatModule::AdrWrap_t current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnCalDatModule::AdrWrap_t

//______________________________________________________________________________
void TSnFilterWaveformMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnFilterWaveformMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnFilterWaveformMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnFilterWaveformMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnFilterWaveformMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnFilterWaveformMod.
      TClass *R__cl = ::TSnFilterWaveformMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDatBrNm", &fDatBrNm);
      R__insp.InspectMember(fDatBrNm, "fDatBrNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFltDatNm", &fFltDatNm);
      R__insp.InspectMember(fFltDatNm, "fFltDatNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFilter", &fFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDat", &fDat);
      TSnCalDatModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnFilterWaveformMod(void *p) {
      return  p ? new(p) ::TSnFilterWaveformMod : new ::TSnFilterWaveformMod;
   }
   static void *newArray_TSnFilterWaveformMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnFilterWaveformMod[nElements] : new ::TSnFilterWaveformMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnFilterWaveformMod(void *p) {
      delete ((::TSnFilterWaveformMod*)p);
   }
   static void deleteArray_TSnFilterWaveformMod(void *p) {
      delete [] ((::TSnFilterWaveformMod*)p);
   }
   static void destruct_TSnFilterWaveformMod(void *p) {
      typedef ::TSnFilterWaveformMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnFilterWaveformMod

//______________________________________________________________________________
void TSnStopFindRms::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnStopFindRms.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnStopFindRms::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnStopFindRms::Class(),this);
   }
}

//______________________________________________________________________________
void TSnStopFindRms::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnStopFindRms.
      TClass *R__cl = ::TSnStopFindRms::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDatBrNm", &fDatBrNm);
      R__insp.InspectMember(fDatBrNm, "fDatBrNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStopNm", &fStopNm);
      R__insp.InspectMember(fStopNm, "fStopNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStopWid", &fStopWid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSrchWid", &fSrchWid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJitter", &fJitter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDat", &fDat);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnStopFindRms(void *p) {
      return  p ? new(p) ::TSnStopFindRms : new ::TSnStopFindRms;
   }
   static void *newArray_TSnStopFindRms(Long_t nElements, void *p) {
      return p ? new(p) ::TSnStopFindRms[nElements] : new ::TSnStopFindRms[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnStopFindRms(void *p) {
      delete ((::TSnStopFindRms*)p);
   }
   static void deleteArray_TSnStopFindRms(void *p) {
      delete [] ((::TSnStopFindRms*)p);
   }
   static void destruct_TSnStopFindRms(void *p) {
      typedef ::TSnStopFindRms current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnStopFindRms

//______________________________________________________________________________
void TSnShiftCalWvDataMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnShiftCalWvDataMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnShiftCalWvDataMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnShiftCalWvDataMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnShiftCalWvDataMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnShiftCalWvDataMod.
      TClass *R__cl = ::TSnShiftCalWvDataMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDatBrNm", &fDatBrNm);
      R__insp.InspectMember(fDatBrNm, "fDatBrNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStopNm", &fStopNm);
      R__insp.InspectMember(fStopNm, "fStopNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShiftNm", &fShiftNm);
      R__insp.InspectMember(fShiftNm, "fShiftNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDat", &fDat);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnShiftCalWvDataMod(void *p) {
      return  p ? new(p) ::TSnShiftCalWvDataMod : new ::TSnShiftCalWvDataMod;
   }
   static void *newArray_TSnShiftCalWvDataMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnShiftCalWvDataMod[nElements] : new ::TSnShiftCalWvDataMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnShiftCalWvDataMod(void *p) {
      delete ((::TSnShiftCalWvDataMod*)p);
   }
   static void deleteArray_TSnShiftCalWvDataMod(void *p) {
      delete [] ((::TSnShiftCalWvDataMod*)p);
   }
   static void destruct_TSnShiftCalWvDataMod(void *p) {
      typedef ::TSnShiftCalWvDataMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnShiftCalWvDataMod

//______________________________________________________________________________
void TSnMakeShiftTree::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnMakeShiftTree.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnMakeShiftTree::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnMakeShiftTree::Class(),this);
   }
}

//______________________________________________________________________________
void TSnMakeShiftTree::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnMakeShiftTree.
      TClass *R__cl = ::TSnMakeShiftTree::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutTreeNm", &fOutTreeNm);
      R__insp.InspectMember(fOutTreeNm, "fOutTreeNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutTreeTitle", &fOutTreeTitle);
      R__insp.InspectMember(fOutTreeTitle, "fOutTreeTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDatBrNm", &fDatBrNm);
      R__insp.InspectMember(fDatBrNm, "fDatBrNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStopNm", &fStopNm);
      R__insp.InspectMember(fStopNm, "fStopNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShiftNm", &fShiftNm);
      R__insp.InspectMember(fShiftNm, "fShiftNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBufSz", &fBufSz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSplit", &fSplit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOt", &fOt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDat", &fDat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStops", &fStops);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fShifted", &fShifted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMeta", &fMeta);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnMakeShiftTree(void *p) {
      return  p ? new(p) ::TSnMakeShiftTree : new ::TSnMakeShiftTree;
   }
   static void *newArray_TSnMakeShiftTree(Long_t nElements, void *p) {
      return p ? new(p) ::TSnMakeShiftTree[nElements] : new ::TSnMakeShiftTree[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnMakeShiftTree(void *p) {
      delete ((::TSnMakeShiftTree*)p);
   }
   static void deleteArray_TSnMakeShiftTree(void *p) {
      delete [] ((::TSnMakeShiftTree*)p);
   }
   static void destruct_TSnMakeShiftTree(void *p) {
      typedef ::TSnMakeShiftTree current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnMakeShiftTree

//______________________________________________________________________________
void TSnPruneBadEvtsMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnPruneBadEvtsMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnPruneBadEvtsMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnPruneBadEvtsMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnPruneBadEvtsMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnPruneBadEvtsMod.
      TClass *R__cl = ::TSnPruneBadEvtsMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hAdc", &hAdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hdT", &hdT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hdTvsAdc", &hdTvsAdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpnSub", &fFpnSub);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunInfo", &fRunInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrigSC", &fTrigSC);
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnPruneBadEvtsMod(void *p) {
      return  p ? new(p) ::TSnPruneBadEvtsMod : new ::TSnPruneBadEvtsMod;
   }
   static void *newArray_TSnPruneBadEvtsMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnPruneBadEvtsMod[nElements] : new ::TSnPruneBadEvtsMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnPruneBadEvtsMod(void *p) {
      delete ((::TSnPruneBadEvtsMod*)p);
   }
   static void deleteArray_TSnPruneBadEvtsMod(void *p) {
      delete [] ((::TSnPruneBadEvtsMod*)p);
   }
   static void destruct_TSnPruneBadEvtsMod(void *p) {
      typedef ::TSnPruneBadEvtsMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnPruneBadEvtsMod

//______________________________________________________________________________
void TSnFFTCalcMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnFFTCalcMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnFFTCalcMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnFFTCalcMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnFFTCalcMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnFFTCalcMod.
      TClass *R__cl = ::TSnFFTCalcMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDatBrNm", &fDatBrNm);
      R__insp.InspectMember(fDatBrNm, "fDatBrNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFftNm", &fFftNm);
      R__insp.InspectMember(fFftNm, "fFftNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDat", &fDat);
      TSnCalDatModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnFFTCalcMod(void *p) {
      return  p ? new(p) ::TSnFFTCalcMod : new ::TSnFFTCalcMod;
   }
   static void *newArray_TSnFFTCalcMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnFFTCalcMod[nElements] : new ::TSnFFTCalcMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnFFTCalcMod(void *p) {
      delete ((::TSnFFTCalcMod*)p);
   }
   static void deleteArray_TSnFFTCalcMod(void *p) {
      delete [] ((::TSnFFTCalcMod*)p);
   }
   static void destruct_TSnFFTCalcMod(void *p) {
      typedef ::TSnFFTCalcMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnFFTCalcMod

//______________________________________________________________________________
void TSnFindWaveformEnvelopeMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnFindWaveformEnvelopeMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnFindWaveformEnvelopeMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnFindWaveformEnvelopeMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnFindWaveformEnvelopeMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnFindWaveformEnvelopeMod.
      TClass *R__cl = ::TSnFindWaveformEnvelopeMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDatBrNm", &fDatBrNm);
      R__insp.InspectMember(fDatBrNm, "fDatBrNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnvDatNm", &fEnvDatNm);
      R__insp.InspectMember(fEnvDatNm, "fEnvDatNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDat", &fDat);
      TSnCalDatModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnFindWaveformEnvelopeMod(void *p) {
      return  p ? new(p) ::TSnFindWaveformEnvelopeMod : new ::TSnFindWaveformEnvelopeMod;
   }
   static void *newArray_TSnFindWaveformEnvelopeMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnFindWaveformEnvelopeMod[nElements] : new ::TSnFindWaveformEnvelopeMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnFindWaveformEnvelopeMod(void *p) {
      delete ((::TSnFindWaveformEnvelopeMod*)p);
   }
   static void deleteArray_TSnFindWaveformEnvelopeMod(void *p) {
      delete [] ((::TSnFindWaveformEnvelopeMod*)p);
   }
   static void destruct_TSnFindWaveformEnvelopeMod(void *p) {
      typedef ::TSnFindWaveformEnvelopeMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnFindWaveformEnvelopeMod

//______________________________________________________________________________
template <> void TParameter<unsigned int>::Streamer(TBuffer &R__b)
{
   // Stream an object of class TParameter<unsigned int>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TParameter<unsigned int>::Class(),this);
   } else {
      R__b.WriteClassBuffer(TParameter<unsigned int>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void TParameterlEunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class TParameter<unsigned int>.
      typedef ::ROOT::Shadow::TParameterlEunsignedsPintgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TParameter<unsigned int>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fName", &sobj->fName);
      R__insp.InspectMember(sobj->fName, "fName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVal", &sobj->fVal);
      sobj->TObject::ShowMembers(R__insp);
   }

}

template <> void TParameter<unsigned int>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::TParameterlEunsignedsPintgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TParameterlEunsignedsPintgR(void *p) {
      return  p ? new(p) ::TParameter<unsigned int> : new ::TParameter<unsigned int>;
   }
   static void *newArray_TParameterlEunsignedsPintgR(Long_t nElements, void *p) {
      return p ? new(p) ::TParameter<unsigned int>[nElements] : new ::TParameter<unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_TParameterlEunsignedsPintgR(void *p) {
      delete ((::TParameter<unsigned int>*)p);
   }
   static void deleteArray_TParameterlEunsignedsPintgR(void *p) {
      delete [] ((::TParameter<unsigned int>*)p);
   }
   static void destruct_TParameterlEunsignedsPintgR(void *p) {
      typedef ::TParameter<unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_TParameterlEunsignedsPintgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::TParameter<unsigned int>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::TParameter<unsigned int>

/********************************************************
* sigproc/G__sigproc.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__sigproc();

extern "C" void G__set_cpp_environmentG__sigproc() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("sigproc/TSnRawTreeMaker.h");
  G__add_compiledheader("sigproc/TSnBasicEvtSelMod.h");
  G__add_compiledheader("sigproc/TSnRejectBadClocksMod.h");
  G__add_compiledheader("sigproc/TSnRejectEarlyEvtsMod.h");
  G__add_compiledheader("sigproc/TSnFPNCalcMod.h");
  G__add_compiledheader("sigproc/TSnFPNSubMod.h");
  G__add_compiledheader("sigproc/TSnDigitizerCalibMod.h");
  G__add_compiledheader("sigproc/TSnSaveCalibDataMod.h");
  G__add_compiledheader("sigproc/TSnCalcAbsTimeMod.h");
  G__add_compiledheader("sigproc/TSnFindTimeLimitsMod.h");
  G__add_compiledheader("sigproc/TSnFindEvtNumLimitsMod.h");
  G__add_compiledheader("sigproc/TSnPlotEvtRateMod.h");
  G__add_compiledheader("sigproc/TSnPlotWaveformsMod.h");
  G__add_compiledheader("sigproc/TSnEvtGuiCanvFrame.h");
  G__add_compiledheader("sigproc/TSnEvtGuiMainFrame.h");
  G__add_compiledheader("sigproc/TSnEvtGuiSeleFrame.h");
  G__add_compiledheader("sigproc/TSnGCanvasSaveDialog.h");
  G__add_compiledheader("sigproc/TSnEvtGuiDataGuru.h");
  G__add_compiledheader("sigproc/TSnRejectBadVoltTimesMod.h");
  G__add_compiledheader("sigproc/TSnPlotPowerReadingsMod.h");
  G__add_compiledheader("sigproc/TSnPlotAdcDists.h");
  G__add_compiledheader("sigproc/TSnCalDatModule.h");
  G__add_compiledheader("sigproc/TSnFilterWaveformMod.h");
  G__add_compiledheader("sigproc/TSnStopFindRms.h");
  G__add_compiledheader("sigproc/TSnShiftCalWvDataMod.h");
  G__add_compiledheader("sigproc/TSnMakeShiftTree.h");
  G__add_compiledheader("sigproc/TSnPruneBadEvtsMod.h");
  G__add_compiledheader("sigproc/TSnFFTCalcMod.h");
  G__add_compiledheader("sigproc/TSnFindWaveformEnvelopeMod.h");
  G__add_compiledheader("TParameter.h");
  G__cpp_reset_tagtableG__sigproc();
}
#include <new>
extern "C" int G__cpp_dllrevG__sigproc() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TSnRawTreeMaker */
static int G__G__sigproc_194_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRawTreeMaker* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRawTreeMaker[n];
     } else {
       p = new((void*) gvp) TSnRawTreeMaker[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRawTreeMaker;
     } else {
       p = new((void*) gvp) TSnRawTreeMaker;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnRawTreeMaker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRawTreeMaker* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRawTreeMaker(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3])
, (const Int_t) G__int(libp->para[4]), (const Int_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TSnRawTreeMaker(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3])
, (const Int_t) G__int(libp->para[4]), (const Int_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRawTreeMaker(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3])
, (const Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TSnRawTreeMaker(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3])
, (const Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRawTreeMaker(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TSnRawTreeMaker(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRawTreeMaker(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnRawTreeMaker(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRawTreeMaker((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnRawTreeMaker((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnRawTreeMaker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRawTreeMaker*) G__getstructoffset())->ProcFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnRawTreeMaker*) G__getstructoffset())->GetTreeFilename();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const TSnRawTreeMaker*) G__getstructoffset())->GetNevtsWritten());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const TSnRawTreeMaker*) G__getstructoffset())->GetNpwrsWritten());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const TSnRawTreeMaker*) G__getstructoffset())->GetNhrtsWritten());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnRawTreeMaker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRawTreeMaker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnRawTreeMaker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnRawTreeMaker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRawTreeMaker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRawTreeMaker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnRawTreeMaker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRawTreeMaker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_194_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnRawTreeMaker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_194_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnRawTreeMaker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnRawTreeMaker(*(TSnRawTreeMaker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnRawTreeMaker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnRawTreeMaker G__TTSnRawTreeMaker;
static int G__G__sigproc_194_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnRawTreeMaker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnRawTreeMaker*) (soff+(sizeof(TSnRawTreeMaker)*i)))->~G__TTSnRawTreeMaker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnRawTreeMaker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnRawTreeMaker*) (soff))->~G__TTSnRawTreeMaker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_194_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRawTreeMaker* dest = (TSnRawTreeMaker*) G__getstructoffset();
   *dest = *(TSnRawTreeMaker*) libp->para[0].ref;
   const TSnRawTreeMaker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnBasicEvtSelMod */
static int G__G__sigproc_500_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnBasicEvtSelMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnBasicEvtSelMod[n];
     } else {
       p = new((void*) gvp) TSnBasicEvtSelMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnBasicEvtSelMod;
     } else {
       p = new((void*) gvp) TSnBasicEvtSelMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnBasicEvtSelMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnBasicEvtSelMod(
(const Char_t*) G__int(libp->para[0]), (const UShort_t) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnBasicEvtSelMod(
(const Char_t*) G__int(libp->para[0]), (const UShort_t) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnBasicEvtSelMod((const Char_t*) G__int(libp->para[0]), (const UShort_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnBasicEvtSelMod((const Char_t*) G__int(libp->para[0]), (const UShort_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnBasicEvtSelMod((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TSnBasicEvtSelMod((const Char_t*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnTrgInfo& obj = ((const TSnBasicEvtSelMod*) G__getstructoffset())->GetTrgBits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnTrgInfo& obj = ((TSnBasicEvtSelMod*) G__getstructoffset())->GetTrgBits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnTrgInfo& obj = ((const TSnBasicEvtSelMod*) G__getstructoffset())->GetRejectTrgBits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnTrgInfo& obj = ((TSnBasicEvtSelMod*) G__getstructoffset())->GetRejectTrgBits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnBasicEvtSelMod*) G__getstructoffset())->IsCheckingCRC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnBasicEvtSelMod*) G__getstructoffset())->GetHeaderBranchName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnBasicEvtSelMod*) G__getstructoffset())->GetEvtWvfmBranchName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnBasicEvtSelMod*) G__getstructoffset())->SetTrgBits((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnBasicEvtSelMod*) G__getstructoffset())->SetTrgBits(*(TSnTrgInfo*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnBasicEvtSelMod*) G__getstructoffset())->SetRejectTrgBits((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnBasicEvtSelMod*) G__getstructoffset())->SetRejectTrgBits(*(TSnTrgInfo*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnBasicEvtSelMod*) G__getstructoffset())->SetCheckCRC((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnBasicEvtSelMod*) G__getstructoffset())->SetHeaderBranchName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnBasicEvtSelMod*) G__getstructoffset())->SetEvtWvfmBranchName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnBasicEvtSelMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnBasicEvtSelMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnBasicEvtSelMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnBasicEvtSelMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnBasicEvtSelMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnBasicEvtSelMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnBasicEvtSelMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnBasicEvtSelMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_500_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnBasicEvtSelMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_500_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnBasicEvtSelMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnBasicEvtSelMod(*(TSnBasicEvtSelMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnBasicEvtSelMod G__TTSnBasicEvtSelMod;
static int G__G__sigproc_500_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnBasicEvtSelMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnBasicEvtSelMod*) (soff+(sizeof(TSnBasicEvtSelMod)*i)))->~G__TTSnBasicEvtSelMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnBasicEvtSelMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnBasicEvtSelMod*) (soff))->~G__TTSnBasicEvtSelMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_500_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnBasicEvtSelMod* dest = (TSnBasicEvtSelMod*) G__getstructoffset();
   *dest = *(TSnBasicEvtSelMod*) libp->para[0].ref;
   const TSnBasicEvtSelMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnRejectBadClocksMod */
static int G__G__sigproc_502_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRejectBadClocksMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRejectBadClocksMod[n];
     } else {
       p = new((void*) gvp) TSnRejectBadClocksMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRejectBadClocksMod;
     } else {
       p = new((void*) gvp) TSnRejectBadClocksMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRejectBadClocksMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnRejectBadClocksMod((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSnRejectBadClocksMod((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnRejectBadClocksMod*) G__getstructoffset())->GetMinTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnRejectBadClocksMod*) G__getstructoffset())->GetMaxTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRejectBadClocksMod*) G__getstructoffset())->SetMinTime((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRejectBadClocksMod*) G__getstructoffset())->SetMaxTime((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRejectBadClocksMod*) G__getstructoffset())->SetInclude((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnRejectBadClocksMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRejectBadClocksMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnRejectBadClocksMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnRejectBadClocksMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRejectBadClocksMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRejectBadClocksMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnRejectBadClocksMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRejectBadClocksMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_502_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnRejectBadClocksMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_502_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnRejectBadClocksMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnRejectBadClocksMod(*(TSnRejectBadClocksMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnRejectBadClocksMod G__TTSnRejectBadClocksMod;
static int G__G__sigproc_502_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnRejectBadClocksMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnRejectBadClocksMod*) (soff+(sizeof(TSnRejectBadClocksMod)*i)))->~G__TTSnRejectBadClocksMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnRejectBadClocksMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnRejectBadClocksMod*) (soff))->~G__TTSnRejectBadClocksMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_502_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRejectBadClocksMod* dest = (TSnRejectBadClocksMod*) G__getstructoffset();
   *dest = *(TSnRejectBadClocksMod*) libp->para[0].ref;
   const TSnRejectBadClocksMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnRejectEarlyEvtsMod */
static int G__G__sigproc_503_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRejectEarlyEvtsMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRejectEarlyEvtsMod[n];
     } else {
       p = new((void*) gvp) TSnRejectEarlyEvtsMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRejectEarlyEvtsMod;
     } else {
       p = new((void*) gvp) TSnRejectEarlyEvtsMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_503_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRejectEarlyEvtsMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRejectEarlyEvtsMod((const Char_t*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnRejectEarlyEvtsMod((const Char_t*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRejectEarlyEvtsMod((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TSnRejectEarlyEvtsMod((const Char_t*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_503_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnRejectEarlyEvtsMod*) G__getstructoffset())->GetEarlyTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_503_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRejectEarlyEvtsMod*) G__getstructoffset())->SetEarlyTime((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_503_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnRejectEarlyEvtsMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_503_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRejectEarlyEvtsMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_503_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnRejectEarlyEvtsMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_503_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnRejectEarlyEvtsMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_503_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRejectEarlyEvtsMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_503_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRejectEarlyEvtsMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_503_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnRejectEarlyEvtsMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_503_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRejectEarlyEvtsMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_503_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnRejectEarlyEvtsMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_503_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnRejectEarlyEvtsMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnRejectEarlyEvtsMod(*(TSnRejectEarlyEvtsMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnRejectEarlyEvtsMod G__TTSnRejectEarlyEvtsMod;
static int G__G__sigproc_503_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnRejectEarlyEvtsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnRejectEarlyEvtsMod*) (soff+(sizeof(TSnRejectEarlyEvtsMod)*i)))->~G__TTSnRejectEarlyEvtsMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnRejectEarlyEvtsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnRejectEarlyEvtsMod*) (soff))->~G__TTSnRejectEarlyEvtsMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_503_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRejectEarlyEvtsMod* dest = (TSnRejectEarlyEvtsMod*) G__getstructoffset();
   *dest = *(TSnRejectEarlyEvtsMod*) libp->para[0].ref;
   const TSnRejectEarlyEvtsMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnFPNCalcMod */
static int G__G__sigproc_506_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFPNCalcMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFPNCalcMod[n];
     } else {
       p = new((void*) gvp) TSnFPNCalcMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFPNCalcMod;
     } else {
       p = new((void*) gvp) TSnFPNCalcMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFPNCalcMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnFPNCalcMod((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TSnFPNCalcMod((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnFPNCalcMod*) G__getstructoffset())->GetAdcHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnFPNCalcMod*) G__getstructoffset())->GetFpnSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnFPNCalcMod*) G__getstructoffset())->GetFpnSetName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnFPNCalcMod*) G__getstructoffset())->IsGausFitting());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnFPNCalcMod*) G__getstructoffset())->GetPeakFrc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNCalcMod*) G__getstructoffset())->SetPeakFrc((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNCalcMod*) G__getstructoffset())->SetFpnSetName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNCalcMod*) G__getstructoffset())->SetGausFit((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNCalcMod*) G__getstructoffset())->SetSampleAxis((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNCalcMod*) G__getstructoffset())->SetAdcAxis((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnFPNCalcMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFPNCalcMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnFPNCalcMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnFPNCalcMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNCalcMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFPNCalcMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFPNCalcMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFPNCalcMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_506_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFPNCalcMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_506_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnFPNCalcMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnFPNCalcMod(*(TSnFPNCalcMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnFPNCalcMod G__TTSnFPNCalcMod;
static int G__G__sigproc_506_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnFPNCalcMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnFPNCalcMod*) (soff+(sizeof(TSnFPNCalcMod)*i)))->~G__TTSnFPNCalcMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnFPNCalcMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnFPNCalcMod*) (soff))->~G__TTSnFPNCalcMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_506_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFPNCalcMod* dest = (TSnFPNCalcMod*) G__getstructoffset();
   *dest = *(TSnFPNCalcMod*) libp->para[0].ref;
   const TSnFPNCalcMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnFPNSubMod */
static int G__G__sigproc_507_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFPNSubMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFPNSubMod[n];
     } else {
       p = new((void*) gvp) TSnFPNSubMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFPNSubMod;
     } else {
       p = new((void*) gvp) TSnFPNSubMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNSubMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFPNSubMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFPNSubMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnFPNSubMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFPNSubMod((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnFPNSubMod((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNSubMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnFPNSubMod*) G__getstructoffset())->GetFPNSetName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnFPNSubMod*) G__getstructoffset())->GetCalDatName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNSubMod*) G__getstructoffset())->SetFPNSetName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNSubMod*) G__getstructoffset())->SetCalDatName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnFPNSubMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFPNSubMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnFPNSubMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnFPNSubMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNSubMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFPNSubMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFPNSubMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFPNSubMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_507_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFPNSubMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_507_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnFPNSubMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnFPNSubMod(*(TSnFPNSubMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNSubMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnFPNSubMod G__TTSnFPNSubMod;
static int G__G__sigproc_507_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnFPNSubMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnFPNSubMod*) (soff+(sizeof(TSnFPNSubMod)*i)))->~G__TTSnFPNSubMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnFPNSubMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnFPNSubMod*) (soff))->~G__TTSnFPNSubMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnDigitizerCalibMod */
static int G__G__sigproc_510_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnDigitizerCalibMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnDigitizerCalibMod[n];
     } else {
       p = new((void*) gvp) TSnDigitizerCalibMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnDigitizerCalibMod;
     } else {
       p = new((void*) gvp) TSnDigitizerCalibMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnDigitizerCalibMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnDigitizerCalibMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnDigitizerCalibMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TSnDigitizerCalibMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnDigitizerCalibMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnDigitizerCalibMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnDigitizerCalibMod((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnDigitizerCalibMod((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnDigitizerCalibMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnDigitizerCalibMod*) G__getstructoffset())->GetCalibSetNm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnDigitizerCalibMod*) G__getstructoffset())->GetFPNSubDatNm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnDigitizerCalibMod*) G__getstructoffset())->GetAmpOutDatNm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnDigitizerCalibMod*) G__getstructoffset())->IsGettingFpnSubFromTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDigitizerCalibMod*) G__getstructoffset())->SetCalibSetNm((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDigitizerCalibMod*) G__getstructoffset())->SetFPNSubDatNm((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDigitizerCalibMod*) G__getstructoffset())->SetAmpOutDatNm((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDigitizerCalibMod*) G__getstructoffset())->SetFpnSubFromTree((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnDigitizerCalibMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnDigitizerCalibMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnDigitizerCalibMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnDigitizerCalibMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDigitizerCalibMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnDigitizerCalibMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnDigitizerCalibMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnDigitizerCalibMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_510_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnDigitizerCalibMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_510_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnDigitizerCalibMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnDigitizerCalibMod(*(TSnDigitizerCalibMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnDigitizerCalibMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnDigitizerCalibMod G__TTSnDigitizerCalibMod;
static int G__G__sigproc_510_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnDigitizerCalibMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnDigitizerCalibMod*) (soff+(sizeof(TSnDigitizerCalibMod)*i)))->~G__TTSnDigitizerCalibMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnDigitizerCalibMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnDigitizerCalibMod*) (soff))->~G__TTSnDigitizerCalibMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnSaveCalibDataMod */
static int G__G__sigproc_511_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnSaveCalibDataMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnSaveCalibDataMod[n];
     } else {
       p = new((void*) gvp) TSnSaveCalibDataMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnSaveCalibDataMod;
     } else {
       p = new((void*) gvp) TSnSaveCalibDataMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnSaveCalibDataMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnSaveCalibDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]), (const Int_t) G__int(libp->para[5])
, (const Int_t) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) TSnSaveCalibDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]), (const Int_t) G__int(libp->para[5])
, (const Int_t) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnSaveCalibDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]), (const Int_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TSnSaveCalibDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]), (const Int_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnSaveCalibDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TSnSaveCalibDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnSaveCalibDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TSnSaveCalibDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnSaveCalibDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnSaveCalibDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnSaveCalibDataMod((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnSaveCalibDataMod((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnSaveCalibDataMod*) G__getstructoffset())->GetOutputDirectory());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnSaveCalibDataMod*) G__getstructoffset())->GetOutputPrefix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnSaveCalibDataMod*) G__getstructoffset())->GetFPNSubDatNm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnSaveCalibDataMod*) G__getstructoffset())->GetAmpOutDatNm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnSaveCalibDataMod*) G__getstructoffset())->IsSavingFPNSubData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnSaveCalibDataMod*) G__getstructoffset())->IsSavingAmpOutData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnSaveCalibDataMod*) G__getstructoffset())->GetBranchBufferSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnSaveCalibDataMod*) G__getstructoffset())->GetBranchSplitLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnSaveCalibDataMod*) G__getstructoffset())->GetOutputTreeTitle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnSaveCalibDataMod*) G__getstructoffset())->SetOutputDirectory((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnSaveCalibDataMod*) G__getstructoffset())->SetOutputPrefix((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnSaveCalibDataMod*) G__getstructoffset())->SetFPNSubDatNm((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnSaveCalibDataMod*) G__getstructoffset())->SetAmpOutDatNm((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnSaveCalibDataMod*) G__getstructoffset())->SetSaveFPNSubData((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnSaveCalibDataMod*) G__getstructoffset())->SetSaveAmpOutData((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnSaveCalibDataMod*) G__getstructoffset())->SetBranchBufferSize((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnSaveCalibDataMod*) G__getstructoffset())->SetBranchSplitLevel((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnSaveCalibDataMod*) G__getstructoffset())->SetOutputTreeTitle((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnSaveCalibDataMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnSaveCalibDataMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnSaveCalibDataMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnSaveCalibDataMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnSaveCalibDataMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnSaveCalibDataMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnSaveCalibDataMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnSaveCalibDataMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_511_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnSaveCalibDataMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_511_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnSaveCalibDataMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnSaveCalibDataMod(*(TSnSaveCalibDataMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnSaveCalibDataMod G__TTSnSaveCalibDataMod;
static int G__G__sigproc_511_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnSaveCalibDataMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnSaveCalibDataMod*) (soff+(sizeof(TSnSaveCalibDataMod)*i)))->~G__TTSnSaveCalibDataMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnSaveCalibDataMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnSaveCalibDataMod*) (soff))->~G__TTSnSaveCalibDataMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_511_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnSaveCalibDataMod* dest = (TSnSaveCalibDataMod*) G__getstructoffset();
   *dest = *(TSnSaveCalibDataMod*) libp->para[0].ref;
   const TSnSaveCalibDataMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnCalcAbsTimeMod */
static int G__G__sigproc_513_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalcAbsTimeMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnCalcAbsTimeMod[n];
     } else {
       p = new((void*) gvp) TSnCalcAbsTimeMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnCalcAbsTimeMod;
     } else {
       p = new((void*) gvp) TSnCalcAbsTimeMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_513_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalcAbsTimeMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnCalcAbsTimeMod((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSnCalcAbsTimeMod((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_513_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnCalcAbsTimeMod*) G__getstructoffset())->GetAbsEvtTimeName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_513_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalcAbsTimeMod*) G__getstructoffset())->SetAbsEvtTimeName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_513_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnCalcAbsTimeMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_513_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalcAbsTimeMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_513_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnCalcAbsTimeMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_513_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnCalcAbsTimeMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_513_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalcAbsTimeMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_513_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalcAbsTimeMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_513_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalcAbsTimeMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_513_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalcAbsTimeMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_513_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalcAbsTimeMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_513_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnCalcAbsTimeMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnCalcAbsTimeMod(*(TSnCalcAbsTimeMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnCalcAbsTimeMod G__TTSnCalcAbsTimeMod;
static int G__G__sigproc_513_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnCalcAbsTimeMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnCalcAbsTimeMod*) (soff+(sizeof(TSnCalcAbsTimeMod)*i)))->~G__TTSnCalcAbsTimeMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnCalcAbsTimeMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnCalcAbsTimeMod*) (soff))->~G__TTSnCalcAbsTimeMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_513_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalcAbsTimeMod* dest = (TSnCalcAbsTimeMod*) G__getstructoffset();
   *dest = *(TSnCalcAbsTimeMod*) libp->para[0].ref;
   const TSnCalcAbsTimeMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnFindTimeLimitsMod */
static int G__G__sigproc_536_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFindTimeLimitsMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFindTimeLimitsMod[n];
     } else {
       p = new((void*) gvp) TSnFindTimeLimitsMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFindTimeLimitsMod;
     } else {
       p = new((void*) gvp) TSnFindTimeLimitsMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFindTimeLimitsMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnFindTimeLimitsMod((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSnFindTimeLimitsMod((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnFindTimeLimitsMod*) G__getstructoffset())->GetAbsEvtTimeName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnFindTimeLimitsMod*) G__getstructoffset())->GetMinTimeName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnFindTimeLimitsMod*) G__getstructoffset())->GetMaxTimeName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFindTimeLimitsMod*) G__getstructoffset())->SetAbsEvtTimeName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFindTimeLimitsMod*) G__getstructoffset())->SetMinTimeName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFindTimeLimitsMod*) G__getstructoffset())->SetMaxTimeName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnFindTimeLimitsMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFindTimeLimitsMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnFindTimeLimitsMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnFindTimeLimitsMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFindTimeLimitsMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFindTimeLimitsMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFindTimeLimitsMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFindTimeLimitsMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_536_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFindTimeLimitsMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_536_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnFindTimeLimitsMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnFindTimeLimitsMod(*(TSnFindTimeLimitsMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnFindTimeLimitsMod G__TTSnFindTimeLimitsMod;
static int G__G__sigproc_536_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnFindTimeLimitsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnFindTimeLimitsMod*) (soff+(sizeof(TSnFindTimeLimitsMod)*i)))->~G__TTSnFindTimeLimitsMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnFindTimeLimitsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnFindTimeLimitsMod*) (soff))->~G__TTSnFindTimeLimitsMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_536_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFindTimeLimitsMod* dest = (TSnFindTimeLimitsMod*) G__getstructoffset();
   *dest = *(TSnFindTimeLimitsMod*) libp->para[0].ref;
   const TSnFindTimeLimitsMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnFindEvtNumLimitsMod */
static int G__G__sigproc_539_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFindEvtNumLimitsMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFindEvtNumLimitsMod[n];
     } else {
       p = new((void*) gvp) TSnFindEvtNumLimitsMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFindEvtNumLimitsMod;
     } else {
       p = new((void*) gvp) TSnFindEvtNumLimitsMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFindEvtNumLimitsMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnFindEvtNumLimitsMod((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSnFindEvtNumLimitsMod((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnFindEvtNumLimitsMod*) G__getstructoffset())->GetMinEvtNumName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnFindEvtNumLimitsMod*) G__getstructoffset())->GetMaxEvtNumName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFindEvtNumLimitsMod*) G__getstructoffset())->SetMinEvtNumName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFindEvtNumLimitsMod*) G__getstructoffset())->SetMaxEvtNumName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnFindEvtNumLimitsMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFindEvtNumLimitsMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnFindEvtNumLimitsMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnFindEvtNumLimitsMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFindEvtNumLimitsMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFindEvtNumLimitsMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFindEvtNumLimitsMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFindEvtNumLimitsMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_539_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFindEvtNumLimitsMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_539_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnFindEvtNumLimitsMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnFindEvtNumLimitsMod(*(TSnFindEvtNumLimitsMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnFindEvtNumLimitsMod G__TTSnFindEvtNumLimitsMod;
static int G__G__sigproc_539_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnFindEvtNumLimitsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnFindEvtNumLimitsMod*) (soff+(sizeof(TSnFindEvtNumLimitsMod)*i)))->~G__TTSnFindEvtNumLimitsMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnFindEvtNumLimitsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnFindEvtNumLimitsMod*) (soff))->~G__TTSnFindEvtNumLimitsMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_539_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFindEvtNumLimitsMod* dest = (TSnFindEvtNumLimitsMod*) G__getstructoffset();
   *dest = *(TSnFindEvtNumLimitsMod*) libp->para[0].ref;
   const TSnFindEvtNumLimitsMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TParameter<unsigned int> */
static int G__G__sigproc_540_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TParameter<unsigned int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TParameter<unsigned int>[n];
     } else {
       p = new((void*) gvp) TParameter<unsigned int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TParameter<unsigned int>;
     } else {
       p = new((void*) gvp) TParameter<unsigned int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TParameter<unsigned int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TParameter<unsigned int>((const char*) G__int(libp->para[0]), *(unsigned int*) G__UIntref(&libp->para[1]));
   } else {
     p = new((void*) gvp) TParameter<unsigned int>((const char*) G__int(libp->para[0]), *(unsigned int*) G__UIntref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TParameter<unsigned int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TParameter<unsigned int>(
(const char*) G__int(libp->para[0]), *(unsigned int*) G__UIntref(&libp->para[1])
, (char) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TParameter<unsigned int>(
(const char*) G__int(libp->para[0]), *(unsigned int*) G__UIntref(&libp->para[1])
, (char) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const unsigned int& obj = ((const TParameter<unsigned int>*) G__getstructoffset())->GetVal();
         result7->ref = (long) (&obj);
         G__letint(result7, 'h', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TParameter<unsigned int>*) G__getstructoffset())->SetVal(*(unsigned int*) G__UIntref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TParameter<unsigned int>*) G__getstructoffset())->SetMergeMode((char) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TParameter<unsigned int>*) G__getstructoffset())->SetMergeMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TParameter<unsigned int>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TParameter<unsigned int>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TParameter<unsigned int>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TParameter<unsigned int>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TParameter<unsigned int>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TParameter<unsigned int>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TParameter<unsigned int>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TParameter<unsigned int>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TParameter<unsigned int>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_540_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TParameter<unsigned int>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_540_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TParameter<unsigned int>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TParameter<unsigned int>(*(TParameter<unsigned int>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TParameter<unsigned int> G__TTParameterlEunsignedsPintgR;
static int G__G__sigproc_540_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TParameter<unsigned int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TParameter<unsigned int>*) (soff+(sizeof(TParameter<unsigned int>)*i)))->~G__TTParameterlEunsignedsPintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TParameter<unsigned int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TParameter<unsigned int>*) (soff))->~G__TTParameterlEunsignedsPintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_540_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TParameter<unsigned int>* dest = (TParameter<unsigned int>*) G__getstructoffset();
   *dest = *(TParameter<unsigned int>*) libp->para[0].ref;
   const TParameter<unsigned int>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnPlotEvtRateMod */
static int G__G__sigproc_546_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPlotEvtRateMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPlotEvtRateMod[n];
     } else {
       p = new((void*) gvp) TSnPlotEvtRateMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPlotEvtRateMod;
     } else {
       p = new((void*) gvp) TSnPlotEvtRateMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPlotEvtRateMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnPlotEvtRateMod((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSnPlotEvtRateMod((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetTwin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetConsDTbw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetCombDTbw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetAbsEvtTimeName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->IsSecondResoOk());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetNtimeBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetTimeMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetTimeMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetEnumVsTName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetERvsTName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetERvsEnumName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetRawDTName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetConsDTName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetCombDTName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetConsDTvsTName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetConsDTvsTGraphName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetCombDTvsTName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetNumEvtsName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetLivetimeName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetAveEvtNumsName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotEvtRateMod*) G__getstructoffset())->GetRateVsTName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetTwin((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetConsDTbw((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetCombDTbw((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetAbsEvtTimeName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetSecondResoOk((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetNtimeBins((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetTimeMin((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetTimeMax((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetEnumVsTName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetERvsTName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetERvsEnumName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetRawDTName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetConsDTName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetCombDTName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetConsDTvsTName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetConsDTvsTGraphName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetCombDTvsTName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetNumEvtsName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetLivetimeName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetEvtNumsName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->SetRateVsTName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnPlotEvtRateMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotEvtRateMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnPlotEvtRateMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnPlotEvtRateMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotEvtRateMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotEvtRateMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPlotEvtRateMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotEvtRateMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_546_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPlotEvtRateMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_546_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnPlotEvtRateMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnPlotEvtRateMod(*(TSnPlotEvtRateMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnPlotEvtRateMod G__TTSnPlotEvtRateMod;
static int G__G__sigproc_546_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnPlotEvtRateMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnPlotEvtRateMod*) (soff+(sizeof(TSnPlotEvtRateMod)*i)))->~G__TTSnPlotEvtRateMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnPlotEvtRateMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnPlotEvtRateMod*) (soff))->~G__TTSnPlotEvtRateMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_546_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPlotEvtRateMod* dest = (TSnPlotEvtRateMod*) G__getstructoffset();
   *dest = *(TSnPlotEvtRateMod*) libp->para[0].ref;
   const TSnPlotEvtRateMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnPlotWaveformsMod */
static int G__G__sigproc_552_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPlotWaveformsMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPlotWaveformsMod[n];
     } else {
       p = new((void*) gvp) TSnPlotWaveformsMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPlotWaveformsMod;
     } else {
       p = new((void*) gvp) TSnPlotWaveformsMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPlotWaveformsMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnPlotWaveformsMod(
(const Char_t*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TSnPlotWaveformsMod(
(const Char_t*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnPlotWaveformsMod*) G__getstructoffset())->GetNevtBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnPlotWaveformsMod*) G__getstructoffset())->GetEvtMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnPlotWaveformsMod*) G__getstructoffset())->GetEvtMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnPlotWaveformsMod*) G__getstructoffset())->IsMakingAdcPlots());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnPlotWaveformsMod*) G__getstructoffset())->IsMakingFpnSubPlots());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnPlotWaveformsMod*) G__getstructoffset())->IsMakingAmpOutPlots());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotWaveformsMod*) G__getstructoffset())->SetNevtBins((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotWaveformsMod*) G__getstructoffset())->SetEvtMin((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotWaveformsMod*) G__getstructoffset())->SetEvtMax((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotWaveformsMod*) G__getstructoffset())->SetMakeAdcPlots((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotWaveformsMod*) G__getstructoffset())->SetMakeFpnSubPlots((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotWaveformsMod*) G__getstructoffset())->SetMakeAmpOutPlots((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetEvtsPerBinName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetAdcVsEvtName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetFpnSubVsEvtName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetFpnSubErrVsEvtName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetAmpOutVsEvtName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetAmpOutErrVsEvtName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetAdcFFTVsEvtName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetFpnSubFFTVsEvtName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetAmpOutFFTVsEvtName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetAdcAveFFTName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetFpnSubAveFFTName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetAmpOutAveFFTName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetEntryVsEvtName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetAdcVsEntryName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetFpnSubVsEntryName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetFpnSubErrVsEntryName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetAmpOutVsEntryName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetAmpOutErrVsEntryName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetAdcFFTVsEntryName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetFpnSubFFTVsEntryName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::GetAmpOutFFTVsEntryName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnPlotWaveformsMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnPlotWaveformsMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnPlotWaveformsMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotWaveformsMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPlotWaveformsMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotWaveformsMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_552_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPlotWaveformsMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_552_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnPlotWaveformsMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnPlotWaveformsMod(*(TSnPlotWaveformsMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnPlotWaveformsMod G__TTSnPlotWaveformsMod;
static int G__G__sigproc_552_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnPlotWaveformsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnPlotWaveformsMod*) (soff+(sizeof(TSnPlotWaveformsMod)*i)))->~G__TTSnPlotWaveformsMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnPlotWaveformsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnPlotWaveformsMod*) (soff))->~G__TTSnPlotWaveformsMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_552_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPlotWaveformsMod* dest = (TSnPlotWaveformsMod*) G__getstructoffset();
   *dest = *(TSnPlotWaveformsMod*) libp->para[0].ref;
   const TSnPlotWaveformsMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnEvtGuiCanvFrame */
static int G__G__sigproc_660_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnEvtGuiCanvFrame*) G__getstructoffset())->GetListOfSignals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Connect((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (void*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Disconnect());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("EmitVA: more than 56 var args\n");
   }
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->EmitVA((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Char_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEvtGuiCanvFrame* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiCanvFrame[n];
     } else {
       p = new((void*) gvp) TSnEvtGuiCanvFrame[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiCanvFrame;
     } else {
       p = new((void*) gvp) TSnEvtGuiCanvFrame;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEvtGuiCanvFrame* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiCanvFrame(
(TGWindow*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3])
, (const Pixel_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TSnEvtGuiCanvFrame(
(TGWindow*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3])
, (const Pixel_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiCanvFrame(
(TGWindow*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TSnEvtGuiCanvFrame(
(TGWindow*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiCanvFrame(
(TGWindow*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnEvtGuiCanvFrame(
(TGWindow*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiCanvFrame((TGWindow*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnEvtGuiCanvFrame((TGWindow*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiCanvFrame((TGWindow*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TSnEvtGuiCanvFrame((TGWindow*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiCanvFrame*) G__getstructoffset())->GetWaveEmbedCanv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiCanvFrame*) G__getstructoffset())->GetWaveCanvas());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiCanvFrame*) G__getstructoffset())->GetMiscCanvas());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->HandleButtons((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->HandleButtons();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnEvtGuiCanvFrame::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvtGuiCanvFrame::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnEvtGuiCanvFrame::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnEvtGuiCanvFrame::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiCanvFrame*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvtGuiCanvFrame::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEvtGuiCanvFrame::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvtGuiCanvFrame::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_660_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEvtGuiCanvFrame::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnEvtGuiCanvFrame G__TTSnEvtGuiCanvFrame;
static int G__G__sigproc_660_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnEvtGuiCanvFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnEvtGuiCanvFrame*) (soff+(sizeof(TSnEvtGuiCanvFrame)*i)))->~G__TTSnEvtGuiCanvFrame();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnEvtGuiCanvFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnEvtGuiCanvFrame*) (soff))->~G__TTSnEvtGuiCanvFrame();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnEvtGuiSeleFrame */
static int G__G__sigproc_662_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnEvtGuiSeleFrame*) G__getstructoffset())->GetListOfSignals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Connect((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (void*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Disconnect());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("EmitVA: more than 56 var args\n");
   }
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->EmitVA((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Char_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEvtGuiSeleFrame* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiSeleFrame[n];
     } else {
       p = new((void*) gvp) TSnEvtGuiSeleFrame[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiSeleFrame;
     } else {
       p = new((void*) gvp) TSnEvtGuiSeleFrame;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEvtGuiSeleFrame* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiSeleFrame(
(TSnEvtGuiMainFrame*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3])
, (const Pixel_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TSnEvtGuiSeleFrame(
(TSnEvtGuiMainFrame*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3])
, (const Pixel_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiSeleFrame(
(TSnEvtGuiMainFrame*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TSnEvtGuiSeleFrame(
(TSnEvtGuiMainFrame*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiSeleFrame(
(TSnEvtGuiMainFrame*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnEvtGuiSeleFrame(
(TSnEvtGuiMainFrame*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiSeleFrame((TSnEvtGuiMainFrame*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnEvtGuiSeleFrame((TSnEvtGuiMainFrame*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiSeleFrame((TSnEvtGuiMainFrame*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TSnEvtGuiSeleFrame((TSnEvtGuiMainFrame*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->GetChanButtons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->GetChanButton((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->GetWaveButtons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->GetAdcCombo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->GetAdcFFTCombo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->GetFpnSubCombo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->GetFpnSubFFTCombo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->GetAmpOutCombo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->GetAmpOutFFTCombo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->GetMiscTabs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TSnEvtGuiSeleFrame*) G__getstructoffset())->GetMiscPlotName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnEvtGuiSeleFrame*) G__getstructoffset())->GetEventNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnEvtGuiSeleFrame*) G__getstructoffset())->GetEntryNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->DisableTab((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->EnableTab((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->DisableWave((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->EnableWave((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->DisableChan((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->EnableChan((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->SetChanColor((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->SetEventLimits((const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->SetEntryLimits((const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->SetEventNum((const Long_t) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->SetEntryNum((const Long_t) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->SetEvtEntNums((const Long_t) G__int(libp->para[0]), (const Long_t) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->UpdateLabels((TSnEventHeader*) G__int(libp->para[0]), (TSnEventMetadata*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnEvtGuiSeleFrame::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvtGuiSeleFrame::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnEvtGuiSeleFrame::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnEvtGuiSeleFrame::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiSeleFrame*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvtGuiSeleFrame::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEvtGuiSeleFrame::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvtGuiSeleFrame::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_662_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEvtGuiSeleFrame::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnEvtGuiSeleFrame G__TTSnEvtGuiSeleFrame;
static int G__G__sigproc_662_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnEvtGuiSeleFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnEvtGuiSeleFrame*) (soff+(sizeof(TSnEvtGuiSeleFrame)*i)))->~G__TTSnEvtGuiSeleFrame();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnEvtGuiSeleFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnEvtGuiSeleFrame*) (soff))->~G__TTSnEvtGuiSeleFrame();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnEvtGuiDataGuru */
static int G__G__sigproc_663_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEvtGuiDataGuru* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiDataGuru[n];
     } else {
       p = new((void*) gvp) TSnEvtGuiDataGuru[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiDataGuru;
     } else {
       p = new((void*) gvp) TSnEvtGuiDataGuru;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiDataGuru));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEvtGuiDataGuru* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnEvtGuiDataGuru((TTree*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TSnEvtGuiDataGuru((TTree*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiDataGuru));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiDataGuru*) G__getstructoffset())->GetTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiDataGuru*) G__getstructoffset())->GetPlotFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSnEvtGuiDataGuru*) G__getstructoffset())->GetColorOfChan((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>& obj = ((const TSnEvtGuiDataGuru*) G__getstructoffset())->GetChanColors();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnEvtGuiDataGuru*) G__getstructoffset())->GetMinEvtNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnEvtGuiDataGuru*) G__getstructoffset())->GetMaxEvtNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnEvtGuiDataGuru*) G__getstructoffset())->GetMinEntryNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnEvtGuiDataGuru*) G__getstructoffset())->GetMaxEntryNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->SetTree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->SetPlotFile((TFile*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->SetEvtNum((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->SetEntryNum((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSnEvtGuiDataGuru*) G__getstructoffset())->GetEntryNum((const Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSnEvtGuiDataGuru*) G__getstructoffset())->GetEventNum((const Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->DisableChan((const Int_t) G__int(libp->para[0]), (TSnEvtGuiSeleFrame*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->EnableChan((const Int_t) G__int(libp->para[0]), (TSnEvtGuiSeleFrame*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->ToggleWaveChan((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->SetWaveChanOn((const Int_t) G__int(libp->para[0]), (const bool) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->ClearMisc((TCanvas*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->RedrawMisc((TCanvas*) G__int(libp->para[0]), (TSnEvtGuiSeleFrame*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->ClearWaves((TCanvas*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->ChangeWaveChans((TCanvas*) G__int(libp->para[0]), (TSnEvtGuiSeleFrame*) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->RedrawWaveChans((TCanvas*) G__int(libp->para[0]), (TSnEvtGuiSeleFrame*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->ChangeWaveType((TCanvas*) G__int(libp->para[0]), (TSnEvtGuiSeleFrame*) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->UpdateLabels((TSnEvtGuiSeleFrame*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->ReadAllWaveHists((TSnEvtGuiSeleFrame*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnEvtGuiDataGuru*) G__getstructoffset())->NewListOfObjsWithTag((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->ReadAllMiscHists((TSnEvtGuiSeleFrame*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSnEvtGuiDataGuru*) G__getstructoffset())->SendNamesTo((TObjArray*) G__int(libp->para[0]), (TGComboBox*) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnEvtGuiDataGuru::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvtGuiDataGuru::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnEvtGuiDataGuru::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnEvtGuiDataGuru::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiDataGuru*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvtGuiDataGuru::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEvtGuiDataGuru::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvtGuiDataGuru::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_663_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEvtGuiDataGuru::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_663_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnEvtGuiDataGuru* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnEvtGuiDataGuru(*(TSnEvtGuiDataGuru*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiDataGuru));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnEvtGuiDataGuru G__TTSnEvtGuiDataGuru;
static int G__G__sigproc_663_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnEvtGuiDataGuru*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnEvtGuiDataGuru*) (soff+(sizeof(TSnEvtGuiDataGuru)*i)))->~G__TTSnEvtGuiDataGuru();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnEvtGuiDataGuru*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnEvtGuiDataGuru*) (soff))->~G__TTSnEvtGuiDataGuru();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_663_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEvtGuiDataGuru* dest = (TSnEvtGuiDataGuru*) G__getstructoffset();
   *dest = *(TSnEvtGuiDataGuru*) libp->para[0].ref;
   const TSnEvtGuiDataGuru& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnEvtGuiMainFrame */
static int G__G__sigproc_664_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnEvtGuiMainFrame*) G__getstructoffset())->GetListOfSignals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSnEvtGuiMainFrame*) G__getstructoffset())->Connect((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (void*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((TSnEvtGuiMainFrame*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((TSnEvtGuiMainFrame*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((TSnEvtGuiMainFrame*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((TSnEvtGuiMainFrame*) G__getstructoffset())->Disconnect());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("EmitVA: more than 56 var args\n");
   }
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->EmitVA((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Char_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEvtGuiMainFrame* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiMainFrame[n];
     } else {
       p = new((void*) gvp) TSnEvtGuiMainFrame[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiMainFrame;
     } else {
       p = new((void*) gvp) TSnEvtGuiMainFrame;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEvtGuiMainFrame* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiMainFrame(
(TTree*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TSnEvtGuiMainFrame(
(TTree*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiMainFrame(
(TTree*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnEvtGuiMainFrame(
(TTree*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvtGuiMainFrame((TTree*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnEvtGuiMainFrame((TTree*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->ChangeWaveChans((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->RedrawWaveCanv();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->ChangeWaveType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->ChangeEvtNum((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->ChangeEntryNum((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->IncrementEvent((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->ChangeTab((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->SelMiscPlot((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnEvtGuiMainFrame::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvtGuiMainFrame::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnEvtGuiMainFrame::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnEvtGuiMainFrame::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvtGuiMainFrame*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvtGuiMainFrame::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEvtGuiMainFrame::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvtGuiMainFrame::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_664_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEvtGuiMainFrame::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnEvtGuiMainFrame G__TTSnEvtGuiMainFrame;
static int G__G__sigproc_664_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnEvtGuiMainFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnEvtGuiMainFrame*) (soff+(sizeof(TSnEvtGuiMainFrame)*i)))->~G__TTSnEvtGuiMainFrame();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnEvtGuiMainFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnEvtGuiMainFrame*) (soff))->~G__TTSnEvtGuiMainFrame();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnGCanvasSaveDialog */
static int G__G__sigproc_675_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnGCanvasSaveDialog*) G__getstructoffset())->GetListOfSignals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSnGCanvasSaveDialog*) G__getstructoffset())->Connect((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (void*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((TSnGCanvasSaveDialog*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((TSnGCanvasSaveDialog*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((TSnGCanvasSaveDialog*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((TSnGCanvasSaveDialog*) G__getstructoffset())->Disconnect());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->HighPriority((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->HighPriority((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->LowPriority((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->LowPriority((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("EmitVA: more than 56 var args\n");
   }
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->EmitVA((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Char_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Destroyed();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->ChangedBy((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->Message((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnGCanvasSaveDialog* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnGCanvasSaveDialog((TRootEmbeddedCanvas*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnGCanvasSaveDialog((TRootEmbeddedCanvas*) G__int(libp->para[0]), (TGWindow*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnGCanvasSaveDialog((TRootEmbeddedCanvas*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TSnGCanvasSaveDialog((TRootEmbeddedCanvas*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TSnGCanvasSaveDialog[n];
       } else {
         p = new((void*) gvp) TSnGCanvasSaveDialog[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TSnGCanvasSaveDialog;
       } else {
         p = new((void*) gvp) TSnGCanvasSaveDialog;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnGCanvasSaveDialog));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnGCanvasSaveDialog::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnGCanvasSaveDialog::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnGCanvasSaveDialog::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnGCanvasSaveDialog::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGCanvasSaveDialog*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnGCanvasSaveDialog::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnGCanvasSaveDialog::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnGCanvasSaveDialog::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_675_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnGCanvasSaveDialog::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnGCanvasSaveDialog G__TTSnGCanvasSaveDialog;
static int G__G__sigproc_675_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnGCanvasSaveDialog*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnGCanvasSaveDialog*) (soff+(sizeof(TSnGCanvasSaveDialog)*i)))->~G__TTSnGCanvasSaveDialog();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnGCanvasSaveDialog*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnGCanvasSaveDialog*) (soff))->~G__TTSnGCanvasSaveDialog();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnRejectBadVoltTimesMod */
static int G__G__sigproc_685_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRejectBadVoltTimesMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRejectBadVoltTimesMod[n];
     } else {
       p = new((void*) gvp) TSnRejectBadVoltTimesMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRejectBadVoltTimesMod;
     } else {
       p = new((void*) gvp) TSnRejectBadVoltTimesMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_685_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRejectBadVoltTimesMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnRejectBadVoltTimesMod((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSnRejectBadVoltTimesMod((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_685_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnRejectBadVoltTimesMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_685_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRejectBadVoltTimesMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_685_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnRejectBadVoltTimesMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_685_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnRejectBadVoltTimesMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_685_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRejectBadVoltTimesMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_685_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRejectBadVoltTimesMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_685_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnRejectBadVoltTimesMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_685_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRejectBadVoltTimesMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_685_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnRejectBadVoltTimesMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_685_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnRejectBadVoltTimesMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnRejectBadVoltTimesMod(*(TSnRejectBadVoltTimesMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnRejectBadVoltTimesMod G__TTSnRejectBadVoltTimesMod;
static int G__G__sigproc_685_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnRejectBadVoltTimesMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnRejectBadVoltTimesMod*) (soff+(sizeof(TSnRejectBadVoltTimesMod)*i)))->~G__TTSnRejectBadVoltTimesMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnRejectBadVoltTimesMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnRejectBadVoltTimesMod*) (soff))->~G__TTSnRejectBadVoltTimesMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_685_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRejectBadVoltTimesMod* dest = (TSnRejectBadVoltTimesMod*) G__getstructoffset();
   *dest = *(TSnRejectBadVoltTimesMod*) libp->para[0].ref;
   const TSnRejectBadVoltTimesMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnPlotPowerReadingsMod */
static int G__G__sigproc_686_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPlotPowerReadingsMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPlotPowerReadingsMod[n];
     } else {
       p = new((void*) gvp) TSnPlotPowerReadingsMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPlotPowerReadingsMod;
     } else {
       p = new((void*) gvp) TSnPlotPowerReadingsMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPlotPowerReadingsMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnPlotPowerReadingsMod((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSnPlotPowerReadingsMod((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotPowerReadingsMod*) G__getstructoffset())->GetVoltName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotPowerReadingsMod*) G__getstructoffset())->GetCurrName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotPowerReadingsMod*) G__getstructoffset())->SetVoltName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotPowerReadingsMod*) G__getstructoffset())->SetCurrName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnPlotPowerReadingsMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotPowerReadingsMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnPlotPowerReadingsMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnPlotPowerReadingsMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotPowerReadingsMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotPowerReadingsMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPlotPowerReadingsMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotPowerReadingsMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_686_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPlotPowerReadingsMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_686_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnPlotPowerReadingsMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnPlotPowerReadingsMod(*(TSnPlotPowerReadingsMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnPlotPowerReadingsMod G__TTSnPlotPowerReadingsMod;
static int G__G__sigproc_686_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnPlotPowerReadingsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnPlotPowerReadingsMod*) (soff+(sizeof(TSnPlotPowerReadingsMod)*i)))->~G__TTSnPlotPowerReadingsMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnPlotPowerReadingsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnPlotPowerReadingsMod*) (soff))->~G__TTSnPlotPowerReadingsMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_686_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPlotPowerReadingsMod* dest = (TSnPlotPowerReadingsMod*) G__getstructoffset();
   *dest = *(TSnPlotPowerReadingsMod*) libp->para[0].ref;
   const TSnPlotPowerReadingsMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnPlotAdcDists */
static int G__G__sigproc_687_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPlotAdcDists* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPlotAdcDists[n];
     } else {
       p = new((void*) gvp) TSnPlotAdcDists[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPlotAdcDists;
     } else {
       p = new((void*) gvp) TSnPlotAdcDists;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPlotAdcDists* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnPlotAdcDists(
(const Char_t*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Char_t*) G__int(libp->para[4]), (const Char_t*) G__int(libp->para[5]));
   } else {
     p = new((void*) gvp) TSnPlotAdcDists(
(const Char_t*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Char_t*) G__int(libp->para[4]), (const Char_t*) G__int(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotAdcDists*) G__getstructoffset())->GetPlotTag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnPlotAdcDists*) G__getstructoffset())->GetPlotLbl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnPlotAdcDists*) G__getstructoffset())->GetNtimeBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnPlotAdcDists*) G__getstructoffset())->GetTimeMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnPlotAdcDists*) G__getstructoffset())->GetTimeMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnPlotAdcDists*) G__getstructoffset())->GetNRawAdcBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnPlotAdcDists*) G__getstructoffset())->GetRawAdcMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnPlotAdcDists*) G__getstructoffset())->GetRawAdcMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnPlotAdcDists*) G__getstructoffset())->GetNFpnSubBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnPlotAdcDists*) G__getstructoffset())->GetFpnSubMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnPlotAdcDists*) G__getstructoffset())->GetFpnSubMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnPlotAdcDists*) G__getstructoffset())->GetNFracBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnPlotAdcDists*) G__getstructoffset())->GetFracMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnPlotAdcDists*) G__getstructoffset())->GetFracMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnPlotAdcDists*) G__getstructoffset())->GetLowFreqCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnPlotAdcDists*) G__getstructoffset())->IsMakingFpnSubPlots());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnPlotAdcDists*) G__getstructoffset())->IsNormalizingTimeBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnPlotAdcDists*) G__getstructoffset())->IsMakingSamplePlots());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetPlotTag((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetPlotLbl((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetNtimeBins((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetTimeMin((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetTimeMax((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetNRawAdcBins((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetRawAdcMin((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetRawAdcMax((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetNFpnSubBins((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetFpnSubMin((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetFpnSubMax((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetLowFreqCut((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetMakeFpnSubPlots((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetNormalizeTimeBins((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->SetMakeSamplePlots((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::GetEvtsPerBinName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::GetRawAdc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::GetRawAdcVsT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::GetFpnSub());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::GetFpnSubVsT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::GetFpnSubFftVsT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::GetFpnSubMaxFrqVsT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::GetFpnSubLowPwrVsT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::GetRawAdcSmp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::GetRawAdcSmpVsT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::GetFpnSubSmp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::GetFpnSubSmpVsT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnPlotAdcDists::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnPlotAdcDists::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnPlotAdcDists::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPlotAdcDists*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPlotAdcDists::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPlotAdcDists::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_687_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPlotAdcDists::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_687_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnPlotAdcDists* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnPlotAdcDists(*(TSnPlotAdcDists*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnPlotAdcDists G__TTSnPlotAdcDists;
static int G__G__sigproc_687_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnPlotAdcDists*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnPlotAdcDists*) (soff+(sizeof(TSnPlotAdcDists)*i)))->~G__TTSnPlotAdcDists();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnPlotAdcDists*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnPlotAdcDists*) (soff))->~G__TTSnPlotAdcDists();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_687_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPlotAdcDists* dest = (TSnPlotAdcDists*) G__getstructoffset();
   *dest = *(TSnPlotAdcDists*) libp->para[0].ref;
   const TSnPlotAdcDists& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnCalDatModule */
static int G__G__sigproc_689_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSnCalDatModule*) G__getstructoffset())->IsFpnSubOrAmpOutBr((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_689_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSnCalDatModule*) G__getstructoffset())->IsTreeBranch((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_689_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalDatModule*) G__getstructoffset())->SetUseIsFpnSubOrAmpOutBr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_689_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalDatModule*) G__getstructoffset())->SetUseIsTreeBranch();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_689_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnCalDatModule::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_689_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalDatModule::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_689_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnCalDatModule::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_689_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnCalDatModule::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_689_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalDatModule*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_689_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalDatModule::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_689_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalDatModule::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_689_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalDatModule::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_689_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalDatModule::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_689_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnCalDatModule* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnCalDatModule(*(TSnCalDatModule*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnCalDatModule G__TTSnCalDatModule;
static int G__G__sigproc_689_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnCalDatModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnCalDatModule*) (soff+(sizeof(TSnCalDatModule)*i)))->~G__TTSnCalDatModule();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnCalDatModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnCalDatModule*) (soff))->~G__TTSnCalDatModule();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_689_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalDatModule* dest = (TSnCalDatModule*) G__getstructoffset();
   *dest = *(TSnCalDatModule*) libp->para[0].ref;
   const TSnCalDatModule& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnCalDatModule::AdrWrap_t */
static int G__G__sigproc_690_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalDatModule::AdrWrap_t* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnCalDatModule::AdrWrap_t((TSnCalWvData**) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TSnCalDatModule::AdrWrap_t((TSnCalWvData**) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TSnCalDatModule::AdrWrap_t[n];
       } else {
         p = new((void*) gvp) TSnCalDatModule::AdrWrap_t[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TSnCalDatModule::AdrWrap_t;
       } else {
         p = new((void*) gvp) TSnCalDatModule::AdrWrap_t;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModulecLcLAdrWrap_t));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_690_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnCalDatModule::AdrWrap_t::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_690_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalDatModule::AdrWrap_t::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_690_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnCalDatModule::AdrWrap_t::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_690_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnCalDatModule::AdrWrap_t::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_690_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalDatModule::AdrWrap_t*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_690_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalDatModule::AdrWrap_t::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_690_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalDatModule::AdrWrap_t::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_690_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalDatModule::AdrWrap_t::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_690_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalDatModule::AdrWrap_t::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_690_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnCalDatModule::AdrWrap_t* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnCalDatModule::AdrWrap_t(*(TSnCalDatModule::AdrWrap_t*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModulecLcLAdrWrap_t));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnCalDatModule::AdrWrap_t G__TTSnCalDatModulecLcLAdrWrap_t;
static int G__G__sigproc_690_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnCalDatModule::AdrWrap_t*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnCalDatModule::AdrWrap_t*) (soff+(sizeof(TSnCalDatModule::AdrWrap_t)*i)))->~G__TTSnCalDatModulecLcLAdrWrap_t();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnCalDatModule::AdrWrap_t*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnCalDatModule::AdrWrap_t*) (soff))->~G__TTSnCalDatModulecLcLAdrWrap_t();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_690_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalDatModule::AdrWrap_t* dest = (TSnCalDatModule::AdrWrap_t*) G__getstructoffset();
   *dest = *(TSnCalDatModule::AdrWrap_t*) libp->para[0].ref;
   const TSnCalDatModule::AdrWrap_t& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnFilterWaveformMod */
static int G__G__sigproc_692_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFilterWaveformMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFilterWaveformMod[n];
     } else {
       p = new((void*) gvp) TSnFilterWaveformMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFilterWaveformMod;
     } else {
       p = new((void*) gvp) TSnFilterWaveformMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFilterWaveformMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnFilterWaveformMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), *(TF1*) libp->para[3].ref);
   } else {
     p = new((void*) gvp) TSnFilterWaveformMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), *(TF1*) libp->para[3].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnFilterWaveformMod*) G__getstructoffset())->GetFilter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnFilterWaveformMod*) G__getstructoffset())->GetFilter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnFilterWaveformMod*) G__getstructoffset())->GetDataBrName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnFilterWaveformMod*) G__getstructoffset())->GetFltDatName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFilterWaveformMod*) G__getstructoffset())->SetFilter(*(TF1*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFilterWaveformMod*) G__getstructoffset())->SetDataBrName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFilterWaveformMod*) G__getstructoffset())->SetFltDatName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnFilterWaveformMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFilterWaveformMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnFilterWaveformMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnFilterWaveformMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFilterWaveformMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFilterWaveformMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFilterWaveformMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFilterWaveformMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_692_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFilterWaveformMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_692_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnFilterWaveformMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnFilterWaveformMod(*(TSnFilterWaveformMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnFilterWaveformMod G__TTSnFilterWaveformMod;
static int G__G__sigproc_692_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnFilterWaveformMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnFilterWaveformMod*) (soff+(sizeof(TSnFilterWaveformMod)*i)))->~G__TTSnFilterWaveformMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnFilterWaveformMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnFilterWaveformMod*) (soff))->~G__TTSnFilterWaveformMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_692_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFilterWaveformMod* dest = (TSnFilterWaveformMod*) G__getstructoffset();
   *dest = *(TSnFilterWaveformMod*) libp->para[0].ref;
   const TSnFilterWaveformMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnStopFindRms */
static int G__G__sigproc_694_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnStopFindRms* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStopFindRms[n];
     } else {
       p = new((void*) gvp) TSnStopFindRms[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStopFindRms;
     } else {
       p = new((void*) gvp) TSnStopFindRms;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnStopFindRms* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStopFindRms(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const UShort_t) G__int(libp->para[4]), (const UShort_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TSnStopFindRms(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const UShort_t) G__int(libp->para[4]), (const UShort_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStopFindRms(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const UShort_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TSnStopFindRms(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const UShort_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStopFindRms(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TSnStopFindRms(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStopFindRms(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnStopFindRms(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStopFindRms((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnStopFindRms((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnStopFindRms*) G__getstructoffset())->GetDataBranchName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnStopFindRms*) G__getstructoffset())->GetStopPosnName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const TSnStopFindRms*) G__getstructoffset())->GetStopWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const TSnStopFindRms*) G__getstructoffset())->GetSearchWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const TSnStopFindRms*) G__getstructoffset())->GetMaxJitter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStopFindRms*) G__getstructoffset())->SetDataBranchName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStopFindRms*) G__getstructoffset())->SetStopPosnName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStopFindRms*) G__getstructoffset())->SetStopWidth((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStopFindRms*) G__getstructoffset())->SetSearchWidth((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStopFindRms*) G__getstructoffset())->SetMaxJitter((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnStopFindRms::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnStopFindRms::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnStopFindRms::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnStopFindRms::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStopFindRms*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnStopFindRms::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnStopFindRms::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnStopFindRms::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_694_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnStopFindRms::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_694_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnStopFindRms* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnStopFindRms(*(TSnStopFindRms*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnStopFindRms G__TTSnStopFindRms;
static int G__G__sigproc_694_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnStopFindRms*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnStopFindRms*) (soff+(sizeof(TSnStopFindRms)*i)))->~G__TTSnStopFindRms();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnStopFindRms*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnStopFindRms*) (soff))->~G__TTSnStopFindRms();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_694_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnStopFindRms* dest = (TSnStopFindRms*) G__getstructoffset();
   *dest = *(TSnStopFindRms*) libp->para[0].ref;
   const TSnStopFindRms& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnShiftCalWvDataMod */
static int G__G__sigproc_695_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnShiftCalWvDataMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnShiftCalWvDataMod[n];
     } else {
       p = new((void*) gvp) TSnShiftCalWvDataMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnShiftCalWvDataMod;
     } else {
       p = new((void*) gvp) TSnShiftCalWvDataMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnShiftCalWvDataMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnShiftCalWvDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TSnShiftCalWvDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnShiftCalWvDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnShiftCalWvDataMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnShiftCalWvDataMod*) G__getstructoffset())->GetDataBranchName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnShiftCalWvDataMod*) G__getstructoffset())->GetStopPosnName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnShiftCalWvDataMod*) G__getstructoffset())->GetShiftedDataName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnShiftCalWvDataMod*) G__getstructoffset())->SetDataBranchName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnShiftCalWvDataMod*) G__getstructoffset())->SetStopPosnName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnShiftCalWvDataMod*) G__getstructoffset())->SetShiftedDataName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnShiftCalWvDataMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnShiftCalWvDataMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnShiftCalWvDataMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnShiftCalWvDataMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnShiftCalWvDataMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnShiftCalWvDataMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnShiftCalWvDataMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnShiftCalWvDataMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_695_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnShiftCalWvDataMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_695_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnShiftCalWvDataMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnShiftCalWvDataMod(*(TSnShiftCalWvDataMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnShiftCalWvDataMod G__TTSnShiftCalWvDataMod;
static int G__G__sigproc_695_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnShiftCalWvDataMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnShiftCalWvDataMod*) (soff+(sizeof(TSnShiftCalWvDataMod)*i)))->~G__TTSnShiftCalWvDataMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnShiftCalWvDataMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnShiftCalWvDataMod*) (soff))->~G__TTSnShiftCalWvDataMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_695_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnShiftCalWvDataMod* dest = (TSnShiftCalWvDataMod*) G__getstructoffset();
   *dest = *(TSnShiftCalWvDataMod*) libp->para[0].ref;
   const TSnShiftCalWvDataMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnMakeShiftTree */
static int G__G__sigproc_696_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnMakeShiftTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnMakeShiftTree[n];
     } else {
       p = new((void*) gvp) TSnMakeShiftTree[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnMakeShiftTree;
     } else {
       p = new((void*) gvp) TSnMakeShiftTree;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_696_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnMakeShiftTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnMakeShiftTree(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]), (const Char_t*) G__int(libp->para[5])
, (const Int_t) G__int(libp->para[6]), (const Int_t) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) TSnMakeShiftTree(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]), (const Char_t*) G__int(libp->para[5])
, (const Int_t) G__int(libp->para[6]), (const Int_t) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnMakeShiftTree(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]), (const Char_t*) G__int(libp->para[5])
, (const Int_t) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) TSnMakeShiftTree(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]), (const Char_t*) G__int(libp->para[5])
, (const Int_t) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnMakeShiftTree(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]), (const Char_t*) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TSnMakeShiftTree(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]), (const Char_t*) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnMakeShiftTree(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TSnMakeShiftTree(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_696_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnMakeShiftTree::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_696_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnMakeShiftTree::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_696_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnMakeShiftTree::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_696_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnMakeShiftTree::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_696_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnMakeShiftTree*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_696_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnMakeShiftTree::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_696_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnMakeShiftTree::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_696_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnMakeShiftTree::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_696_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnMakeShiftTree::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_696_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnMakeShiftTree* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnMakeShiftTree(*(TSnMakeShiftTree*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnMakeShiftTree G__TTSnMakeShiftTree;
static int G__G__sigproc_696_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnMakeShiftTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnMakeShiftTree*) (soff+(sizeof(TSnMakeShiftTree)*i)))->~G__TTSnMakeShiftTree();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnMakeShiftTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnMakeShiftTree*) (soff))->~G__TTSnMakeShiftTree();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_696_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnMakeShiftTree* dest = (TSnMakeShiftTree*) G__getstructoffset();
   *dest = *(TSnMakeShiftTree*) libp->para[0].ref;
   const TSnMakeShiftTree& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnPruneBadEvtsMod */
static int G__G__sigproc_697_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPruneBadEvtsMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPruneBadEvtsMod[n];
     } else {
       p = new((void*) gvp) TSnPruneBadEvtsMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPruneBadEvtsMod;
     } else {
       p = new((void*) gvp) TSnPruneBadEvtsMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_697_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPruneBadEvtsMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnPruneBadEvtsMod((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSnPruneBadEvtsMod((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_697_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnPruneBadEvtsMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_697_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPruneBadEvtsMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_697_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnPruneBadEvtsMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_697_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnPruneBadEvtsMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_697_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPruneBadEvtsMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_697_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPruneBadEvtsMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_697_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPruneBadEvtsMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_697_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPruneBadEvtsMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_697_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPruneBadEvtsMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_697_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnPruneBadEvtsMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnPruneBadEvtsMod(*(TSnPruneBadEvtsMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnPruneBadEvtsMod G__TTSnPruneBadEvtsMod;
static int G__G__sigproc_697_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnPruneBadEvtsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnPruneBadEvtsMod*) (soff+(sizeof(TSnPruneBadEvtsMod)*i)))->~G__TTSnPruneBadEvtsMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnPruneBadEvtsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnPruneBadEvtsMod*) (soff))->~G__TTSnPruneBadEvtsMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_697_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPruneBadEvtsMod* dest = (TSnPruneBadEvtsMod*) G__getstructoffset();
   *dest = *(TSnPruneBadEvtsMod*) libp->para[0].ref;
   const TSnPruneBadEvtsMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnFFTCalcMod */
static int G__G__sigproc_699_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFFTCalcMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFFTCalcMod[n];
     } else {
       p = new((void*) gvp) TSnFFTCalcMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFFTCalcMod;
     } else {
       p = new((void*) gvp) TSnFFTCalcMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFFTCalcMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnFFTCalcMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TSnFFTCalcMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnFFTCalcMod*) G__getstructoffset())->GetDataBranchName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnFFTCalcMod*) G__getstructoffset())->GetFFTName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFFTCalcMod*) G__getstructoffset())->SetDataBranchName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFFTCalcMod*) G__getstructoffset())->SetFFTName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnFFTCalcMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFFTCalcMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnFFTCalcMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnFFTCalcMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFFTCalcMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFFTCalcMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFFTCalcMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFFTCalcMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_699_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFFTCalcMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_699_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnFFTCalcMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnFFTCalcMod(*(TSnFFTCalcMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnFFTCalcMod G__TTSnFFTCalcMod;
static int G__G__sigproc_699_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnFFTCalcMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnFFTCalcMod*) (soff+(sizeof(TSnFFTCalcMod)*i)))->~G__TTSnFFTCalcMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnFFTCalcMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnFFTCalcMod*) (soff))->~G__TTSnFFTCalcMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_699_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFFTCalcMod* dest = (TSnFFTCalcMod*) G__getstructoffset();
   *dest = *(TSnFFTCalcMod*) libp->para[0].ref;
   const TSnFFTCalcMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnFindWaveformEnvelopeMod */
static int G__G__sigproc_700_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFindWaveformEnvelopeMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFindWaveformEnvelopeMod[n];
     } else {
       p = new((void*) gvp) TSnFindWaveformEnvelopeMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFindWaveformEnvelopeMod;
     } else {
       p = new((void*) gvp) TSnFindWaveformEnvelopeMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFindWaveformEnvelopeMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnFindWaveformEnvelopeMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TSnFindWaveformEnvelopeMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnFindWaveformEnvelopeMod*) G__getstructoffset())->GetDataBrName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnFindWaveformEnvelopeMod*) G__getstructoffset())->GetEnvDatName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFindWaveformEnvelopeMod*) G__getstructoffset())->SetDataBrName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFindWaveformEnvelopeMod*) G__getstructoffset())->SetEnvDatName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnFindWaveformEnvelopeMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFindWaveformEnvelopeMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnFindWaveformEnvelopeMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnFindWaveformEnvelopeMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFindWaveformEnvelopeMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFindWaveformEnvelopeMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFindWaveformEnvelopeMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFindWaveformEnvelopeMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigproc_700_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFindWaveformEnvelopeMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigproc_700_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnFindWaveformEnvelopeMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnFindWaveformEnvelopeMod(*(TSnFindWaveformEnvelopeMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnFindWaveformEnvelopeMod G__TTSnFindWaveformEnvelopeMod;
static int G__G__sigproc_700_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnFindWaveformEnvelopeMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnFindWaveformEnvelopeMod*) (soff+(sizeof(TSnFindWaveformEnvelopeMod)*i)))->~G__TTSnFindWaveformEnvelopeMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnFindWaveformEnvelopeMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnFindWaveformEnvelopeMod*) (soff))->~G__TTSnFindWaveformEnvelopeMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigproc_700_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFindWaveformEnvelopeMod* dest = (TSnFindWaveformEnvelopeMod*) G__getstructoffset();
   *dest = *(TSnFindWaveformEnvelopeMod*) libp->para[0].ref;
   const TSnFindWaveformEnvelopeMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TSnRawTreeMaker */

/* TSnBasicEvtSelMod */

/* TSnRejectBadClocksMod */

/* TSnRejectEarlyEvtsMod */

/* TSnFPNCalcMod */

/* TSnFPNSubMod */

/* TSnDigitizerCalibMod */

/* TSnSaveCalibDataMod */

/* TSnCalcAbsTimeMod */

/* TSnFindTimeLimitsMod */

/* TSnFindEvtNumLimitsMod */

/* TParameter<unsigned int> */

/* TSnPlotEvtRateMod */

/* TSnPlotWaveformsMod */

/* TSnEvtGuiCanvFrame */

/* TSnEvtGuiSeleFrame */

/* TSnEvtGuiDataGuru */

/* TSnEvtGuiMainFrame */

/* TSnGCanvasSaveDialog */

/* TSnRejectBadVoltTimesMod */

/* TSnPlotPowerReadingsMod */

/* TSnPlotAdcDists */

/* TSnCalDatModule */

/* TSnCalDatModule::AdrWrap_t */

/* TSnFilterWaveformMod */

/* TSnStopFindRms */

/* TSnShiftCalWvDataMod */

/* TSnMakeShiftTree */

/* TSnPruneBadEvtsMod */

/* TSnFFTCalcMod */

/* TSnFindWaveformEnvelopeMod */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__sigproc {
 public:
  G__Sizep2memfuncG__sigproc(): p(&G__Sizep2memfuncG__sigproc::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__sigproc::*p)();
};

size_t G__get_sizep2memfuncG__sigproc()
{
  G__Sizep2memfuncG__sigproc a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__sigproc() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnRawTreeMaker))) {
     TSnRawTreeMaker *G__Lderived;
     G__Lderived=(TSnRawTreeMaker*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRawTreeMaker),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod))) {
     TSnBasicEvtSelMod *G__Lderived;
     G__Lderived=(TSnBasicEvtSelMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod))) {
     TSnRejectBadClocksMod *G__Lderived;
     G__Lderived=(TSnRejectBadClocksMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod))) {
     TSnRejectEarlyEvtsMod *G__Lderived;
     G__Lderived=(TSnRejectEarlyEvtsMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod))) {
     TSnFPNCalcMod *G__Lderived;
     G__Lderived=(TSnFPNCalcMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNSubMod))) {
     TSnFPNSubMod *G__Lderived;
     G__Lderived=(TSnFPNSubMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNSubMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNSubMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNSubMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNSubMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnDigitizerCalibMod))) {
     TSnDigitizerCalibMod *G__Lderived;
     G__Lderived=(TSnDigitizerCalibMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnDigitizerCalibMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnDigitizerCalibMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnDigitizerCalibMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnDigitizerCalibMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod))) {
     TSnSaveCalibDataMod *G__Lderived;
     G__Lderived=(TSnSaveCalibDataMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod))) {
     TSnCalcAbsTimeMod *G__Lderived;
     G__Lderived=(TSnCalcAbsTimeMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod))) {
     TSnFindTimeLimitsMod *G__Lderived;
     G__Lderived=(TSnFindTimeLimitsMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod))) {
     TSnFindEvtNumLimitsMod *G__Lderived;
     G__Lderived=(TSnFindEvtNumLimitsMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR))) {
     TParameter<unsigned int> *G__Lderived;
     G__Lderived=(TParameter<unsigned int>*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod))) {
     TSnPlotEvtRateMod *G__Lderived;
     G__Lderived=(TSnPlotEvtRateMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod))) {
     TSnPlotWaveformsMod *G__Lderived;
     G__Lderived=(TSnPlotWaveformsMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame))) {
     TSnEvtGuiCanvFrame *G__Lderived;
     G__Lderived=(TSnEvtGuiCanvFrame*)0x1000;
     {
       TGVerticalFrame *G__Lpbase=(TGVerticalFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGVerticalFrame),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TGCompositeFrame *G__Lpbase=(TGCompositeFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGCompositeFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGFrame *G__Lpbase=(TGFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGWindow *G__Lpbase=(TGWindow*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGWindow),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGObject *G__Lpbase=(TGObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TQObject *G__Lpbase=(TQObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame),G__get_linked_tagnum(&G__G__sigprocLN_TQObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame))) {
     TSnEvtGuiSeleFrame *G__Lderived;
     G__Lderived=(TSnEvtGuiSeleFrame*)0x1000;
     {
       TGVerticalFrame *G__Lpbase=(TGVerticalFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGVerticalFrame),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TGCompositeFrame *G__Lpbase=(TGCompositeFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGCompositeFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGFrame *G__Lpbase=(TGFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGWindow *G__Lpbase=(TGWindow*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGWindow),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGObject *G__Lpbase=(TGObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TQObject *G__Lpbase=(TQObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame),G__get_linked_tagnum(&G__G__sigprocLN_TQObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiDataGuru))) {
     TSnEvtGuiDataGuru *G__Lderived;
     G__Lderived=(TSnEvtGuiDataGuru*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiDataGuru),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame))) {
     TSnEvtGuiMainFrame *G__Lderived;
     G__Lderived=(TSnEvtGuiMainFrame*)0x1000;
     {
       TGMainFrame *G__Lpbase=(TGMainFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGMainFrame),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TGCompositeFrame *G__Lpbase=(TGCompositeFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGCompositeFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGFrame *G__Lpbase=(TGFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGWindow *G__Lpbase=(TGWindow*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGWindow),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGObject *G__Lpbase=(TGObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame),G__get_linked_tagnum(&G__G__sigprocLN_TGObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TQObject *G__Lpbase=(TQObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame),G__get_linked_tagnum(&G__G__sigprocLN_TQObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnGCanvasSaveDialog))) {
     TSnGCanvasSaveDialog *G__Lderived;
     G__Lderived=(TSnGCanvasSaveDialog*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnGCanvasSaveDialog),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod))) {
     TSnRejectBadVoltTimesMod *G__Lderived;
     G__Lderived=(TSnRejectBadVoltTimesMod*)0x1000;
     {
       TSnRejectBadClocksMod *G__Lpbase=(TSnRejectBadClocksMod*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod),G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod))) {
     TSnPlotPowerReadingsMod *G__Lderived;
     G__Lderived=(TSnPlotPowerReadingsMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists))) {
     TSnPlotAdcDists *G__Lderived;
     G__Lderived=(TSnPlotAdcDists*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule))) {
     TSnCalDatModule *G__Lderived;
     G__Lderived=(TSnCalDatModule*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModulecLcLAdrWrap_t))) {
     TSnCalDatModule::AdrWrap_t *G__Lderived;
     G__Lderived=(TSnCalDatModule::AdrWrap_t*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModulecLcLAdrWrap_t),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod))) {
     TSnFilterWaveformMod *G__Lderived;
     G__Lderived=(TSnFilterWaveformMod*)0x1000;
     {
       TSnCalDatModule *G__Lpbase=(TSnCalDatModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod),G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms))) {
     TSnStopFindRms *G__Lderived;
     G__Lderived=(TSnStopFindRms*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod))) {
     TSnShiftCalWvDataMod *G__Lderived;
     G__Lderived=(TSnShiftCalWvDataMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree))) {
     TSnMakeShiftTree *G__Lderived;
     G__Lderived=(TSnMakeShiftTree*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod))) {
     TSnPruneBadEvtsMod *G__Lderived;
     G__Lderived=(TSnPruneBadEvtsMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod))) {
     TSnFFTCalcMod *G__Lderived;
     G__Lderived=(TSnFFTCalcMod*)0x1000;
     {
       TSnCalDatModule *G__Lpbase=(TSnCalDatModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod),G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod))) {
     TSnFindWaveformEnvelopeMod *G__Lderived;
     G__Lderived=(TSnFindWaveformEnvelopeMod*)0x1000;
     {
       TSnCalDatModule *G__Lpbase=(TSnCalDatModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod),G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod),G__get_linked_tagnum(&G__G__sigprocLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod),G__get_linked_tagnum(&G__G__sigprocLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod),G__get_linked_tagnum(&G__G__sigprocLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod),G__get_linked_tagnum(&G__G__sigprocLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__sigproc() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 8 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("ULong64_t",109,-1,0,-1);
   G__setnewtype(-1,"Portable unsigned long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__sigprocLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__sigprocLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__sigprocLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__sigprocLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__sigprocLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<BranchPtr_t*>",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TAMBranchInfo::BranchPtr_t*>",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__G__sigprocLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__sigprocLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__sigprocLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__G__sigprocLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TIterator*>",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TParameter<Bool_t>",117,G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEboolgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TParameter<Double_t>",117,G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TParameter<UInt_t>",117,G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Num_t",104,-1,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("AbsTime_t",100,-1,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Num_t,AbsTime_t>",117,G__get_linked_tagnum(&G__G__sigprocLN_pairlEunsignedsPintcOdoublegR),0,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("NumTime_t",117,G__get_linked_tagnum(&G__G__sigprocLN_pairlEunsignedsPintcOdoublegR),0,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<NumTime_t>",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,double> >",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("VectNT_t",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgR),0,G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Pixel_t",107,-1,0,-1);
   G__setnewtype(-1,"Pixel value",0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__G__sigprocLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH1*>",117,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__sigprocLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("IsBranchFcn",97,-1,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule));
   G__setnewtype(-1,"Bool_t (TSnCalDatModule::*IsBranchFcn)(const Char_t* bname);",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TSnRawTreeMaker */
static void G__setup_memvarTSnRawTreeMaker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRawTreeMaker));
   { TSnRawTreeMaker *p; p=(TSnRawTreeMaker*)0x1000; if (p) { }
   G__memvar_setup((void*)(&TSnRawTreeMaker::kRTFprf),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kRTFprf=",0,"default raw tree filename prefix");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kVTname),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kVTname=",0,"voltage tree name");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kHTname),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kHTname=",0,"heartbeat tree name");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kETname),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kETname=",0,"event tree name");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kCTname),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kCTname=",0,"config tree name");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kPwrBrNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kPwrBrNm=",0,"name of TSnPowerReading in voltage tree");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kHrtBrNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kHrtBrNm=",0,"name of TSnHeartbeat in heartbeat tree");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kEMtBrNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kEMtBrNm=",0,"name of TSnEventMetadata in event tree");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kEHdBrNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kEHdBrNm=",0,"name of TSnEventHeader in event tree");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kEWvBrNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kEWvBrNm=",0,"name of TSnRawWaveform in event tree");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kCMtBrNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kCMtBrNm=",0,"name of TSnEventMetadata in config tree");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kCnfBrNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kCnfBrNm=",0,"name of TSnDAQConfig in config tree");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kRunBrNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kRunBrNm=",0,"name of TSnRunInfo in config tree");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kNetBrNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kNetBrNm=",0,"name of TSnNetAdrSet in config tree");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kCSrBrNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kCSrBrNm=",0,"name of trigger start in config tree");
   G__memvar_setup((void*)(&TSnRawTreeMaker::kCSpBrNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kCSpBrNm=",0,"name of trigger stop in config tree");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fInfn=",0,"input filename");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fOdir=",0,"output directory");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fOpre=",0,"output prefix");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBufsz=",0,"branch buffer size (default 2^18 = 262144 bytes)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSplit=",0,"branch split level (default 1)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCompr=",0,"compression level (default 2, so split branches are compressed)");
   G__memvar_setup((void*)0,69,0,0,-1,-1,-1,4,"fInf=",0,"! input file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TFile),-1,-1,4,"fOutf=",0,"! output file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TTree),-1,-1,4,"fVt=",0,"! the voltage tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TTree),-1,-1,4,"fHt=",0,"! the heartbeat tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TTree),-1,-1,4,"fCt=",0,"! the heartbeat tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TTree),-1,-1,4,"fEt=",0,"! the event tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvent),-1,-1,4,"fEvt=",0,"! current event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnPowerReading),-1,-1,4,"fPwr=",0,"! current voltage");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnHeartbeat),-1,-1,4,"fHrt=",0,"! current heartbeat");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventMetadata),-1,-1,4,"fEvtMeta=",0,"! event metadata");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnDAQConfig),-1,-1,4,"fConf=",0,"! daq config");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnRunInfo),-1,-1,4,"fRunf=",0,"! run info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnNetAdrSet),-1,-1,4,"fNets=",0,"! internet addresses");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnRunInfo),-1,-1,4,"fHrun=",0,"! header run info (just the number)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCompMbed),-1,-1,4,"fComp=",0,"! mbed info (mac address)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fSeq=",0,"! seq number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnClockSetInfo),-1,-1,4,"fClkStrt=",0,"! clock set at trg start");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnClockSetInfo),-1,-1,4,"fClkStop=",0,"! clock set at trg stop");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnBasicEvtSelMod */
static void G__setup_memvarTSnBasicEvtSelMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod));
   { TSnBasicEvtSelMod *p; p=(TSnBasicEvtSelMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fHdrBrNm=",0,"name of header branch (defaults to TSnRawTreeMaker::kEHdBrNm)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fEWvBrNm=",0,"name of event waveform branch (defaults to TSnRawTreeMaker::kEWvBrNm)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnTrgInfo),-1,-1,4,"fTbits=",0,"desired trigger bits. keep events have *one or more* of these bits set. (default: NO trig bits => NO events, so the user must explicitly set the desired triggers)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnTrgInfo),-1,-1,4,"fRbits=",0,"undesired trigger bits. reject events that have *any* of these bits set. (default: reject kAdcToMBflag)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDoCRC=",0,"whether or not to check the CRC's (default: true)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventHeader),-1,-1,4,"fHdr=",0,"! event header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnRawWaveform),-1,-1,4,"fRaw=",0,"! raw waveform");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnRejectBadClocksMod */
static void G__setup_memvarTSnRejectBadClocksMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod));
   { TSnRejectBadClocksMod *p; p=(TSnRejectBadClocksMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMinTime=",0,"minimum reasonable unix time.nanosec (default: Jan 2010)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaxTime=",0,"maximum reasonable unix time.nanosec (default: Jan 2017)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"bInclude=",0,"If set to true events between time periods");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventHeader),-1,-1,4,"fHdr=",0,"! event header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnRejectEarlyEvtsMod */
static void G__setup_memvarTSnRejectEarlyEvtsMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod));
   { TSnRejectEarlyEvtsMod *p; p=(TSnRejectEarlyEvtsMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEarlyTime=",0,"reject events whose evt time - trg start time is less than this (in seconds) (default: 2.0)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnClockSetInfo),-1,-1,4,"fStart=",0,"! seq start time (requires a TSnConfigTreeLoader)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventHeader),-1,-1,4,"fHdr=",0,"! event header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnFPNCalcMod */
static void G__setup_memvarTSnFPNCalcMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod));
   { TSnFPNCalcMod *p; p=(TSnFPNCalcMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalibSet),-1,-1,4,"fFpnSet=",0,"the resulting fpn set");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPeakFrc=",0,"fraction of the max peak to step to (def: 0.05)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fFpnSetNm=",0,"name of the resulting fpn set");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fGausFit=",0,"if true, fit with a gaussian to find mean/rms (def: false)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSbins=",0,"number of sample bins");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSmin=",0,"min sample");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSmax=",0,"max sample");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAbins=",0,"number of ADC bins");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAmin=",0,"min adc");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAmax=",0,"max adc");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TH2),-1,-1,4,"fHadcs=",0,"! histogram of adc values on each sample");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnRawWaveform),-1,-1,4,"fRaw=",0,"! the raw waveform data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnFPNSubMod */
static void G__setup_memvarTSnFPNSubMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNSubMod));
   { TSnFPNSubMod *p; p=(TSnFPNSubMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fFpnSetName=",0,"name of (input) FPN set in the published objs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fCalDatNm=",0,"name of (output) FPN sub wvfm data added to evt (default \"FPNSubData\")");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnRawWaveform),-1,-1,4,"fRaw=",0,"! raw waveform data");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalibSet),-1,-1,4,"fFpnSet=",0,"! set of FPN values");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnDigitizerCalibMod */
static void G__setup_memvarTSnDigitizerCalibMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnDigitizerCalibMod));
   { TSnDigitizerCalibMod *p; p=(TSnDigitizerCalibMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fCalSetNm=",0,"name of calibration parameter set in published objs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fFpnSubNm=",0,"name of (input) FPN sub waveform data object in evt (default \"FPNSubData\") (or branch name if fFpnSubFromTree is true)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fCalDatNm=",0,"name of (output) calib waveform obj to add to evt (default \"AmpOutData\")");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFpnSubFromTree=",0,"if true, get FPN sub data via ReqBranch; if false, get via FindObjThisEvt (i.e. if it's generated by another module). default: false");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnDualGainCalibSet),-1,-1,4,"fCalSet=",0,"! the calibration parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fFpnSub=",0,"! the fpn subtracted data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnSaveCalibDataMod */
static void G__setup_memvarTSnSaveCalibDataMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod));
   { TSnSaveCalibDataMod *p; p=(TSnSaveCalibDataMod*)0x1000; if (p) { }
   G__memvar_setup((void*)(&TSnSaveCalibDataMod::kFTFprf),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kFTFprf=",0,"default prefix of FPN sub tree file name");
   G__memvar_setup((void*)(&TSnSaveCalibDataMod::kFpnEvtTreeNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kFpnEvtTreeNm=",0,"name of FPN sub event tree");
   G__memvar_setup((void*)(&TSnSaveCalibDataMod::kCTFprf),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kCTFprf=",0,"default prefix of cal tree file name");
   G__memvar_setup((void*)(&TSnSaveCalibDataMod::kCalEvtTreeNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kCalEvtTreeNm=",0,"name of calib event tree");
   G__memvar_setup((void*)(&TSnSaveCalibDataMod::kFPNSubDatBrNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kFPNSubDatBrNm=",0,"name of the FPN sub wvfm branch");
   G__memvar_setup((void*)(&TSnSaveCalibDataMod::kAmpOutDatBrNm),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"kAmpOutDatBrNm=",0,"name of the digitizer calib branch");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fFPNSubDatNm=",0,"name of FPN sub wvfm data in event (i.e. from TSnFPNSubMod) (default \"FPNSubData\")");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSaveFPNSub=",0,"whether or not to save FPN subtracted data (default: true)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fAmpOutDatNm=",0,"name of digitizer calibrated wvfm data in event (i.e. from TSnDigitizerCalibMod) (default \"AmpOutData\")");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSaveAmpOut=",0,"whether or not to save digitizer calib data (default: true)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fOutdir=",0,"output file directory");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fOutprf=",0,"output file prefix");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBufsz=",0,"buffer size for new branch(es)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSplit=",0,"split level for new branch(es)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fOutTreeTitle=",0,"title of output tree (default: (semi-)calibrated waveform events)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fFPNSubDat=",0,"! the FPN subtracted data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fAmpOutDat=",0,"! the digitizer calib data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TTree),-1,-1,4,"fOt=",0,"! the output event data tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TFile),-1,-1,4,"fOutf=",0,"! the output file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TBranch),-1,-1,4,"fFPNSubBr=",0,"! the FPN sub data branch");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TBranch),-1,-1,4,"fAmpOutBr=",0,"! the digitizer calib data branch");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnCalcAbsTimeMod */
static void G__setup_memvarTSnCalcAbsTimeMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod));
   { TSnCalcAbsTimeMod *p; p=(TSnCalcAbsTimeMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fAETimeNm=",0,"name of the absolute time parameter object (default \"AbsEvtTime\")");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TTimeStamp),-1,-1,4,"fPrev=",0,"! last event or seq start time");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNewFile=",0,"! when true, use fStart as the previous time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnClockSetInfo),-1,-1,4,"fStart=",0,"! seq start time (requires a TSnConfigTreeLoader)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventHeader),-1,-1,4,"fHdr=",0,"! event header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnClockSetInfo),-1,-1,4,"fPrevStart=",0,"! seq start time at last Process call");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnFindTimeLimitsMod */
static void G__setup_memvarTSnFindTimeLimitsMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod));
   { TSnFindTimeLimitsMod *p; p=(TSnFindTimeLimitsMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fAETimeNm=",0,"name of the absolute time parameter object (default \"AbsEvtTime\")");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fMinName=",0,"name of the min time object in the output list (default \"MinEvtTime\")");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fMaxName=",0,"name of the max time object in the output list (default \"MaxEvtTime\")");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEdoublegR),G__defined_typename("TParameter<Double_t>"),-1,4,"fMinTime=",0,"! min time: unixtime.nanosecs ; use TParameter to facilitate AddOutput");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEdoublegR),G__defined_typename("TParameter<Double_t>"),-1,4,"fMaxTime=",0,"! max time: unixtime.nanosecs ; use TParameter to facilitate AddOutput");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventHeader),-1,-1,4,"fHdr=",0,"! the event header");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFirst=",0,"! if this is the first event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnFindEvtNumLimitsMod */
static void G__setup_memvarTSnFindEvtNumLimitsMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod));
   { TSnFindEvtNumLimitsMod *p; p=(TSnFindEvtNumLimitsMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fMinName=",0,"name of the min evt number object in the output (default \"MinEvtNum\")");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fMaxName=",0,"name of the max evt number object in the output (default \"MaxEvtNum\")");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR),G__defined_typename("TParameter<UInt_t>"),-1,4,"fMinEvtNum=",0,"! the min event number; use TParameter so it inherits from TObjct (for AddOutput)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR),G__defined_typename("TParameter<UInt_t>"),-1,4,"fMaxEvtNum=",0,"! the max event number; use TParameter so it inherits from TObjct (for AddOutput)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventHeader),-1,-1,4,"fHdr=",0,"! the event header");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFirst=",0,"! if this is the first event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TParameter<unsigned int> */
static void G__setup_memvarTParameterlEunsignedsPintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR));
   { TParameter<unsigned int> *p; p=(TParameter<unsigned int>*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgRcLcLEStatusBits),-1,-2,1,G__FastAllocString(4096).Format("kMultiply=%lldLL",(long long)TParameter<unsigned int>::kMultiply).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fName=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"fVal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnPlotEvtRateMod */
static void G__setup_memvarTSnPlotEvtRateMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod));
   { TSnPlotEvtRateMod *p; p=(TSnPlotEvtRateMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTwin=",0,"time window: max time bin for rates, calc dt's within this window (s) (default 300s)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fConsDTbw=",0,"width of consecutive dt bins (s) (default 0.5s)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCombDTbw=",0,"width of combinatorial dt bins (s) (default 0.1s)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fAbsTimeNm=",0,"name of the absolute event time in the evt objs (default: \"AbsEvtTime\")");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSecResOk=",0,"if true, process events for which the absolute time is not available (default: true)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNtimeBins=",0,"number of bins along time axis");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTimeMin=",0,"minimum of time axis (unix time seconds)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTimeMax=",0,"maximum of time axis (unix time seconds)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fEnumVsTnm=",0,"name of fEnumVsT graph (default 'gEnumVsT')");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fERvsTnm=",0,"name of fERvsT graph (default 'gERvsT')");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fERvsEnumNm=",0,"name of fERvsEnum graph (default 'gERvsEnum')");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fRawDTnm=",0,"name of fRawDT hist (default 'hRawDT')");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fDTnm=",0,"name of fDT hist (default 'hConsDT')");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fCombDTnm=",0,"name of fCombDT hist (default 'hCombDT')");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fDTvsTnm=",0,"name of fDTvsT hist (default 'hConsDTvsT')");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fDTvsTgrNm=",0,"name of fDTvsTgr graph (default 'gConsDTvsT')");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fCombDTvsTnm=",0,"name of fCombDTvsT hist (default 'hCombDTvsT')");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fNumEvtsNm=",0,"name of fNumEvts hist (default 'hNumEvts')");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fLivetimeNm=",0,"name of fNumEvts hist (default 'hLivetime')");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fEvtNumsNm=",0,"name of fEvtNums hist (default 'hAveEvtNums')");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fRateVsTnm=",0,"name of fRateVsT hist (default 'hRateVsT')");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TH1F),-1,-1,4,"fNumEvts=",0,"number of events in each time bin");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TH1F),-1,-1,4,"fLivetime=",0,"livetime in each time bin");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TH1F),-1,-1,4,"fEvtNums=",0,"sum of event numbers (for ave) in each bin");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TH1F),-1,-1,4,"fRateVsT=",0,"histogram of event rate vs time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGraph),-1,-1,4,"fEnumVsT=",0,"event number vs time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGraphErrors),-1,-1,4,"fERvsT=",0,"event rate vs time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGraphErrors),-1,-1,4,"fERvsEnum=",0,"event rate vs event number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TH1F),-1,-1,4,"fRawDT=",0,"hist of event's DTms variables (cross check fDT)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TH1F),-1,-1,4,"fDT=",0,"hist of consec-dt's");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TH1F),-1,-1,4,"fCombDT=",0,"hist of all dt combinations within the time window");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TH2F),-1,-1,4,"fDTvsT=",0,"hist of consec-dt vs time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGraph),-1,-1,4,"fDTvsTgr=",0,"graph of consec-dt vs time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TH2F),-1,-1,4,"fCombDTvsT=",0,"hist of combinatorial dt vs time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventHeader),-1,-1,4,"fHdr=",0,"! event header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventMetadata),-1,-1,4,"fMeta=",0,"! event metadata");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventMetadata),-1,-1,4,"fPrevMeta=",0,"! metadata of previous event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnClockSetInfo),-1,-1,4,"fStop=",0,"! seq stop time (requires TSnConfigTreeLoader)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgR),G__defined_typename("VectNT_t"),-1,4,"fNTs=",0,"! list of num/times from current file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnPlotWaveformsMod */
static void G__setup_memvarTSnPlotWaveformsMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod));
   { TSnPlotWaveformsMod *p; p=(TSnPlotWaveformsMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNevtBins=",0,"number of bins on the event axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEvtMin=",0,"min event number of the event axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEvtMax=",0,"max event number of the event axis");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDoAdcPlots=",0,"whether to make raw waveform plots (def: true)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDoFpnSubPlots=",0,"whether to make FPN sub plots (def: true)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDoAmpOutPlots=",0,"whether to make calibrated plots (def: true)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventHeader),-1,-1,4,"fHdr=",0,"! the event header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnRawWaveform),-1,-1,4,"fAdc=",0,"! the raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fFpnSub=",0,"! the FPN sub data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fAmpOut=",0,"! the calibrated data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TH1F),-1,-1,4,"fEvtsPerBin=",0,"! number of events in each event bin");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fAdcVsEvt=",0,"! [chan] raw waveform vs event for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSubVsEvt=",0,"! [chan] fpn sub waveform vs event for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSubErrVsEvt=",0,"! [chan] error on fpn sub vs event for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fAmpOutVsEvt=",0,"! [chan] calib waveform vs event for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fAmpOutErrVsEvt=",0,"! [chan] error on calib vs event for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fAdcFFTVsEvt=",0,"! [chan] FFT of raw waveform vs event for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSubFFTVsEvt=",0,"! [chan] FFT of fpn sub waveform vs event for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fAmpOutFFTVsEvt=",0,"! [chan] FFT of calib waveform vs event for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fAdcAveFFT=",0,"! [chan] average FFT of raw waveform for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSubAveFFT=",0,"! [chan] average FFT of FPN sub waveform for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fAmpOutAveFFT=",0,"! [chan] average FFT of calib waveform for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGraph),-1,-1,4,"fEntryVsEvt=",0,"! maps from event number to entry number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fAdcVsEntry=",0,"! [chan] raw waveform vs entry for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSubVsEntry=",0,"! [chan] fpn sub waveform vs entry for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSubErrVsEntry=",0,"! [chan] error on fpn sub vs entry for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fAmpOutVsEntry=",0,"! [chan] calib waveform vs entry for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fAmpOutErrVsEntry=",0,"! [chan] error on calib vs entry for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fAdcFFTVsEntry=",0,"! [chan] FFT of raw waveform vs entry for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSubFFTVsEntry=",0,"! [chan] FFT of fpn sub waveform vs entry for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fAmpOutFFTVsEntry=",0,"! [chan] FFT of calib waveform vs entry for each chan");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnEvtGuiCanvFrame */
static void G__setup_memvarTSnEvtGuiCanvFrame(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame));
   { TSnEvtGuiCanvFrame *p; p=(TSnEvtGuiCanvFrame*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TQObjSender),-1,-1,4,"fQObject=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kSaveWaveBtn=%lldLL",(long long)TSnEvtGuiCanvFrame::kSaveWaveBtn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kSaveMiscBtn=%lldLL",(long long)TSnEvtGuiCanvFrame::kSaveMiscBtn).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TRootEmbeddedCanvas),-1,-1,4,"fWaveCanv=",0,"the single event waveform/fft canvas");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGHorizontalFrame),-1,-1,4,"fSaveCont=",0,"the save button container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TRootEmbeddedCanvas),-1,-1,4,"fMiscCanv=",0,"the canvas for multi event plots");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGTextButton),-1,-1,4,"fSaveWvBtn=",0,"save the waveform canvas");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGTextButton),-1,-1,4,"fSaveMsBtn=",0,"save the multi event canvas");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnEvtGuiSeleFrame */
static void G__setup_memvarTSnEvtGuiSeleFrame(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame));
   { TSnEvtGuiSeleFrame *p; p=(TSnEvtGuiSeleFrame*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TQObjSender),-1,-1,4,"fQObject=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kChan0Btn=%lldLL",(long long)TSnEvtGuiSeleFrame::kChan0Btn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kChan1Btn=%lldLL",(long long)TSnEvtGuiSeleFrame::kChan1Btn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kChan2Btn=%lldLL",(long long)TSnEvtGuiSeleFrame::kChan2Btn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kChan3Btn=%lldLL",(long long)TSnEvtGuiSeleFrame::kChan3Btn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kWaveBtns=%lldLL",(long long)TSnEvtGuiSeleFrame::kWaveBtns).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kWaveAdcBtn=%lldLL",(long long)TSnEvtGuiSeleFrame::kWaveAdcBtn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kWaveFpnSubBtn=%lldLL",(long long)TSnEvtGuiSeleFrame::kWaveFpnSubBtn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kWaveAmpOutBtn=%lldLL",(long long)TSnEvtGuiSeleFrame::kWaveAmpOutBtn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kWaveAdcFFTBtn=%lldLL",(long long)TSnEvtGuiSeleFrame::kWaveAdcFFTBtn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kWaveFpnSubFFTBtn=%lldLL",(long long)TSnEvtGuiSeleFrame::kWaveFpnSubFFTBtn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kWaveAmpOutFFTBtn=%lldLL",(long long)TSnEvtGuiSeleFrame::kWaveAmpOutFFTBtn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kEvtNumEntry=%lldLL",(long long)TSnEvtGuiSeleFrame::kEvtNumEntry).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kEntryNumEntry=%lldLL",(long long)TSnEvtGuiSeleFrame::kEntryNumEntry).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kEvtPrevBtn=%lldLL",(long long)TSnEvtGuiSeleFrame::kEvtPrevBtn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kEvtNextBtn=%lldLL",(long long)TSnEvtGuiSeleFrame::kEvtNextBtn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kAdcCombo=%lldLL",(long long)TSnEvtGuiSeleFrame::kAdcCombo).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kAdcFFTCombo=%lldLL",(long long)TSnEvtGuiSeleFrame::kAdcFFTCombo).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kFpnSubCombo=%lldLL",(long long)TSnEvtGuiSeleFrame::kFpnSubCombo).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kFpnSubFFTCombo=%lldLL",(long long)TSnEvtGuiSeleFrame::kFpnSubFFTCombo).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kAmpOutCombo=%lldLL",(long long)TSnEvtGuiSeleFrame::kAmpOutCombo).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds),-1,-2,1,G__FastAllocString(4096).Format("kAmpOutFFTCombo=%lldLL",(long long)TSnEvtGuiSeleFrame::kAmpOutFFTCombo).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGButtonGroup),-1,-1,4,"fChanBtnGroup=",0,"contains channel check btns");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGCheckButton),-1,-1,4,"fChanBtn[4]=",0,"channel check buttons");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGButtonGroup),-1,-1,4,"fWaveBtnGroup=",0,"contains wave radio btns");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGRadioButton),-1,-1,4,"fWaveAdcBtn=",0,"ADC waveform radio btn");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGRadioButton),-1,-1,4,"fWaveFpnSubBtn=",0,"FPN sub waveform radio btn");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGRadioButton),-1,-1,4,"fWaveAmpOutBtn=",0,"calib waveform radio btn");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGRadioButton),-1,-1,4,"fWaveAdcFFTBtn=",0,"FFT of ADC waveform radio btn");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGRadioButton),-1,-1,4,"fWaveFpnSubFFTBtn=",0,"FFT of FPN sub waveform radio btn");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGRadioButton),-1,-1,4,"fWaveAmpOutFFTBtn=",0,"FFT of calib waveform radio btn");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGCompositeFrame),-1,-1,4,"fEvtLabelFrame=",0,"contains event number lbl & entry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGLabel),-1,-1,4,"fEvtLabel=",0,"event number label");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGLabel),-1,-1,4,"fEntryLabel=",0,"consecutive entry label");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGLabel),-1,-1,4,"fEvtRangeLbl=",0,"event range label");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGLabel),-1,-1,4,"fEntryRangeLbl=",0,"entry range label");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGNumberEntry),-1,-1,4,"fEvtNumEntry=",0,"event number input");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGNumberEntry),-1,-1,4,"fEntryNumEntry=",0,"consec entry number input");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGCompositeFrame),-1,-1,4,"fEvtNavBtnCont=",0,"holds the nav buttons");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGButtonGroup),-1,-1,4,"fEvtNavBtns=",0,"contains event navig. buttons");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGTextButton),-1,-1,4,"fEvtPrevBtn=",0,"previous event button");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGTextButton),-1,-1,4,"fEvtNextBtn=",0,"previous event button");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGCompositeFrame),-1,-1,4,"fLabelFrame=",0,"contains metadata labels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGLabel),-1,-1,4,"fTimeLabel=",0,"event time label");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGLabel),-1,-1,4,"fTrgLabel=",0,"trigger type label");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGLabel),-1,-1,4,"fRunLabel=",0,"run/seq label");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGTab),-1,-1,4,"fMiscTabs=",0,"tab container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGCompositeFrame),-1,-1,4,"fAdcTab=",0,"adc 2d tab");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGCompositeFrame),-1,-1,4,"fAdcFFTTab=",0,"adc fft 2d tab");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGCompositeFrame),-1,-1,4,"fFpnSubTab=",0,"FpnSub 2d tab");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGCompositeFrame),-1,-1,4,"fFpnSubFFTTab=",0,"FpnSub fft 2d tab");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGCompositeFrame),-1,-1,4,"fAmpOutTab=",0,"AmpOut 2d tab");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGCompositeFrame),-1,-1,4,"fAmpOutFFTTab=",0,"AmpOut fft 2d tab");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGComboBox),-1,-1,4,"fAdcCombo=",0,"Adc 2d list");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGComboBox),-1,-1,4,"fAdcFFTCombo=",0,"Adc fft 2d list");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGComboBox),-1,-1,4,"fFpnSubCombo=",0,"FpnSub 2d list");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGComboBox),-1,-1,4,"fFpnSubFFTCombo=",0,"FpnSub fft 2d list");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGComboBox),-1,-1,4,"fAmpOutCombo=",0,"AmpOut 2d list");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGComboBox),-1,-1,4,"fAmpOutFFTCombo=",0,"AmpOut fft 2d list");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnEvtGuiDataGuru */
static void G__setup_memvarTSnEvtGuiDataGuru(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiDataGuru));
   { TSnEvtGuiDataGuru *p; p=(TSnEvtGuiDataGuru*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TTree),-1,-1,4,"fTree=",0,"tree with event header info (not owned)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TFile),-1,-1,4,"fPlotf=",0,"file with plots from TSnPlotWaveformsMod (not owned)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,4,"fWaveChansOn=",0,"! which channels to draw");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fChanColors=",0,"! channel colors");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEvt=",0,"! current event");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fWave=",0,"! current plot waveform tag");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,4,"fWaveHists=",0,"! hists in wave canvas (so they can deleted)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_THashTable),-1,-1,4,"fWaveSources=",0,"! 2d hists used for projecting");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_THashTable),-1,-1,4,"fMiscPlots=",0,"! plots that go on the misc canvas");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGraph),-1,-1,4,"fEntryVsEvt=",0,"! graph mapping event to entry");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMinEvt=",0,"! min event num");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaxEvt=",0,"! max event num");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMinEntry=",0,"! min entry");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaxEntry=",0,"! max entry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventHeader),-1,-1,4,"fEvtHdr=",0,"! event header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventMetadata),-1,-1,4,"fEvtMeta=",0,"! event metadata");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnEvtGuiMainFrame */
static void G__setup_memvarTSnEvtGuiMainFrame(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame));
   { TSnEvtGuiMainFrame *p; p=(TSnEvtGuiMainFrame*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TQObjSender),-1,-1,4,"fQObject=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame),-1,-1,4,"fCanvFrame=",0,"composite frame containing the canvases");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame),-1,-1,4,"fSeleFrame=",0,"composite frame containing the selections");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiDataGuru),-1,-1,4,"fDataGuru=",0,"manage the data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnGCanvasSaveDialog */
static void G__setup_memvarTSnGCanvasSaveDialog(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnGCanvasSaveDialog));
   { TSnGCanvasSaveDialog *p; p=(TSnGCanvasSaveDialog*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TQObjSender),-1,-1,4,"fQObject=",0,(char*)NULL);
   G__memvar_setup((void*)(&TSnGCanvasSaveDialog::kSaveAsTypes),67,0,1,-1,-1,-2,1,"kSaveAsTypes[]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGFileDialog),-1,-1,4,"fDiag=",0,"! (transient) the file dialog box");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnRejectBadVoltTimesMod */
static void G__setup_memvarTSnRejectBadVoltTimesMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod));
   { TSnRejectBadVoltTimesMod *p; p=(TSnRejectBadVoltTimesMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnPowerReading),-1,-1,4,"fPwr=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnPlotPowerReadingsMod */
static void G__setup_memvarTSnPlotPowerReadingsMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod));
   { TSnPlotPowerReadingsMod *p; p=(TSnPlotPowerReadingsMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fVoltNm=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fCurrNm=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGraphErrors),-1,-1,4,"fVolt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TGraphErrors),-1,-1,4,"fCurr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnPowerReading),-1,-1,4,"fPwr=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnPlotAdcDists */
static void G__setup_memvarTSnPlotAdcDists(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists));
   { TSnPlotAdcDists *p; p=(TSnPlotAdcDists*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fPlotTag=",0,"a string to put in hist titles (i.e. describing the trigger or event selection)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fPlotLbl=",0,"a short label to add to the hist title (e.g. \"Frc\" for forced trigger)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNtimeBins=",0,"number of bins along time axis");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTimeMin=",0,"minimum of time axis (unix time seconds)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTimeMax=",0,"maximum of time axis (unix time seconds)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNRawAdcBins=",0,"number of bins along adc axis (def: 2048)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRawAdcMin=",0,"minimum of adc axis (def: -1)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRawAdcMax=",0,"maximum of adc axis (def: 4095)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNFpnSubBins=",0,"number of bins along fpn sub axis (def: 1001)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFpnSubMin=",0,"minimum of fpn sub axis (def: -1001)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFpnSubMax=",0,"maximum of fpn sub axis (def:  1001)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNFracBins=",0,"number of fraction bins (def: 100)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFracMin=",0,"minimum of fraction axis (def: 0)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFracMax=",0,"minimum of fraction axis (def: 1)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDoFpnSubPlots=",0,"whether to make FPN sub plots (def: true)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLowFreqCut=",0,"inclusive frequency defining the highest \"low freq\" bin (def: 200MHz)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNormTimeBins=",0,"whether to normalize time bins or not (def: true)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDoSmpPlots=",0,"whether to make plots for each sample (def: false; this takes a lot of RAM!)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventHeader),-1,-1,4,"fHdr=",0,"! the event header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnRawWaveform),-1,-1,4,"fAdc=",0,"! the raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fFpn=",0,"! the FPN sub data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TH1F),-1,-1,4,"fEvtsPerBin=",0,"! number of events in each time bin");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fRawAdc=",0,"! [chan] raw dist ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fRawAdcVsT=",0,"! [chan] raw dist vs time ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSub=",0,"! [chan] fpnsub dist ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSubVsT=",0,"! [chan] fpnsub dist vs time ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSubFftVsT=",0,"! [chan] fpnsub FFT vs time ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSubMaxFrqVsT=",0,"! [chan] fpnsub max freq vs time ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSubLowPwrVsT=",0,"! [chan] fpnsub low power ratio vs time ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fRawAdcSmp=",0,"! [chan][samp] raw dist ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fRawAdcSmpVsT=",0,"! [chan][samp] raw dist vs time ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSubSmp=",0,"! [chan][samp] fpnsub dist ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"fFpnSubSmpVsT=",0,"! [chan][samp] fpnsub dist vs time ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnCalDatModule */
static void G__setup_memvarTSnCalDatModule(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule));
   { TSnCalDatModule *p; p=(TSnCalDatModule*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TMap),-1,-1,2,"fNmToCalDat=",0,"the calibrated/processed data from the tree or evt obj, indexed by its name (this allows reading multiple branches or objects)");
   G__memvar_setup((void*)0,97,0,0,-1,G__defined_typename("IsBranchFcn"),-1,2,"fIsBr=",0,"function to use to check if the cal/proc data obj is in a branch or evt obj (default: IsFpnSubOrAmpOutBr)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnCalDatModule::AdrWrap_t */
static void G__setup_memvarTSnCalDatModulecLcLAdrWrap_t(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModulecLcLAdrWrap_t));
   { TSnCalDatModule::AdrWrap_t *p; p=(TSnCalDatModule::AdrWrap_t*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fAdr)-(long)(p)),85,2,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,1,"fAdr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnFilterWaveformMod */
static void G__setup_memvarTSnFilterWaveformMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod));
   { TSnFilterWaveformMod *p; p=(TSnFilterWaveformMod*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,G__FastAllocString(4096).Format("kDebugFilter=%lluULL",(unsigned long long)TSnFilterWaveformMod::kDebugFilter).data(),0,"verbosity level at which filter debugging is turned on (i.e. plots are drawn in each event)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fDatBrNm=",0,"name of the input branch containing the data (fpn sub or amp out)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fFltDatNm=",0,"name of the output filtered data object added to the event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TF1),-1,-1,4,"fFilter=",0,"the filter function (indep var must have same units as FFT of fDatBrNm) (owned)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fDat=",0,"! the fpn sub or amp out data to filter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnStopFindRms */
static void G__setup_memvarTSnStopFindRms(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms));
   { TSnStopFindRms *p; p=(TSnStopFindRms*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fDatBrNm=",0,"name of the input branch containing the data (fpn sub or amp out)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fStopNm=",0,"name of the output stop position object (default: StopPositions)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fStopWid=",0,"width of each stop in number of samples (default: 6)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fSrchWid=",0,"width of each stop search window in number of samples. must be <=fStopWid. if !=fStopWid, the stop in each channel is allowed to shift independently by (fStopWid-fSrchWid) (default: 4)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fJitter=",0,"max number of samples the stop may differ between channels (default: 3)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fDat=",0,"! the data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnShiftCalWvDataMod */
static void G__setup_memvarTSnShiftCalWvDataMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod));
   { TSnShiftCalWvDataMod *p; p=(TSnShiftCalWvDataMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fDatBrNm=",0,"name of the input branch containing the data (fpn sub or amp out)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fStopNm=",0,"name of the input stop position object in the event (default: StopPositions)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fShiftNm=",0,"name of the output shifted TSnCalWvData (no default!)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fDat=",0,"! the data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnMakeShiftTree */
static void G__setup_memvarTSnMakeShiftTree(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree));
   { TSnMakeShiftTree *p; p=(TSnMakeShiftTree*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fOutTreeNm=",0,"name of the output tree");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fOutTreeTitle=",0,"title of the output tree");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fDatBrNm=",0,"name of the input branch containing the data (fpn sub or amp out)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fStopNm=",0,"name of the input stop position object in the event (default: StopPositions)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fShiftNm=",0,"name of the output shifted TSnCalWvData (no default!)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBufSz=",0,"buffer size for new branch(es)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSplit=",0,"split level for new branch(es)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TTree),-1,-1,4,"fOt=",0,"the output tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fDat=",0,"! the event data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnStopPosnSet),-1,-1,4,"fStops=",0,"! the stop positions");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fShifted=",0,"! the shifted data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventHeader),-1,-1,4,"fHdr=",0,"! the event header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventMetadata),-1,-1,4,"fMeta=",0,"! the event metadata");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnPruneBadEvtsMod */
static void G__setup_memvarTSnPruneBadEvtsMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod));
   { TSnPruneBadEvtsMod *p; p=(TSnPruneBadEvtsMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"hAdc=",0,"[chan] fpn sub adc dist");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TH1F),-1,-1,4,"hdT=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TObjArray),-1,-1,4,"hdTvsAdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fFpnSub=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnEventHeader),-1,-1,4,"fHdr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnRunInfo),-1,-1,4,"fRunInfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnClockSetInfo),-1,-1,4,"fTrigSC=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnFFTCalcMod */
static void G__setup_memvarTSnFFTCalcMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod));
   { TSnFFTCalcMod *p; p=(TSnFFTCalcMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fDatBrNm=",0,"name of the input branch containing the data");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fFftNm=",0,"name of the resulting FFT object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fDat=",0,"! the data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnFindWaveformEnvelopeMod */
static void G__setup_memvarTSnFindWaveformEnvelopeMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod));
   { TSnFindWaveformEnvelopeMod *p; p=(TSnFindWaveformEnvelopeMod*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,G__FastAllocString(4096).Format("kDebugEnv=%lluULL",(unsigned long long)TSnFindWaveformEnvelopeMod::kDebugEnv).data(),0,"verbosity level at which envelope debugging is turned on (i.e. plots are drawn in each event)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fDatBrNm=",0,"name of the input branch (or evt object) containing the TSnCalWvData data");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TString),-1,-1,4,"fEnvDatNm=",0,"name of the output envelope data object added to the event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TSnCalWvData),-1,-1,4,"fDat=",0,"! the data to filter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__sigproc() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTSnRawTreeMaker(void) {
   /* TSnRawTreeMaker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRawTreeMaker));
   G__memfunc_setup("OpenFiles",901,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeTrees",897,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoopBlocks",1016,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnRawTreeMaker",1471,G__G__sigproc_194_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnRawTreeMaker), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnRawTreeMaker",1471,G__G__sigproc_194_0_5, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnRawTreeMaker), -1, 0, 6, 1, 1, 0, 
"C - 'Char_t' 10 - infn C - 'Char_t' 10 - outdir "
"C - 'Char_t' 10 'TSnRawTreeMaker::kRTFprf' outpre i - 'Int_t' 10 '262144' brBufSize "
"i - 'Int_t' 10 '1' split i - 'Int_t' 10 '2' compr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcFile",788,G__G__sigproc_194_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTreeFilename",1489,G__G__sigproc_194_0_7, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNevtsWritten",1565,G__G__sigproc_194_0_8, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNpwrsWritten",1575,G__G__sigproc_194_0_9, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNhrtsWritten",1564,G__G__sigproc_194_0_10, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_194_0_11, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnRawTreeMaker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_194_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRawTreeMaker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_194_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnRawTreeMaker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_194_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnRawTreeMaker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_194_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_194_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRawTreeMaker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_194_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnRawTreeMaker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_194_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRawTreeMaker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_194_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnRawTreeMaker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnRawTreeMaker", 1471, G__G__sigproc_194_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnRawTreeMaker), -1, 0, 1, 1, 1, 0, "u 'TSnRawTreeMaker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnRawTreeMaker", 1597, G__G__sigproc_194_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_194_0_25, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnRawTreeMaker), -1, 1, 1, 1, 1, 0, "u 'TSnRawTreeMaker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnBasicEvtSelMod(void) {
   /* TSnBasicEvtSelMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnBasicEvtSelMod",1642,G__G__sigproc_500_0_3, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnBasicEvtSelMod",1642,G__G__sigproc_500_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - name r - 'UShort_t' 10 '0' bits "
"r - 'UShort_t' 10 'TSnTrgInfo::kAdcToMBflag' rejBits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrgBits",991,G__G__sigproc_500_0_5, 117, G__get_linked_tagnum(&G__G__sigprocLN_TSnTrgInfo), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrgBits",991,G__G__sigproc_500_0_6, 117, G__get_linked_tagnum(&G__G__sigprocLN_TSnTrgInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRejectTrgBits",1596,G__G__sigproc_500_0_7, 117, G__get_linked_tagnum(&G__G__sigprocLN_TSnTrgInfo), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRejectTrgBits",1596,G__G__sigproc_500_0_8, 117, G__get_linked_tagnum(&G__G__sigprocLN_TSnTrgInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCheckingCRC",1200,G__G__sigproc_500_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHeaderBranchName",1848,G__G__sigproc_500_0_10, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvtWvfmBranchName",1982,G__G__sigproc_500_0_11, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrgBits",1003,G__G__sigproc_500_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrgBits",1003,G__G__sigproc_500_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TSnTrgInfo' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRejectTrgBits",1608,G__G__sigproc_500_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRejectTrgBits",1608,G__G__sigproc_500_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TSnTrgInfo' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckCRC",994,G__G__sigproc_500_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHeaderBranchName",1860,G__G__sigproc_500_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvtWvfmBranchName",1994,G__G__sigproc_500_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_500_0_19, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnBasicEvtSelMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_500_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnBasicEvtSelMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_500_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnBasicEvtSelMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_500_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnBasicEvtSelMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_500_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_500_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnBasicEvtSelMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_500_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnBasicEvtSelMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_500_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnBasicEvtSelMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_500_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnBasicEvtSelMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnBasicEvtSelMod", 1642, G__G__sigproc_500_0_31, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod), -1, 0, 1, 1, 1, 0, "u 'TSnBasicEvtSelMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnBasicEvtSelMod", 1768, G__G__sigproc_500_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_500_0_33, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnBasicEvtSelMod), -1, 1, 1, 1, 1, 0, "u 'TSnBasicEvtSelMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnRejectBadClocksMod(void) {
   /* TSnRejectBadClocksMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckTime",877,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - 'Double_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnRejectBadClocksMod",2040,G__G__sigproc_502_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnRejectBadClocksMod",2040,G__G__sigproc_502_0_5, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinTime",979,G__G__sigproc_502_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxTime",981,G__G__sigproc_502_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinTime",991,G__G__sigproc_502_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxTime",993,G__G__sigproc_502_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInclude",1008,G__G__sigproc_502_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_502_0_11, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnRejectBadClocksMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_502_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRejectBadClocksMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_502_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnRejectBadClocksMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_502_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnRejectBadClocksMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_502_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_502_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRejectBadClocksMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_502_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnRejectBadClocksMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_502_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRejectBadClocksMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_502_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnRejectBadClocksMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnRejectBadClocksMod", 2040, G__G__sigproc_502_0_23, (int) ('i'), 
G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod), -1, 0, 1, 1, 1, 0, "u 'TSnRejectBadClocksMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnRejectBadClocksMod", 2166, G__G__sigproc_502_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_502_0_25, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadClocksMod), -1, 1, 1, 1, 1, 0, "u 'TSnRejectBadClocksMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnRejectEarlyEvtsMod(void) {
   /* TSnRejectEarlyEvtsMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnRejectEarlyEvtsMod",2097,G__G__sigproc_503_0_3, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnRejectEarlyEvtsMod",2097,G__G__sigproc_503_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - name d - 'Double_t' 10 '2.0' earlyTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEarlyTime",1196,G__G__sigproc_503_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEarlyTime",1208,G__G__sigproc_503_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_503_0_7, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnRejectEarlyEvtsMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_503_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRejectEarlyEvtsMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_503_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnRejectEarlyEvtsMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_503_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnRejectEarlyEvtsMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_503_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_503_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRejectEarlyEvtsMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_503_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnRejectEarlyEvtsMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_503_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRejectEarlyEvtsMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_503_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnRejectEarlyEvtsMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnRejectEarlyEvtsMod", 2097, G__G__sigproc_503_0_19, (int) ('i'), 
G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod), -1, 0, 1, 1, 1, 0, "u 'TSnRejectEarlyEvtsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnRejectEarlyEvtsMod", 2223, G__G__sigproc_503_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_503_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectEarlyEvtsMod), -1, 1, 1, 1, 1, 0, "u 'TSnRejectEarlyEvtsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnFPNCalcMod(void) {
   /* TSnFPNCalcMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnFPNCalcMod",1164,G__G__sigproc_506_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnFPNCalcMod",1164,G__G__sigproc_506_0_5, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - fpnsetname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAdcHist",960,G__G__sigproc_506_0_6, 85, G__get_linked_tagnum(&G__G__sigprocLN_TH2), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpnSet",880,G__G__sigproc_506_0_7, 85, G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalibSet), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpnSetName",1265,G__G__sigproc_506_0_8, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsGausFitting",1313,G__G__sigproc_506_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPeakFrc",956,G__G__sigproc_506_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPeakFrc",968,G__G__sigproc_506_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFpnSetName",1277,G__G__sigproc_506_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGausFit",991,G__G__sigproc_506_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSampleAxis",1315,G__G__sigproc_506_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - n f - 'Float_t' 10 - min "
"f - 'Float_t' 10 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAdcAxis",969,G__G__sigproc_506_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - n f - 'Float_t' 10 - min "
"f - 'Float_t' 10 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_506_0_16, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnFPNCalcMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_506_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFPNCalcMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_506_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnFPNCalcMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_506_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnFPNCalcMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_506_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_506_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFPNCalcMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_506_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFPNCalcMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_506_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFPNCalcMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_506_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFPNCalcMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnFPNCalcMod", 1164, G__G__sigproc_506_0_28, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod), -1, 0, 1, 1, 1, 0, "u 'TSnFPNCalcMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnFPNCalcMod", 1290, G__G__sigproc_506_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_506_0_30, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNCalcMod), -1, 1, 1, 1, 1, 0, "u 'TSnFPNCalcMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnFPNSubMod(void) {
   /* TSnFPNSubMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNSubMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnFPNSubMod",1091,G__G__sigproc_507_0_3, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNSubMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnFPNSubMod",1091,G__G__sigproc_507_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNSubMod), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - fpnsetnm "
"C - 'Char_t' 10 '\"FPNSubData\"' caldatnm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFPNSetName",1201,G__G__sigproc_507_0_5, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalDatName",1226,G__G__sigproc_507_0_6, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFPNSetName",1213,G__G__sigproc_507_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalDatName",1238,G__G__sigproc_507_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_507_0_9, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnFPNSubMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_507_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFPNSubMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_507_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnFPNSubMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_507_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnFPNSubMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_507_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_507_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFPNSubMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_507_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFPNSubMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_507_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFPNSubMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_507_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFPNSubMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnFPNSubMod", 1091, G__G__sigproc_507_0_21, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnFPNSubMod), -1, 0, 1, 1, 1, 0, "u 'TSnFPNSubMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnFPNSubMod", 1217, G__G__sigproc_507_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnDigitizerCalibMod(void) {
   /* TSnDigitizerCalibMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnDigitizerCalibMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnDigitizerCalibMod",1979,G__G__sigproc_510_0_3, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnDigitizerCalibMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnDigitizerCalibMod",1979,G__G__sigproc_510_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnDigitizerCalibMod), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - calname "
"C - 'Char_t' 10 '\"FPNSubData\"' fpnsubnm C - 'Char_t' 10 '\"AmpOutData\"' caldatnm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibSetNm",1250,G__G__sigproc_510_0_5, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFPNSubDatNm",1282,G__G__sigproc_510_0_6, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmpOutDatNm",1354,G__G__sigproc_510_0_7, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsGettingFpnSubFromTree",2304,G__G__sigproc_510_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibSetNm",1262,G__G__sigproc_510_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFPNSubDatNm",1294,G__G__sigproc_510_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAmpOutDatNm",1366,G__G__sigproc_510_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFpnSubFromTree",1694,G__G__sigproc_510_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_510_0_13, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnDigitizerCalibMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_510_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnDigitizerCalibMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_510_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnDigitizerCalibMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_510_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnDigitizerCalibMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_510_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_510_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnDigitizerCalibMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_510_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnDigitizerCalibMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_510_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnDigitizerCalibMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_510_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnDigitizerCalibMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnDigitizerCalibMod", 1979, G__G__sigproc_510_0_25, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnDigitizerCalibMod), -1, 0, 1, 1, 1, 0, "u 'TSnDigitizerCalibMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnDigitizerCalibMod", 2105, G__G__sigproc_510_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnSaveCalibDataMod(void) {
   /* TSnSaveCalibDataMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod));
   G__memfunc_setup("CopyAllKeys",1104,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TFile' - 10 - inf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTreeFilename",1489,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 1, 1, 4, 8, "u 'TString' - 10 - infn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SlaveTerminate",1444,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnSaveCalibDataMod",1817,G__G__sigproc_511_0_6, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnSaveCalibDataMod",1817,G__G__sigproc_511_0_7, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod), -1, 0, 7, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - outdir "
"C - 'Char_t' 10 'TSnSaveCalibDataMod::kCTFprf' outpre C - 'Char_t' 10 '\"FPNSubData\"' fpnsubnm "
"C - 'Char_t' 10 '\"AmpOutData\"' ampoutnm i - 'Int_t' 10 '262144' bufsz "
"i - 'Int_t' 10 '1' split", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutputDirectory",1894,G__G__sigproc_511_0_8, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutputPrefix",1567,G__G__sigproc_511_0_9, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFPNSubDatNm",1282,G__G__sigproc_511_0_10, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmpOutDatNm",1354,G__G__sigproc_511_0_11, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSavingFPNSubData",1708,G__G__sigproc_511_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSavingAmpOutData",1780,G__G__sigproc_511_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBranchBufferSize",1891,G__G__sigproc_511_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBranchSplitLevel",1906,G__G__sigproc_511_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutputTreeTitle",1859,G__G__sigproc_511_0_16, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOutputDirectory",1906,G__G__sigproc_511_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOutputPrefix",1579,G__G__sigproc_511_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFPNSubDatNm",1294,G__G__sigproc_511_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAmpOutDatNm",1366,G__G__sigproc_511_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSaveFPNSubData",1603,G__G__sigproc_511_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSaveAmpOutData",1675,G__G__sigproc_511_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBranchBufferSize",1903,G__G__sigproc_511_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBranchSplitLevel",1918,G__G__sigproc_511_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOutputTreeTitle",1871,G__G__sigproc_511_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_511_0_26, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnSaveCalibDataMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_511_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnSaveCalibDataMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_511_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnSaveCalibDataMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_511_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnSaveCalibDataMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_511_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_511_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnSaveCalibDataMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_511_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnSaveCalibDataMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_511_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnSaveCalibDataMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_511_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnSaveCalibDataMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnSaveCalibDataMod", 1817, G__G__sigproc_511_0_38, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod), -1, 0, 1, 1, 1, 0, "u 'TSnSaveCalibDataMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnSaveCalibDataMod", 1943, G__G__sigproc_511_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_511_0_40, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnSaveCalibDataMod), -1, 1, 1, 1, 1, 0, "u 'TSnSaveCalibDataMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnCalcAbsTimeMod(void) {
   /* TSnCalcAbsTimeMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnCalcAbsTimeMod",1613,G__G__sigproc_513_0_3, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnCalcAbsTimeMod",1613,G__G__sigproc_513_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbsEvtTimeName",1653,G__G__sigproc_513_0_5, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsEvtTimeName",1665,G__G__sigproc_513_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_513_0_7, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnCalcAbsTimeMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_513_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalcAbsTimeMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_513_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnCalcAbsTimeMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_513_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnCalcAbsTimeMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_513_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_513_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalcAbsTimeMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_513_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalcAbsTimeMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_513_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalcAbsTimeMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_513_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalcAbsTimeMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnCalcAbsTimeMod", 1613, G__G__sigproc_513_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod), -1, 0, 1, 1, 1, 0, "u 'TSnCalcAbsTimeMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnCalcAbsTimeMod", 1739, G__G__sigproc_513_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_513_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnCalcAbsTimeMod), -1, 1, 1, 1, 1, 0, "u 'TSnCalcAbsTimeMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnFindTimeLimitsMod(void) {
   /* TSnFindTimeLimitsMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnFindTimeLimitsMod",1975,G__G__sigproc_536_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnFindTimeLimitsMod",1975,G__G__sigproc_536_0_5, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbsEvtTimeName",1653,G__G__sigproc_536_0_6, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinTimeName",1364,G__G__sigproc_536_0_7, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxTimeName",1366,G__G__sigproc_536_0_8, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsEvtTimeName",1665,G__G__sigproc_536_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinTimeName",1376,G__G__sigproc_536_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxTimeName",1378,G__G__sigproc_536_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_536_0_12, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnFindTimeLimitsMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_536_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFindTimeLimitsMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_536_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnFindTimeLimitsMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_536_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnFindTimeLimitsMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_536_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_536_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFindTimeLimitsMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_536_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFindTimeLimitsMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_536_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFindTimeLimitsMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_536_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFindTimeLimitsMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnFindTimeLimitsMod", 1975, G__G__sigproc_536_0_24, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod), -1, 0, 1, 1, 1, 0, "u 'TSnFindTimeLimitsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnFindTimeLimitsMod", 2101, G__G__sigproc_536_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_536_0_26, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnFindTimeLimitsMod), -1, 1, 1, 1, 1, 0, "u 'TSnFindTimeLimitsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnFindEvtNumLimitsMod(void) {
   /* TSnFindEvtNumLimitsMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnFindEvtNumLimitsMod",2183,G__G__sigproc_539_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnFindEvtNumLimitsMod",2183,G__G__sigproc_539_0_5, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinEvtNumName",1572,G__G__sigproc_539_0_6, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxEvtNumName",1574,G__G__sigproc_539_0_7, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinEvtNumName",1584,G__G__sigproc_539_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxEvtNumName",1586,G__G__sigproc_539_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_539_0_10, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnFindEvtNumLimitsMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_539_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFindEvtNumLimitsMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_539_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnFindEvtNumLimitsMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_539_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnFindEvtNumLimitsMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_539_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_539_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFindEvtNumLimitsMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_539_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFindEvtNumLimitsMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_539_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFindEvtNumLimitsMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_539_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFindEvtNumLimitsMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnFindEvtNumLimitsMod", 2183, G__G__sigproc_539_0_22, (int) ('i'), 
G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod), -1, 0, 1, 1, 1, 0, "u 'TSnFindEvtNumLimitsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnFindEvtNumLimitsMod", 2309, G__G__sigproc_539_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_539_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnFindEvtNumLimitsMod), -1, 1, 1, 1, 1, 0, "u 'TSnFindEvtNumLimitsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTParameterlEunsignedsPintgR(void) {
   /* TParameter<unsigned int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR));
   G__memfunc_setup("TParameter<unsigned int>",2359,G__G__sigproc_540_0_1, 105, G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TParameter<unsigned int>",2359,G__G__sigproc_540_0_2, 105, G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name h - - 11 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TParameter<unsigned int>",2359,G__G__sigproc_540_0_3, 105, G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name h - - 11 - val "
"c - - 0 - mergemode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVal",579,G__G__sigproc_540_0_5, 104, -1, -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVal",591,G__G__sigproc_540_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 11 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMergeMode",1185,G__G__sigproc_540_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "c - - 0 ''+'' mergemode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hash",388,(G__InterfaceMethod) NULL,107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Merge",496,G__G__sigproc_540_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - in", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__sigproc_540_0_14, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TParameter<unsigned int>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_540_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TParameter<unsigned int>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_540_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TParameter<unsigned int>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_540_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TParameter<unsigned int>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_540_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_540_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TParameter<unsigned int>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_540_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TParameter<unsigned int>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_540_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TParameter<unsigned int>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_540_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TParameter<unsigned int>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TParameter<unsigned int>", 2359, G__G__sigproc_540_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR), -1, 0, 1, 1, 1, 0, "u 'TParameter<unsigned int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TParameter<unsigned int>", 2485, G__G__sigproc_540_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_540_0_28, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TParameterlEunsignedsPintgR), -1, 1, 1, 1, 1, 0, "u 'TParameter<unsigned int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnPlotEvtRateMod(void) {
   /* TSnPlotEvtRateMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod));
   G__memfunc_setup("ProcessTimes",1249,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SlaveTerminate",1444,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnPlotEvtRateMod",1679,G__G__sigproc_546_0_7, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnPlotEvtRateMod",1679,G__G__sigproc_546_0_8, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTwin",706,G__G__sigproc_546_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConsDTbw",1060,G__G__sigproc_546_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCombDTbw",1042,G__G__sigproc_546_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbsEvtTimeName",1653,G__G__sigproc_546_0_12, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSecondResoOk",1387,G__G__sigproc_546_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNtimeBins",1193,G__G__sigproc_546_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeMin",979,G__G__sigproc_546_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeMax",981,G__G__sigproc_546_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnumVsTName",1363,G__G__sigproc_546_0_17, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetERvsTName",1141,G__G__sigproc_546_0_18, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetERvsEnumName",1462,G__G__sigproc_546_0_19, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawDTName",1123,G__G__sigproc_546_0_20, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConsDTName",1228,G__G__sigproc_546_0_21, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCombDTName",1210,G__G__sigproc_546_0_22, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConsDTvsTName",1545,G__G__sigproc_546_0_23, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConsDTvsTGraphName",2043,G__G__sigproc_546_0_24, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCombDTvsTName",1527,G__G__sigproc_546_0_25, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumEvtsName",1395,G__G__sigproc_546_0_26, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLivetimeName",1504,G__G__sigproc_546_0_27, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAveEvtNumsName",1679,G__G__sigproc_546_0_28, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRateVsTName",1354,G__G__sigproc_546_0_29, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTwin",718,G__G__sigproc_546_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConsDTbw",1072,G__G__sigproc_546_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCombDTbw",1054,G__G__sigproc_546_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsEvtTimeName",1665,G__G__sigproc_546_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSecondResoOk",1499,G__G__sigproc_546_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNtimeBins",1205,G__G__sigproc_546_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeMin",991,G__G__sigproc_546_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeMax",993,G__G__sigproc_546_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnumVsTName",1375,G__G__sigproc_546_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetERvsTName",1153,G__G__sigproc_546_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetERvsEnumName",1474,G__G__sigproc_546_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawDTName",1135,G__G__sigproc_546_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConsDTName",1240,G__G__sigproc_546_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCombDTName",1222,G__G__sigproc_546_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConsDTvsTName",1557,G__G__sigproc_546_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConsDTvsTGraphName",2055,G__G__sigproc_546_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCombDTvsTName",1539,G__G__sigproc_546_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumEvtsName",1407,G__G__sigproc_546_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLivetimeName",1516,G__G__sigproc_546_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvtNumsName",1407,G__G__sigproc_546_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRateVsTName",1366,G__G__sigproc_546_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_546_0_51, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnPlotEvtRateMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_546_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPlotEvtRateMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_546_0_53, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnPlotEvtRateMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_546_0_54, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnPlotEvtRateMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_546_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_546_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPlotEvtRateMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_546_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPlotEvtRateMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_546_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPlotEvtRateMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_546_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPlotEvtRateMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnPlotEvtRateMod", 1679, G__G__sigproc_546_0_63, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod), -1, 0, 1, 1, 1, 0, "u 'TSnPlotEvtRateMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnPlotEvtRateMod", 1805, G__G__sigproc_546_0_64, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_546_0_65, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotEvtRateMod), -1, 1, 1, 1, 1, 0, "u 'TSnPlotEvtRateMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnPlotWaveformsMod(void) {
   /* TSnPlotWaveformsMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod));
   G__memfunc_setup("FillFFTHists",1138,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 4, 0, 
"u 'TH2F' - 1 - hfftVsEvt u 'TH2F' - 1 - hfftVsEntry "
"u 'TH1F' - 1 - hfftAve d - 'Double_t' 10 - evtnum "
"i - 'Int_t' 10 - entry F - 'Float_t' 40 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnPlotWaveformsMod",1934,G__G__sigproc_552_0_5, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnPlotWaveformsMod",1934,G__G__sigproc_552_0_6, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 - name i - 'Int_t' 10 - nevtbins "
"f - 'Float_t' 10 - evtmin f - 'Float_t' 10 - evtmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNevtBins",1097,G__G__sigproc_552_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvtMin",883,G__G__sigproc_552_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvtMax",885,G__G__sigproc_552_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMakingAdcPlots",1581,G__G__sigproc_552_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMakingFpnSubPlots",1907,G__G__sigproc_552_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMakingAmpOutPlots",1915,G__G__sigproc_552_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNevtBins",1109,G__G__sigproc_552_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvtMin",895,G__G__sigproc_552_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvtMax",897,G__G__sigproc_552_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMakeAdcPlots",1476,G__G__sigproc_552_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMakeFpnSubPlots",1802,G__G__sigproc_552_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMakeAmpOutPlots",1810,G__G__sigproc_552_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvtsPerBinName",1667,G__G__sigproc_552_0_19, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetEvtsPerBinName) ), 0);
   G__memfunc_setup("GetAdcVsEvtName",1441,G__G__sigproc_552_0_20, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetAdcVsEvtName) ), 0);
   G__memfunc_setup("GetFpnSubVsEvtName",1767,G__G__sigproc_552_0_21, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetFpnSubVsEvtName) ), 0);
   G__memfunc_setup("GetFpnSubErrVsEvtName",2064,G__G__sigproc_552_0_22, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetFpnSubErrVsEvtName) ), 0);
   G__memfunc_setup("GetAmpOutVsEvtName",1775,G__G__sigproc_552_0_23, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetAmpOutVsEvtName) ), 0);
   G__memfunc_setup("GetAmpOutErrVsEvtName",2072,G__G__sigproc_552_0_24, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetAmpOutErrVsEvtName) ), 0);
   G__memfunc_setup("GetAdcFFTVsEvtName",1665,G__G__sigproc_552_0_25, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetAdcFFTVsEvtName) ), 0);
   G__memfunc_setup("GetFpnSubFFTVsEvtName",1991,G__G__sigproc_552_0_26, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetFpnSubFFTVsEvtName) ), 0);
   G__memfunc_setup("GetAmpOutFFTVsEvtName",1999,G__G__sigproc_552_0_27, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetAmpOutFFTVsEvtName) ), 0);
   G__memfunc_setup("GetAdcAveFFTName",1445,G__G__sigproc_552_0_28, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetAdcAveFFTName) ), 0);
   G__memfunc_setup("GetFpnSubAveFFTName",1771,G__G__sigproc_552_0_29, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetFpnSubAveFFTName) ), 0);
   G__memfunc_setup("GetAmpOutAveFFTName",1779,G__G__sigproc_552_0_30, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetAmpOutAveFFTName) ), 0);
   G__memfunc_setup("GetEntryVsEvtName",1707,G__G__sigproc_552_0_31, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetEntryVsEvtName) ), 0);
   G__memfunc_setup("GetAdcVsEntryName",1668,G__G__sigproc_552_0_32, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetAdcVsEntryName) ), 0);
   G__memfunc_setup("GetFpnSubVsEntryName",1994,G__G__sigproc_552_0_33, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetFpnSubVsEntryName) ), 0);
   G__memfunc_setup("GetFpnSubErrVsEntryName",2291,G__G__sigproc_552_0_34, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetFpnSubErrVsEntryName) ), 0);
   G__memfunc_setup("GetAmpOutVsEntryName",2002,G__G__sigproc_552_0_35, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetAmpOutVsEntryName) ), 0);
   G__memfunc_setup("GetAmpOutErrVsEntryName",2299,G__G__sigproc_552_0_36, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetAmpOutErrVsEntryName) ), 0);
   G__memfunc_setup("GetAdcFFTVsEntryName",1892,G__G__sigproc_552_0_37, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetAdcFFTVsEntryName) ), 0);
   G__memfunc_setup("GetFpnSubFFTVsEntryName",2218,G__G__sigproc_552_0_38, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetFpnSubFFTVsEntryName) ), 0);
   G__memfunc_setup("GetAmpOutFFTVsEntryName",2226,G__G__sigproc_552_0_39, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotWaveformsMod::GetAmpOutFFTVsEntryName) ), 0);
   G__memfunc_setup("Class",502,G__G__sigproc_552_0_40, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnPlotWaveformsMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_552_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPlotWaveformsMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_552_0_42, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnPlotWaveformsMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_552_0_43, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnPlotWaveformsMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_552_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_552_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPlotWaveformsMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_552_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPlotWaveformsMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_552_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPlotWaveformsMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_552_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPlotWaveformsMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnPlotWaveformsMod", 1934, G__G__sigproc_552_0_52, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod), -1, 0, 1, 1, 1, 0, "u 'TSnPlotWaveformsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnPlotWaveformsMod", 2060, G__G__sigproc_552_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_552_0_54, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotWaveformsMod), -1, 1, 1, 1, 1, 0, "u 'TSnPlotWaveformsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnEvtGuiCanvFrame(void) {
   /* TSnEvtGuiCanvFrame */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame));
   G__memfunc_setup("GetListOfSignals",1602,G__G__sigproc_660_0_1, 85, G__get_linked_tagnum(&G__G__sigprocLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__G__sigproc_660_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - sig C - - 10 - cl "
"Y - - 0 - rcvr C - - 10 - slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disconnect",1034,G__G__sigproc_660_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' sig Y - - 0 '0' rcvr "
"C - - 10 '0' slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HighPriority",1250,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LowPriority",1172,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EmitVA",550,G__G__sigproc_660_0_6, 121, -1, -1, 0, 2, 8, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - nargs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - signal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal C - - 10 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal L - 'Long_t' 0 - paramArr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal d - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal l - 'Long_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal n - 'Long64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal m - 'ULong64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal g - 'Bool_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal c - 'Char_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal b - 'UChar_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal s - 'Short_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal r - 'UShort_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal h - 'UInt_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal k - 'ULong_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_660_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal f - 'Float_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Destroyed",947,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ChangedBy",869,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - method", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Message",709,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - msg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeSaveDialog",1373,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TRootEmbeddedCanvas' - 0 - canv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnEvtGuiCanvFrame",1756,G__G__sigproc_660_0_27, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnEvtGuiCanvFrame",1756,G__G__sigproc_660_0_28, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiCanvFrame), -1, 0, 5, 1, 1, 0, 
"U 'TGWindow' - 10 - p h - 'UInt_t' 10 '60' w "
"h - 'UInt_t' 10 '60' h h - 'UInt_t' 10 'kChildFrame' options "
"k - 'Pixel_t' 10 'GetDefaultFrameBackground()' back", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWaveEmbedCanv",1560,G__G__sigproc_660_0_29, 85, G__get_linked_tagnum(&G__G__sigprocLN_TRootEmbeddedCanvas), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWaveCanvas",1295,G__G__sigproc_660_0_30, 85, G__get_linked_tagnum(&G__G__sigprocLN_TCanvas), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMiscCanvas",1288,G__G__sigproc_660_0_31, 85, G__get_linked_tagnum(&G__G__sigprocLN_TCanvas), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HandleButtons",1339,G__G__sigproc_660_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_660_0_33, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnEvtGuiCanvFrame::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_660_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvtGuiCanvFrame::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_660_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnEvtGuiCanvFrame::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_660_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnEvtGuiCanvFrame::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_660_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_660_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvtGuiCanvFrame::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_660_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEvtGuiCanvFrame::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_660_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvtGuiCanvFrame::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_660_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEvtGuiCanvFrame::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnEvtGuiCanvFrame", 1882, G__G__sigproc_660_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnEvtGuiSeleFrame(void) {
   /* TSnEvtGuiSeleFrame */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame));
   G__memfunc_setup("GetListOfSignals",1602,G__G__sigproc_662_0_1, 85, G__get_linked_tagnum(&G__G__sigprocLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__G__sigproc_662_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - sig C - - 10 - cl "
"Y - - 0 - rcvr C - - 10 - slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disconnect",1034,G__G__sigproc_662_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' sig Y - - 0 '0' rcvr "
"C - - 10 '0' slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HighPriority",1250,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LowPriority",1172,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EmitVA",550,G__G__sigproc_662_0_6, 121, -1, -1, 0, 2, 8, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - nargs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - signal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal C - - 10 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal L - 'Long_t' 0 - paramArr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal d - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal l - 'Long_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal n - 'Long64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal m - 'ULong64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal g - 'Bool_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal c - 'Char_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal b - 'UChar_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal s - 'Short_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal r - 'UShort_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal h - 'UInt_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal k - 'ULong_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_662_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal f - 'Float_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Destroyed",947,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ChangedBy",869,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - method", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Message",709,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - msg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTextBtnProps",1545,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 3, 4, 0, "U 'TGTextButton' - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLabelTxtProps",1632,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 3, 4, 0, "U 'TGLabel' - 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnEvtGuiSeleFrame",1757,G__G__sigproc_662_0_28, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnEvtGuiSeleFrame",1757,G__G__sigproc_662_0_29, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiSeleFrame), -1, 0, 5, 1, 1, 0, 
"U 'TSnEvtGuiMainFrame' - 0 - p h - 'UInt_t' 10 '60' w "
"h - 'UInt_t' 10 '60' h h - 'UInt_t' 10 'kChildFrame' options "
"k - 'Pixel_t' 10 'GetDefaultFrameBackground()' back", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChanButtons",1417,G__G__sigproc_662_0_30, 85, G__get_linked_tagnum(&G__G__sigprocLN_TGButtonGroup), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChanButton",1302,G__G__sigproc_662_0_31, 85, G__get_linked_tagnum(&G__G__sigprocLN_TGCheckButton), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWaveButtons",1442,G__G__sigproc_662_0_32, 85, G__get_linked_tagnum(&G__G__sigprocLN_TGButtonGroup), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAdcCombo",1048,G__G__sigproc_662_0_33, 85, G__get_linked_tagnum(&G__G__sigprocLN_TGComboBox), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAdcFFTCombo",1272,G__G__sigproc_662_0_34, 85, G__get_linked_tagnum(&G__G__sigprocLN_TGComboBox), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpnSubCombo",1374,G__G__sigproc_662_0_35, 85, G__get_linked_tagnum(&G__G__sigprocLN_TGComboBox), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpnSubFFTCombo",1598,G__G__sigproc_662_0_36, 85, G__get_linked_tagnum(&G__G__sigprocLN_TGComboBox), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmpOutCombo",1382,G__G__sigproc_662_0_37, 85, G__get_linked_tagnum(&G__G__sigprocLN_TGComboBox), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmpOutFFTCombo",1606,G__G__sigproc_662_0_38, 85, G__get_linked_tagnum(&G__G__sigprocLN_TGComboBox), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMiscTabs",1078,G__G__sigproc_662_0_39, 85, G__get_linked_tagnum(&G__G__sigprocLN_TGTab), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMiscPlotName",1484,G__G__sigproc_662_0_40, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventNum",1106,G__G__sigproc_662_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryNum",1122,G__G__sigproc_662_0_42, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisableTab",971,G__G__sigproc_662_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - comboid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnableTab",862,G__G__sigproc_662_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - comboid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisableWave",1095,G__G__sigproc_662_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - bid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnableWave",986,G__G__sigproc_662_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - bid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisableChan",1070,G__G__sigproc_662_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnableChan",961,G__G__sigproc_662_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChanColor",1189,G__G__sigproc_662_0_49, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - ch i - 'Int_t' 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventLimits",1440,G__G__sigproc_662_0_50, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 10 - min d - 'Double_t' 10 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEntryLimits",1456,G__G__sigproc_662_0_51, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 10 - min d - 'Double_t' 10 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventNum",1118,G__G__sigproc_662_0_52, 121, -1, -1, 0, 2, 1, 1, 0, 
"l - 'Long_t' 10 - event d - 'Double_t' 10 - maxevt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEntryNum",1134,G__G__sigproc_662_0_53, 121, -1, -1, 0, 2, 1, 1, 0, 
"l - 'Long_t' 10 - entry d - 'Double_t' 10 - maxentry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvtEntNums",1317,G__G__sigproc_662_0_54, 121, -1, -1, 0, 4, 1, 1, 0, 
"l - 'Long_t' 10 - event l - 'Long_t' 10 - entry "
"d - 'Double_t' 10 - maxevt d - 'Double_t' 10 - maxentry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateLabels",1206,G__G__sigproc_662_0_55, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TSnEventHeader' - 10 - hdr U 'TSnEventMetadata' - 10 - meta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_662_0_56, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnEvtGuiSeleFrame::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_662_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvtGuiSeleFrame::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_662_0_58, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnEvtGuiSeleFrame::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_662_0_59, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnEvtGuiSeleFrame::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_662_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_662_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvtGuiSeleFrame::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_662_0_65, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEvtGuiSeleFrame::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_662_0_66, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvtGuiSeleFrame::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_662_0_67, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEvtGuiSeleFrame::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnEvtGuiSeleFrame", 1883, G__G__sigproc_662_0_68, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnEvtGuiDataGuru(void) {
   /* TSnEvtGuiDataGuru */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiDataGuru));
   G__memfunc_setup("Load2DHist",910,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__sigprocLN_TH2), -1, 0, 1, 1, 4, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadMiscPlot",1195,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__sigprocLN_TObject), -1, 0, 1, 1, 4, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnEvtGuiDataGuru",1670,G__G__sigproc_663_0_3, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiDataGuru), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnEvtGuiDataGuru",1670,G__G__sigproc_663_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiDataGuru), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree U 'TFile' - 0 - plotf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTree",688,G__G__sigproc_663_0_5, 85, G__get_linked_tagnum(&G__G__sigprocLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlotFile",1087,G__G__sigproc_663_0_6, 85, G__get_linked_tagnum(&G__G__sigprocLN_TFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColorOfChan",1358,G__G__sigproc_663_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChanColors",1292,G__G__sigproc_663_0_8, 117, G__get_linked_tagnum(&G__G__sigprocLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinEvtNum",1187,G__G__sigproc_663_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxEvtNum",1189,G__G__sigproc_663_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinEntryNum",1414,G__G__sigproc_663_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxEntryNum",1416,G__G__sigproc_663_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTree",700,G__G__sigproc_663_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPlotFile",1099,G__G__sigproc_663_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFile' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvtNum",907,G__G__sigproc_663_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - e", "external redraw", (void*) NULL, 0);
   G__memfunc_setup("SetEntryNum",1134,G__G__sigproc_663_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryNum",1122,G__G__sigproc_663_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - event i - 'Int_t' 1 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventNum",1106,G__G__sigproc_663_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - entry i - 'Int_t' 1 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisableChan",1070,G__G__sigproc_663_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - ch U 'TSnEvtGuiSeleFrame' - 0 - seleFrame", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnableChan",961,G__G__sigproc_663_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - ch U 'TSnEvtGuiSeleFrame' - 0 - seleFrame", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ToggleWaveChan",1391,G__G__sigproc_663_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWaveChanOn",1270,G__G__sigproc_663_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - ch g - - 10 - on", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearMisc",883,G__G__sigproc_663_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TCanvas' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RedrawMisc",1009,G__G__sigproc_663_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TCanvas' - 0 - c U 'TSnEvtGuiSeleFrame' - 0 - seleFrame", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearWaves",1005,G__G__sigproc_663_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TCanvas' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeWaveChans",1478,G__G__sigproc_663_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TCanvas' - 0 - c U 'TSnEvtGuiSeleFrame' - 0 - seleFrame "
"i - 'Int_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RedrawWaveChans",1509,G__G__sigproc_663_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TCanvas' - 0 - c U 'TSnEvtGuiSeleFrame' - 0 - seleFrame", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeWaveType",1403,G__G__sigproc_663_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TCanvas' - 0 - c U 'TSnEvtGuiSeleFrame' - 0 - seleFrame "
"i - 'Int_t' 10 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateLabels",1206,G__G__sigproc_663_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TSnEvtGuiSeleFrame' - 0 - seleFrame", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadAllWaveHists",1587,G__G__sigproc_663_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TSnEvtGuiSeleFrame' - 0 - seleFrame", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewListOfObjsWithTag",1985,G__G__sigproc_663_0_31, 85, G__get_linked_tagnum(&G__G__sigprocLN_TObjArray), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - tag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadAllMiscHists",1580,G__G__sigproc_663_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TSnEvtGuiSeleFrame' - 0 - seleFrame", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SendNamesTo",1089,G__G__sigproc_663_0_33, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"U 'TObjArray' - 0 - names U 'TGComboBox' - 0 - combo "
"i - 'Int_t' 10 - start", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_663_0_34, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnEvtGuiDataGuru::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_663_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvtGuiDataGuru::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_663_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnEvtGuiDataGuru::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_663_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnEvtGuiDataGuru::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_663_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_663_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvtGuiDataGuru::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_663_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEvtGuiDataGuru::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_663_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvtGuiDataGuru::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_663_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEvtGuiDataGuru::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnEvtGuiDataGuru", 1670, G__G__sigproc_663_0_46, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiDataGuru), -1, 0, 1, 1, 1, 0, "u 'TSnEvtGuiDataGuru' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnEvtGuiDataGuru", 1796, G__G__sigproc_663_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_663_0_48, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiDataGuru), -1, 1, 1, 1, 1, 0, "u 'TSnEvtGuiDataGuru' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnEvtGuiMainFrame(void) {
   /* TSnEvtGuiMainFrame */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame));
   G__memfunc_setup("GetListOfSignals",1602,G__G__sigproc_664_0_1, 85, G__get_linked_tagnum(&G__G__sigprocLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__G__sigproc_664_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - sig C - - 10 - cl "
"Y - - 0 - rcvr C - - 10 - slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disconnect",1034,G__G__sigproc_664_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' sig Y - - 0 '0' rcvr "
"C - - 10 '0' slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HighPriority",1250,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LowPriority",1172,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EmitVA",550,G__G__sigproc_664_0_6, 121, -1, -1, 0, 2, 8, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - nargs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - signal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal C - - 10 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal L - 'Long_t' 0 - paramArr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal d - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal l - 'Long_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal n - 'Long64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal m - 'ULong64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal g - 'Bool_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal c - 'Char_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal b - 'UChar_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal s - 'Short_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal r - 'UShort_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal h - 'UInt_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal k - 'ULong_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_664_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal f - 'Float_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Destroyed",947,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ChangedBy",869,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - method", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Message",709,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - msg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnEvtGuiMainFrame",1753,G__G__sigproc_664_0_26, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnEvtGuiMainFrame",1753,G__G__sigproc_664_0_27, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnEvtGuiMainFrame), -1, 0, 4, 1, 1, 0, 
"U 'TTree' - 0 - tree U 'TFile' - 0 - pfile "
"h - 'UInt_t' 10 '800' w h - 'UInt_t' 10 '600' h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseWindow",1134,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ChangeWaveChans",1478,G__G__sigproc_664_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - btn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RedrawWaveCanv",1408,G__G__sigproc_664_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeWaveType",1403,G__G__sigproc_664_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeEvtNum",1189,G__G__sigproc_664_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeEntryNum",1416,G__G__sigproc_664_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IncrementEvent",1447,G__G__sigproc_664_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeTab",861,G__G__sigproc_664_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelMiscPlot",1103,G__G__sigproc_664_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - nm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_664_0_37, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnEvtGuiMainFrame::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_664_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvtGuiMainFrame::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_664_0_39, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnEvtGuiMainFrame::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_664_0_40, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnEvtGuiMainFrame::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_664_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_664_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvtGuiMainFrame::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_664_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEvtGuiMainFrame::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_664_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvtGuiMainFrame::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_664_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEvtGuiMainFrame::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnEvtGuiMainFrame", 1879, G__G__sigproc_664_0_49, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnGCanvasSaveDialog(void) {
   /* TSnGCanvasSaveDialog */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnGCanvasSaveDialog));
   G__memfunc_setup("GetListOfSignals",1602,G__G__sigproc_675_0_1, 85, G__get_linked_tagnum(&G__G__sigprocLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__G__sigproc_675_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - sig C - - 10 - cl "
"Y - - 0 - rcvr C - - 10 - slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disconnect",1034,G__G__sigproc_675_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' sig Y - - 0 '0' rcvr "
"C - - 10 '0' slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HighPriority",1250,G__G__sigproc_675_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LowPriority",1172,G__G__sigproc_675_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EmitVA",550,G__G__sigproc_675_0_6, 121, -1, -1, 0, 2, 8, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - nargs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - signal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal C - - 10 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal L - 'Long_t' 0 - paramArr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal d - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal l - 'Long_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal n - 'Long64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal m - 'ULong64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal g - 'Bool_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal c - 'Char_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal b - 'UChar_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal s - 'Short_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal r - 'UShort_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal h - 'UInt_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal k - 'ULong_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__sigproc_675_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal f - 'Float_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Destroyed",947,G__G__sigproc_675_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangedBy",869,G__G__sigproc_675_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Message",709,G__G__sigproc_675_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - msg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CanvExtensionKnown",1874,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 4, 0, "u 'TString' - 11 - fn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrySaveCanv",1110,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 4, 0, 
"u 'TString' - 11 - fn u 'TCanvas' - 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnGCanvasSaveDialog",1943,G__G__sigproc_675_0_28, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnGCanvasSaveDialog), -1, 0, 2, 1, 1, 0, 
"U 'TRootEmbeddedCanvas' - 10 '0' canv U 'TGWindow' - 10 '0' parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_675_0_29, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnGCanvasSaveDialog::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_675_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnGCanvasSaveDialog::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_675_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnGCanvasSaveDialog::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_675_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnGCanvasSaveDialog::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_675_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_675_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnGCanvasSaveDialog::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_675_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnGCanvasSaveDialog::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_675_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnGCanvasSaveDialog::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_675_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnGCanvasSaveDialog::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnGCanvasSaveDialog", 2069, G__G__sigproc_675_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnRejectBadVoltTimesMod(void) {
   /* TSnRejectBadVoltTimesMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnRejectBadVoltTimesMod",2368,G__G__sigproc_685_0_3, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnRejectBadVoltTimesMod",2368,G__G__sigproc_685_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_685_0_5, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnRejectBadVoltTimesMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_685_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRejectBadVoltTimesMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_685_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnRejectBadVoltTimesMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_685_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnRejectBadVoltTimesMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_685_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_685_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRejectBadVoltTimesMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_685_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnRejectBadVoltTimesMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_685_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRejectBadVoltTimesMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_685_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnRejectBadVoltTimesMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnRejectBadVoltTimesMod", 2368, G__G__sigproc_685_0_17, (int) ('i'), 
G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod), -1, 0, 1, 1, 1, 0, "u 'TSnRejectBadVoltTimesMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnRejectBadVoltTimesMod", 2494, G__G__sigproc_685_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_685_0_19, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnRejectBadVoltTimesMod), -1, 1, 1, 1, 1, 0, "u 'TSnRejectBadVoltTimesMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnPlotPowerReadingsMod(void) {
   /* TSnPlotPowerReadingsMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnPlotPowerReadingsMod",2318,G__G__sigproc_686_0_3, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnPlotPowerReadingsMod",2318,G__G__sigproc_686_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVoltName",1094,G__G__sigproc_686_0_5, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrName",1085,G__G__sigproc_686_0_6, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVoltName",1106,G__G__sigproc_686_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrName",1097,G__G__sigproc_686_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_686_0_9, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnPlotPowerReadingsMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_686_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPlotPowerReadingsMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_686_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnPlotPowerReadingsMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_686_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnPlotPowerReadingsMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_686_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_686_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPlotPowerReadingsMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_686_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPlotPowerReadingsMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_686_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPlotPowerReadingsMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_686_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPlotPowerReadingsMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnPlotPowerReadingsMod", 2318, G__G__sigproc_686_0_21, (int) ('i'), 
G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod), -1, 0, 1, 1, 1, 0, "u 'TSnPlotPowerReadingsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnPlotPowerReadingsMod", 2444, G__G__sigproc_686_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_686_0_23, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotPowerReadingsMod), -1, 1, 1, 1, 1, 0, "u 'TSnPlotPowerReadingsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnPlotAdcDists(void) {
   /* TSnPlotAdcDists */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists));
   G__memfunc_setup("NormalizeTimeColumns",2081,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TH2' - 1 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnPlotAdcDists",1475,G__G__sigproc_687_0_5, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnPlotAdcDists",1475,G__G__sigproc_687_0_6, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists), -1, 0, 6, 1, 1, 0, 
"C - 'Char_t' 10 - name i - 'Int_t' 10 - ntbins "
"d - 'Double_t' 10 - tmin d - 'Double_t' 10 - tmax "
"C - 'Char_t' 10 - plottag C - 'Char_t' 10 - plotlbl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlotTag",987,G__G__sigproc_687_0_7, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlotLbl",985,G__G__sigproc_687_0_8, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNtimeBins",1193,G__G__sigproc_687_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeMin",979,G__G__sigproc_687_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeMax",981,G__G__sigproc_687_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRawAdcBins",1324,G__G__sigproc_687_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawAdcMin",1142,G__G__sigproc_687_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawAdcMax",1144,G__G__sigproc_687_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNFpnSubBins",1352,G__G__sigproc_687_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpnSubMin",1170,G__G__sigproc_687_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFpnSubMax",1172,G__G__sigproc_687_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNFracBins",1142,G__G__sigproc_687_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFracMin",960,G__G__sigproc_687_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFracMax",962,G__G__sigproc_687_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLowFreqCut",1292,G__G__sigproc_687_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMakingFpnSubPlots",1907,G__G__sigproc_687_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsNormalizingTimeBins",2145,G__G__sigproc_687_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMakingSamplePlots",1927,G__G__sigproc_687_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPlotTag",999,G__G__sigproc_687_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPlotLbl",997,G__G__sigproc_687_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNtimeBins",1205,G__G__sigproc_687_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - nb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeMin",991,G__G__sigproc_687_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeMax",993,G__G__sigproc_687_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNRawAdcBins",1336,G__G__sigproc_687_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawAdcMin",1154,G__G__sigproc_687_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawAdcMax",1156,G__G__sigproc_687_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNFpnSubBins",1364,G__G__sigproc_687_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFpnSubMin",1182,G__G__sigproc_687_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFpnSubMax",1184,G__G__sigproc_687_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLowFreqCut",1304,G__G__sigproc_687_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMakeFpnSubPlots",1802,G__G__sigproc_687_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNormalizeTimeBins",2040,G__G__sigproc_687_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMakeSamplePlots",1822,G__G__sigproc_687_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvtsPerBinName",1667,G__G__sigproc_687_0_40, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotAdcDists::GetEvtsPerBinName) ), 0);
   G__memfunc_setup("GetRawAdc",850,G__G__sigproc_687_0_41, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotAdcDists::GetRawAdc) ), 0);
   G__memfunc_setup("GetRawAdcVsT",1135,G__G__sigproc_687_0_42, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotAdcDists::GetRawAdcVsT) ), 0);
   G__memfunc_setup("GetFpnSub",878,G__G__sigproc_687_0_43, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotAdcDists::GetFpnSub) ), 0);
   G__memfunc_setup("GetFpnSubVsT",1163,G__G__sigproc_687_0_44, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotAdcDists::GetFpnSubVsT) ), 0);
   G__memfunc_setup("GetFpnSubFftVsT",1451,G__G__sigproc_687_0_45, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotAdcDists::GetFpnSubFftVsT) ), 0);
   G__memfunc_setup("GetFpnSubMaxFrqVsT",1754,G__G__sigproc_687_0_46, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotAdcDists::GetFpnSubMaxFrqVsT) ), 0);
   G__memfunc_setup("GetFpnSubLowPwrVsT",1782,G__G__sigproc_687_0_47, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotAdcDists::GetFpnSubLowPwrVsT) ), 0);
   G__memfunc_setup("GetRawAdcSmp",1154,G__G__sigproc_687_0_48, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotAdcDists::GetRawAdcSmp) ), 0);
   G__memfunc_setup("GetRawAdcSmpVsT",1439,G__G__sigproc_687_0_49, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotAdcDists::GetRawAdcSmpVsT) ), 0);
   G__memfunc_setup("GetFpnSubSmp",1182,G__G__sigproc_687_0_50, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotAdcDists::GetFpnSubSmp) ), 0);
   G__memfunc_setup("GetFpnSubSmpVsT",1467,G__G__sigproc_687_0_51, 67, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Char_t* (*)())(&TSnPlotAdcDists::GetFpnSubSmpVsT) ), 0);
   G__memfunc_setup("Class",502,G__G__sigproc_687_0_52, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnPlotAdcDists::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_687_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPlotAdcDists::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_687_0_54, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnPlotAdcDists::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_687_0_55, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnPlotAdcDists::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_687_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_687_0_60, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPlotAdcDists::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_687_0_61, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPlotAdcDists::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_687_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPlotAdcDists::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_687_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPlotAdcDists::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnPlotAdcDists", 1475, G__G__sigproc_687_0_64, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists), -1, 0, 1, 1, 1, 0, "u 'TSnPlotAdcDists' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnPlotAdcDists", 1601, G__G__sigproc_687_0_65, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_687_0_66, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnPlotAdcDists), -1, 1, 1, 1, 1, 0, "u 'TSnPlotAdcDists' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnCalDatModule(void) {
   /* TSnCalDatModule */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule));
   G__memfunc_setup("TSnCalDatModule",1444,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnCalDatModule",1444,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule), -1, 0, 2, 1, 2, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReqCalData",946,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"C - 'Char_t' 10 - bname U 'TSnCalWvData' - 1 - address", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadCalData",1034,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "C - 'Char_t' 10 - bname", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsFpnSubOrAmpOutBr",1749,G__G__sigproc_689_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - bname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTreeBranch",1178,G__G__sigproc_689_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - bname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseIsFpnSubOrAmpOutBr",2350,G__G__sigproc_689_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseIsTreeBranch",1779,G__G__sigproc_689_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_689_0_9, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnCalDatModule::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_689_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalDatModule::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_689_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnCalDatModule::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_689_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnCalDatModule::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_689_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_689_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalDatModule::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_689_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalDatModule::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_689_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalDatModule::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_689_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalDatModule::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnCalDatModule", 1444, G__G__sigproc_689_0_21, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule), -1, 0, 1, 1, 1, 0, "u 'TSnCalDatModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnCalDatModule", 1570, G__G__sigproc_689_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_689_0_23, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModule), -1, 1, 1, 1, 1, 0, "u 'TSnCalDatModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnCalDatModulecLcLAdrWrap_t(void) {
   /* TSnCalDatModule::AdrWrap_t */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModulecLcLAdrWrap_t));
   G__memfunc_setup("AdrWrap_t",900,G__G__sigproc_690_0_1, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModulecLcLAdrWrap_t), -1, 0, 1, 1, 1, 0, "U 'TSnCalWvData' - 2 '0' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_690_0_2, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnCalDatModule::AdrWrap_t::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_690_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalDatModule::AdrWrap_t::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_690_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnCalDatModule::AdrWrap_t::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_690_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnCalDatModule::AdrWrap_t::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_690_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_690_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalDatModule::AdrWrap_t::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_690_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalDatModule::AdrWrap_t::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_690_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalDatModule::AdrWrap_t::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_690_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalDatModule::AdrWrap_t::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AdrWrap_t", 900, G__G__sigproc_690_0_14, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModulecLcLAdrWrap_t), -1, 0, 1, 1, 1, 0, "u 'TSnCalDatModule::AdrWrap_t' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AdrWrap_t", 1026, G__G__sigproc_690_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_690_0_16, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnCalDatModulecLcLAdrWrap_t), -1, 1, 1, 1, 1, 0, "u 'TSnCalDatModule::AdrWrap_t' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnFilterWaveformMod(void) {
   /* TSnFilterWaveformMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnFilterWaveformMod",2018,G__G__sigproc_692_0_3, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnFilterWaveformMod",2018,G__G__sigproc_692_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - datBrNm "
"C - 'Char_t' 10 - fltDtNm u 'TF1' - 11 - filter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFilter",902,G__G__sigproc_692_0_5, 85, G__get_linked_tagnum(&G__G__sigprocLN_TF1), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFilter",902,G__G__sigproc_692_0_6, 85, G__get_linked_tagnum(&G__G__sigprocLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataBrName",1231,G__G__sigproc_692_0_7, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFltDatName",1248,G__G__sigproc_692_0_8, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFilter",914,G__G__sigproc_692_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TF1' - 11 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDataBrName",1243,G__G__sigproc_692_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFltDatName",1260,G__G__sigproc_692_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_692_0_12, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnFilterWaveformMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_692_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFilterWaveformMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_692_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnFilterWaveformMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_692_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnFilterWaveformMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_692_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_692_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFilterWaveformMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_692_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFilterWaveformMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_692_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFilterWaveformMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_692_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFilterWaveformMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnFilterWaveformMod", 2018, G__G__sigproc_692_0_24, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod), -1, 0, 1, 1, 1, 0, "u 'TSnFilterWaveformMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnFilterWaveformMod", 2144, G__G__sigproc_692_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_692_0_26, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnFilterWaveformMod), -1, 1, 1, 1, 1, 0, "u 'TSnFilterWaveformMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnStopFindRms(void) {
   /* TSnStopFindRms */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms));
   G__memfunc_setup("GetRmsInStop",1199,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 4, 8, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - startSample "
"b - 'UChar_t' 10 - smpwid f - 'Float_t' 1 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindStopInRange",1483,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 4, 8, 
"u 'TSnStopPosnSet' - 1 - stops f - 'Float_t' 1 - minAveRms "
"b - 'UChar_t' 10 - chan b - 'UChar_t' 10 - beginSmp "
"b - 'UChar_t' 10 - endSmp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindStopByRms",1300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TSnStopPosnSet' - 1 - stops", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnStopFindRms",1390,G__G__sigproc_694_0_6, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnStopFindRms",1390,G__G__sigproc_694_0_7, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms), -1, 0, 6, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - datBrNm "
"r - 'UShort_t' 10 '3' jitter C - 'Char_t' 10 '\"StopPositions\"' stopNm "
"r - 'UShort_t' 10 '6' stopWid r - 'UShort_t' 10 '4' searchWid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataBranchName",1641,G__G__sigproc_694_0_8, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStopPosnName",1511,G__G__sigproc_694_0_9, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStopWidth",1222,G__G__sigproc_694_0_10, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSearchWidth",1398,G__G__sigproc_694_0_11, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxJitter",1208,G__G__sigproc_694_0_12, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDataBranchName",1653,G__G__sigproc_694_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStopPosnName",1523,G__G__sigproc_694_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStopWidth",1234,G__G__sigproc_694_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSearchWidth",1410,G__G__sigproc_694_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxJitter",1220,G__G__sigproc_694_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_694_0_18, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnStopFindRms::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_694_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnStopFindRms::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_694_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnStopFindRms::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_694_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnStopFindRms::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_694_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_694_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnStopFindRms::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_694_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnStopFindRms::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_694_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnStopFindRms::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_694_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnStopFindRms::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnStopFindRms", 1390, G__G__sigproc_694_0_30, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms), -1, 0, 1, 1, 1, 0, "u 'TSnStopFindRms' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnStopFindRms", 1516, G__G__sigproc_694_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_694_0_32, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnStopFindRms), -1, 1, 1, 1, 1, 0, "u 'TSnStopFindRms' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnShiftCalWvDataMod(void) {
   /* TSnShiftCalWvDataMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnShiftCalWvDataMod",1930,G__G__sigproc_695_0_3, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnShiftCalWvDataMod",1930,G__G__sigproc_695_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - dataBrNm "
"C - 'Char_t' 10 - shiftNm C - 'Char_t' 10 '\"StopPositions\"' stopNm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataBranchName",1641,G__G__sigproc_695_0_5, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStopPosnName",1511,G__G__sigproc_695_0_6, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShiftedDataName",1762,G__G__sigproc_695_0_7, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDataBranchName",1653,G__G__sigproc_695_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStopPosnName",1523,G__G__sigproc_695_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetShiftedDataName",1774,G__G__sigproc_695_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_695_0_11, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnShiftCalWvDataMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_695_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnShiftCalWvDataMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_695_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnShiftCalWvDataMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_695_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnShiftCalWvDataMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_695_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_695_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnShiftCalWvDataMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_695_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnShiftCalWvDataMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_695_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnShiftCalWvDataMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_695_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnShiftCalWvDataMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnShiftCalWvDataMod", 1930, G__G__sigproc_695_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod), -1, 0, 1, 1, 1, 0, "u 'TSnShiftCalWvDataMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnShiftCalWvDataMod", 2056, G__G__sigproc_695_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_695_0_25, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnShiftCalWvDataMod), -1, 1, 1, 1, 1, 0, "u 'TSnShiftCalWvDataMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnMakeShiftTree(void) {
   /* TSnMakeShiftTree */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree));
   G__memfunc_setup("GetSplitSafeBrNm",1562,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 1, 1, 4, 8, "u 'TString' - 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SlaveTerminate",1444,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnMakeShiftTree",1569,G__G__sigproc_696_0_5, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnMakeShiftTree",1569,G__G__sigproc_696_0_6, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree), -1, 0, 8, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - treeName "
"C - 'Char_t' 10 - treeTitle C - 'Char_t' 10 - dataNm "
"C - 'Char_t' 10 - shiftNm C - 'Char_t' 10 '\"StopPositions\"' stopNm "
"i - 'Int_t' 10 '262144' bufsz i - 'Int_t' 10 '1' split", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_696_0_7, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnMakeShiftTree::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_696_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnMakeShiftTree::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_696_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnMakeShiftTree::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_696_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnMakeShiftTree::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_696_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_696_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnMakeShiftTree::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_696_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnMakeShiftTree::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_696_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnMakeShiftTree::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_696_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnMakeShiftTree::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnMakeShiftTree", 1569, G__G__sigproc_696_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree), -1, 0, 1, 1, 1, 0, "u 'TSnMakeShiftTree' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnMakeShiftTree", 1695, G__G__sigproc_696_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_696_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnMakeShiftTree), -1, 1, 1, 1, 1, 0, "u 'TSnMakeShiftTree' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnPruneBadEvtsMod(void) {
   /* TSnPruneBadEvtsMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnPruneBadEvtsMod",1768,G__G__sigproc_697_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnPruneBadEvtsMod",1768,G__G__sigproc_697_0_5, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_697_0_6, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnPruneBadEvtsMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_697_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPruneBadEvtsMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_697_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnPruneBadEvtsMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_697_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnPruneBadEvtsMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_697_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_697_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPruneBadEvtsMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_697_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPruneBadEvtsMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_697_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPruneBadEvtsMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_697_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPruneBadEvtsMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnPruneBadEvtsMod", 1768, G__G__sigproc_697_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod), -1, 0, 1, 1, 1, 0, "u 'TSnPruneBadEvtsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnPruneBadEvtsMod", 1894, G__G__sigproc_697_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_697_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnPruneBadEvtsMod), -1, 1, 1, 1, 1, 0, "u 'TSnPruneBadEvtsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnFFTCalcMod(void) {
   /* TSnFFTCalcMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnFFTCalcMod",1160,G__G__sigproc_699_0_3, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnFFTCalcMod",1160,G__G__sigproc_699_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - datBrNm "
"C - 'Char_t' 10 - fftNm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataBranchName",1641,G__G__sigproc_699_0_5, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFFTName",897,G__G__sigproc_699_0_6, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDataBranchName",1653,G__G__sigproc_699_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFFTName",909,G__G__sigproc_699_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_699_0_9, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnFFTCalcMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_699_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFFTCalcMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_699_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnFFTCalcMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_699_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnFFTCalcMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_699_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_699_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFFTCalcMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_699_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFFTCalcMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_699_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFFTCalcMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_699_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFFTCalcMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnFFTCalcMod", 1160, G__G__sigproc_699_0_21, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod), -1, 0, 1, 1, 1, 0, "u 'TSnFFTCalcMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnFFTCalcMod", 1286, G__G__sigproc_699_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_699_0_23, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnFFTCalcMod), -1, 1, 1, 1, 1, 0, "u 'TSnFFTCalcMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnFindWaveformEnvelopeMod(void) {
   /* TSnFindWaveformEnvelopeMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod));
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnFindWaveformEnvelopeMod",2619,G__G__sigproc_700_0_3, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnFindWaveformEnvelopeMod",2619,G__G__sigproc_700_0_4, 105, G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - datBrNm "
"C - 'Char_t' 10 - envDtNm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataBrName",1231,G__G__sigproc_700_0_5, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnvDatName",1251,G__G__sigproc_700_0_6, 117, G__get_linked_tagnum(&G__G__sigprocLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDataBrName",1243,G__G__sigproc_700_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnvDatName",1263,G__G__sigproc_700_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigproc_700_0_9, 85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnFindWaveformEnvelopeMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigproc_700_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFindWaveformEnvelopeMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigproc_700_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnFindWaveformEnvelopeMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigproc_700_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnFindWaveformEnvelopeMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigproc_700_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigproc_700_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFindWaveformEnvelopeMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigproc_700_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFindWaveformEnvelopeMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigproc_700_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFindWaveformEnvelopeMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigproc_700_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFindWaveformEnvelopeMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnFindWaveformEnvelopeMod", 2619, G__G__sigproc_700_0_21, (int) ('i'), 
G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod), -1, 0, 1, 1, 1, 0, "u 'TSnFindWaveformEnvelopeMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnFindWaveformEnvelopeMod", 2745, G__G__sigproc_700_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigproc_700_0_23, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod), -1, 1, 1, 1, 1, 0, "u 'TSnFindWaveformEnvelopeMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__sigproc() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__sigproc() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__sigproc() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__sigprocLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnDAQConfig = { "TSnDAQConfig" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnRunInfo = { "TSnRunInfo" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnNetAdrSet = { "TSnNetAdrSet" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnCompMbed = { "TSnCompMbed" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnEvent = { "TSnEvent" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnPowerReading = { "TSnPowerReading" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnHeartbeat = { "TSnHeartbeat" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnClockSetInfo = { "TSnClockSetInfo" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnEventMetadata = { "TSnEventMetadata" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnRawTreeMaker = { "TSnRawTreeMaker" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__sigprocLN_TTask = { "TTask" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_THashTable = { "THashTable" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR = { "vector<TAMBranchInfo::BranchPtr_t*,allocator<TAMBranchInfo::BranchPtr_t*> >" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TAMBranchInfo::BranchPtr_t*,allocator<TAMBranchInfo::BranchPtr_t*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TAModule = { "TAModule" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR = { "vector<TIterator*,allocator<TIterator*> >" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TIterator*,allocator<TIterator*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnTrgInfo = { "TSnTrgInfo" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnEventHeader = { "TSnEventHeader" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnRawWaveform = { "TSnRawWaveform" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnBasicEvtSelMod = { "TSnBasicEvtSelMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TTimeStamp = { "TTimeStamp" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnRejectBadClocksMod = { "TSnRejectBadClocksMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnRejectEarlyEvtsMod = { "TSnRejectEarlyEvtsMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnFPNCalibSet = { "TSnFPNCalibSet" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnFPNCalcMod = { "TSnFPNCalcMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnFPNSubMod = { "TSnFPNSubMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnDualGainCalibSet = { "TSnDualGainCalibSet" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnCalWvData = { "TSnCalWvData" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnDigitizerCalibMod = { "TSnDigitizerCalibMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnSaveCalibDataMod = { "TSnSaveCalibDataMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnCalcAbsTimeMod = { "TSnCalcAbsTimeMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TParameterlEboolgR = { "TParameter<bool>" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnFindTimeLimitsMod = { "TSnFindTimeLimitsMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TParameterlEdoublegR = { "TParameter<double>" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnFindEvtNumLimitsMod = { "TSnFindEvtNumLimitsMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TParameterlEunsignedsPintgR = { "TParameter<unsigned int>" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TParameterlEunsignedsPintgRcLcLEStatusBits = { "TParameter<unsigned int>::EStatusBits" , 101 , -1 };
G__linked_taginfo G__G__sigprocLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnPlotEvtRateMod = { "TSnPlotEvtRateMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_pairlEunsignedsPintcOdoublegR = { "pair<unsigned int,double>" , 115 , -1 };
G__linked_taginfo G__G__sigprocLN_vectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgR = { "vector<pair<unsigned int,double>,allocator<pair<unsigned int,double> > >" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,double>,allocator<pair<unsigned int,double> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnPlotWaveformsMod = { "TSnPlotWaveformsMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGObject = { "TGObject" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TQObject = { "TQObject" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TQObjSender = { "TQObjSender" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGWindow = { "TGWindow" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__G__sigprocLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGFrame = { "TGFrame" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGCompositeFrame = { "TGCompositeFrame" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGTextButton = { "TGTextButton" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGVerticalFrame = { "TGVerticalFrame" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGHorizontalFrame = { "TGHorizontalFrame" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGMainFrame = { "TGMainFrame" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TRootEmbeddedCanvas = { "TRootEmbeddedCanvas" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnEvtGuiCanvFrame = { "TSnEvtGuiCanvFrame" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnEvtGuiCanvFramecLcLEButtonIds = { "TSnEvtGuiCanvFrame::EButtonIds" , 101 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnEvtGuiSeleFrame = { "TSnEvtGuiSeleFrame" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnEvtGuiDataGuru = { "TSnEvtGuiDataGuru" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnEvtGuiMainFrame = { "TSnEvtGuiMainFrame" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGCheckButton = { "TGCheckButton" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGRadioButton = { "TGRadioButton" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGButtonGroup = { "TGButtonGroup" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGLabel = { "TGLabel" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGNumberEntry = { "TGNumberEntry" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGTab = { "TGTab" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TGComboBox = { "TGComboBox" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds = { "TSnEvtGuiSeleFrame::EButtonIds" , 101 , -1 };
G__linked_taginfo G__G__sigprocLN_TGFileDialog = { "TGFileDialog" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnGCanvasSaveDialog = { "TSnGCanvasSaveDialog" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR = { "vector<TH1*,allocator<TH1*> >" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH1*,allocator<TH1*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnRejectBadVoltTimesMod = { "TSnRejectBadVoltTimesMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnPlotPowerReadingsMod = { "TSnPlotPowerReadingsMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnPlotAdcDists = { "TSnPlotAdcDists" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TMap = { "TMap" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnCalDatModule = { "TSnCalDatModule" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnCalDatModulecLcLAdrWrap_t = { "TSnCalDatModule::AdrWrap_t" , 115 , -1 };
G__linked_taginfo G__G__sigprocLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnFilterWaveformMod = { "TSnFilterWaveformMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnStopPosnSet = { "TSnStopPosnSet" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnStopFindRms = { "TSnStopFindRms" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnShiftCalWvDataMod = { "TSnShiftCalWvDataMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnMakeShiftTree = { "TSnMakeShiftTree" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnPruneBadEvtsMod = { "TSnPruneBadEvtsMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnFFTCalcMod = { "TSnFFTCalcMod" , 99 , -1 };
G__linked_taginfo G__G__sigprocLN_TSnFindWaveformEnvelopeMod = { "TSnFindWaveformEnvelopeMod" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__sigproc() {
  G__G__sigprocLN_TClass.tagnum = -1 ;
  G__G__sigprocLN_TBuffer.tagnum = -1 ;
  G__G__sigprocLN_TMemberInspector.tagnum = -1 ;
  G__G__sigprocLN_TObject.tagnum = -1 ;
  G__G__sigprocLN_TNamed.tagnum = -1 ;
  G__G__sigprocLN_TCollection.tagnum = -1 ;
  G__G__sigprocLN_TString.tagnum = -1 ;
  G__G__sigprocLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__G__sigprocLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__sigprocLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__sigprocLN_TList.tagnum = -1 ;
  G__G__sigprocLN_TObjArray.tagnum = -1 ;
  G__G__sigprocLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__sigprocLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__sigprocLN_TFile.tagnum = -1 ;
  G__G__sigprocLN_TTree.tagnum = -1 ;
  G__G__sigprocLN_TSnDAQConfig.tagnum = -1 ;
  G__G__sigprocLN_TSnRunInfo.tagnum = -1 ;
  G__G__sigprocLN_TSnNetAdrSet.tagnum = -1 ;
  G__G__sigprocLN_TSnCompMbed.tagnum = -1 ;
  G__G__sigprocLN_TSnEvent.tagnum = -1 ;
  G__G__sigprocLN_TSnPowerReading.tagnum = -1 ;
  G__G__sigprocLN_TSnHeartbeat.tagnum = -1 ;
  G__G__sigprocLN_TSnClockSetInfo.tagnum = -1 ;
  G__G__sigprocLN_TSnEventMetadata.tagnum = -1 ;
  G__G__sigprocLN_TSnRawTreeMaker.tagnum = -1 ;
  G__G__sigprocLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__sigprocLN_TTask.tagnum = -1 ;
  G__G__sigprocLN_THashTable.tagnum = -1 ;
  G__G__sigprocLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR.tagnum = -1 ;
  G__G__sigprocLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__sigprocLN_TBranch.tagnum = -1 ;
  G__G__sigprocLN_TAModule.tagnum = -1 ;
  G__G__sigprocLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__sigprocLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR.tagnum = -1 ;
  G__G__sigprocLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__sigprocLN_TSnTrgInfo.tagnum = -1 ;
  G__G__sigprocLN_TSnEventHeader.tagnum = -1 ;
  G__G__sigprocLN_TSnRawWaveform.tagnum = -1 ;
  G__G__sigprocLN_TSnBasicEvtSelMod.tagnum = -1 ;
  G__G__sigprocLN_TTimeStamp.tagnum = -1 ;
  G__G__sigprocLN_TSnRejectBadClocksMod.tagnum = -1 ;
  G__G__sigprocLN_TSnRejectEarlyEvtsMod.tagnum = -1 ;
  G__G__sigprocLN_TH2.tagnum = -1 ;
  G__G__sigprocLN_TSnFPNCalibSet.tagnum = -1 ;
  G__G__sigprocLN_TSnFPNCalcMod.tagnum = -1 ;
  G__G__sigprocLN_TSnFPNSubMod.tagnum = -1 ;
  G__G__sigprocLN_TSnDualGainCalibSet.tagnum = -1 ;
  G__G__sigprocLN_TSnCalWvData.tagnum = -1 ;
  G__G__sigprocLN_TSnDigitizerCalibMod.tagnum = -1 ;
  G__G__sigprocLN_TSnSaveCalibDataMod.tagnum = -1 ;
  G__G__sigprocLN_TSnCalcAbsTimeMod.tagnum = -1 ;
  G__G__sigprocLN_TCanvas.tagnum = -1 ;
  G__G__sigprocLN_TParameterlEboolgR.tagnum = -1 ;
  G__G__sigprocLN_TSnFindTimeLimitsMod.tagnum = -1 ;
  G__G__sigprocLN_TParameterlEdoublegR.tagnum = -1 ;
  G__G__sigprocLN_TSnFindEvtNumLimitsMod.tagnum = -1 ;
  G__G__sigprocLN_TParameterlEunsignedsPintgR.tagnum = -1 ;
  G__G__sigprocLN_TParameterlEunsignedsPintgRcLcLEStatusBits.tagnum = -1 ;
  G__G__sigprocLN_TGraph.tagnum = -1 ;
  G__G__sigprocLN_TGraphErrors.tagnum = -1 ;
  G__G__sigprocLN_TH1F.tagnum = -1 ;
  G__G__sigprocLN_TH2F.tagnum = -1 ;
  G__G__sigprocLN_TSnPlotEvtRateMod.tagnum = -1 ;
  G__G__sigprocLN_pairlEunsignedsPintcOdoublegR.tagnum = -1 ;
  G__G__sigprocLN_vectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__G__sigprocLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__sigprocLN_TSnPlotWaveformsMod.tagnum = -1 ;
  G__G__sigprocLN_TGObject.tagnum = -1 ;
  G__G__sigprocLN_TQObject.tagnum = -1 ;
  G__G__sigprocLN_TQObjSender.tagnum = -1 ;
  G__G__sigprocLN_TGWindow.tagnum = -1 ;
  G__G__sigprocLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__G__sigprocLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__G__sigprocLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__sigprocLN_TGFrame.tagnum = -1 ;
  G__G__sigprocLN_TGCompositeFrame.tagnum = -1 ;
  G__G__sigprocLN_TGTextButton.tagnum = -1 ;
  G__G__sigprocLN_TGVerticalFrame.tagnum = -1 ;
  G__G__sigprocLN_TGHorizontalFrame.tagnum = -1 ;
  G__G__sigprocLN_TGMainFrame.tagnum = -1 ;
  G__G__sigprocLN_TRootEmbeddedCanvas.tagnum = -1 ;
  G__G__sigprocLN_TSnEvtGuiCanvFrame.tagnum = -1 ;
  G__G__sigprocLN_TSnEvtGuiCanvFramecLcLEButtonIds.tagnum = -1 ;
  G__G__sigprocLN_TSnEvtGuiSeleFrame.tagnum = -1 ;
  G__G__sigprocLN_TSnEvtGuiDataGuru.tagnum = -1 ;
  G__G__sigprocLN_TSnEvtGuiMainFrame.tagnum = -1 ;
  G__G__sigprocLN_TGCheckButton.tagnum = -1 ;
  G__G__sigprocLN_TGRadioButton.tagnum = -1 ;
  G__G__sigprocLN_TGButtonGroup.tagnum = -1 ;
  G__G__sigprocLN_TGLabel.tagnum = -1 ;
  G__G__sigprocLN_TGNumberEntry.tagnum = -1 ;
  G__G__sigprocLN_TGTab.tagnum = -1 ;
  G__G__sigprocLN_TGComboBox.tagnum = -1 ;
  G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds.tagnum = -1 ;
  G__G__sigprocLN_TGFileDialog.tagnum = -1 ;
  G__G__sigprocLN_TSnGCanvasSaveDialog.tagnum = -1 ;
  G__G__sigprocLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__G__sigprocLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__sigprocLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR.tagnum = -1 ;
  G__G__sigprocLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__sigprocLN_TSnRejectBadVoltTimesMod.tagnum = -1 ;
  G__G__sigprocLN_TSnPlotPowerReadingsMod.tagnum = -1 ;
  G__G__sigprocLN_TSnPlotAdcDists.tagnum = -1 ;
  G__G__sigprocLN_TMap.tagnum = -1 ;
  G__G__sigprocLN_TSnCalDatModule.tagnum = -1 ;
  G__G__sigprocLN_TSnCalDatModulecLcLAdrWrap_t.tagnum = -1 ;
  G__G__sigprocLN_TF1.tagnum = -1 ;
  G__G__sigprocLN_TSnFilterWaveformMod.tagnum = -1 ;
  G__G__sigprocLN_TSnStopPosnSet.tagnum = -1 ;
  G__G__sigprocLN_TSnStopFindRms.tagnum = -1 ;
  G__G__sigprocLN_TSnShiftCalWvDataMod.tagnum = -1 ;
  G__G__sigprocLN_TSnMakeShiftTree.tagnum = -1 ;
  G__G__sigprocLN_TSnPruneBadEvtsMod.tagnum = -1 ;
  G__G__sigprocLN_TSnFFTCalcMod.tagnum = -1 ;
  G__G__sigprocLN_TSnFindWaveformEnvelopeMod.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__sigproc() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TCollection);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TString);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TList);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TFile);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TTree);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnDAQConfig);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnRunInfo);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnNetAdrSet);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnCompMbed);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnEvent);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnPowerReading);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnHeartbeat);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnClockSetInfo);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnEventMetadata);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnRawTreeMaker),sizeof(TSnRawTreeMaker),-1,324864,"make a run tree from a raw data file",G__setup_memvarTSnRawTreeMaker,G__setup_memfuncTSnRawTreeMaker);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TTask);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_THashTable);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TBranch);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TAModule);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnTrgInfo);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnEventHeader);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnRawWaveform);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnBasicEvtSelMod),sizeof(TSnBasicEvtSelMod),-1,324864,"select events by checking CRC and trigger bits",G__setup_memvarTSnBasicEvtSelMod,G__setup_memfuncTSnBasicEvtSelMod);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TTimeStamp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnRejectBadClocksMod),sizeof(TSnRejectBadClocksMod),-1,324864,"reject events with unreasonable times",G__setup_memvarTSnRejectBadClocksMod,G__setup_memfuncTSnRejectBadClocksMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnRejectEarlyEvtsMod),sizeof(TSnRejectEarlyEvtsMod),-1,324864,"reject event(s) too close to the trigger start",G__setup_memvarTSnRejectEarlyEvtsMod,G__setup_memfuncTSnRejectEarlyEvtsMod);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TH2);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnFPNCalibSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnFPNCalcMod),sizeof(TSnFPNCalcMod),-1,324864,"module to calculate FPN from raw data",G__setup_memvarTSnFPNCalcMod,G__setup_memfuncTSnFPNCalcMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnFPNSubMod),sizeof(TSnFPNSubMod),-1,324864,"subtract FPN from raw data",G__setup_memvarTSnFPNSubMod,G__setup_memfuncTSnFPNSubMod);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnDualGainCalibSet);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnCalWvData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnDigitizerCalibMod),sizeof(TSnDigitizerCalibMod),-1,324864,"apply gain corrections to pedestal subtracted data",G__setup_memvarTSnDigitizerCalibMod,G__setup_memfuncTSnDigitizerCalibMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnSaveCalibDataMod),sizeof(TSnSaveCalibDataMod),-1,324864,"module to save FPN subtracted and/or fully calibrated data. should NOT be run under Proof",G__setup_memvarTSnSaveCalibDataMod,G__setup_memfuncTSnSaveCalibDataMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnCalcAbsTimeMod),sizeof(TSnCalcAbsTimeMod),-1,324864,"calculate the absolute time of an event. requires a TAMObjLoader for the trigger clock start",G__setup_memvarTSnCalcAbsTimeMod,G__setup_memfuncTSnCalcAbsTimeMod);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TParameterlEboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnFindTimeLimitsMod),sizeof(TSnFindTimeLimitsMod),-1,324864,"module to find the min/max times of all events",G__setup_memvarTSnFindTimeLimitsMod,G__setup_memfuncTSnFindTimeLimitsMod);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TParameterlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnFindEvtNumLimitsMod),sizeof(TSnFindEvtNumLimitsMod),-1,324864,"find the min/max event number",G__setup_memvarTSnFindEvtNumLimitsMod,G__setup_memfuncTSnFindEvtNumLimitsMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TParameterlEunsignedsPintgR),sizeof(TParameter<unsigned int>),-1,324864,"Named templated parameter type",G__setup_memvarTParameterlEunsignedsPintgR,G__setup_memfuncTParameterlEunsignedsPintgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TParameterlEunsignedsPintgRcLcLEStatusBits);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGraph);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGraphErrors);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TH1F);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TH2F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnPlotEvtRateMod),sizeof(TSnPlotEvtRateMod),-1,324864,"make event rate and dt plots (no evt sel)",G__setup_memvarTSnPlotEvtRateMod,G__setup_memfuncTSnPlotEvtRateMod);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_pairlEunsignedsPintcOdoublegR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_vectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOdoublegRcOallocatorlEpairlEunsignedsPintcOdoublegRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnPlotWaveformsMod),sizeof(TSnPlotWaveformsMod),-1,324864,"make waveform plots",G__setup_memvarTSnPlotWaveformsMod,G__setup_memfuncTSnPlotWaveformsMod);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGObject);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TQObject);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TQObjSender);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGWindow);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGFrame);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGCompositeFrame);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGTextButton);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGVerticalFrame);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGHorizontalFrame);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGMainFrame);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TRootEmbeddedCanvas);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnEvtGuiCanvFrame),sizeof(TSnEvtGuiCanvFrame),-1,324864,"contains the canvases in the event gui",G__setup_memvarTSnEvtGuiCanvFrame,G__setup_memfuncTSnEvtGuiCanvFrame);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnEvtGuiCanvFramecLcLEButtonIds);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnEvtGuiSeleFrame),sizeof(TSnEvtGuiSeleFrame),-1,324864,"contains the selection stuff in the event gui",G__setup_memvarTSnEvtGuiSeleFrame,G__setup_memfuncTSnEvtGuiSeleFrame);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnEvtGuiDataGuru),sizeof(TSnEvtGuiDataGuru),-1,324864,"manage the data and send plots to the gui",G__setup_memvarTSnEvtGuiDataGuru,G__setup_memfuncTSnEvtGuiDataGuru);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnEvtGuiMainFrame),sizeof(TSnEvtGuiMainFrame),-1,324864,"main event gui window",G__setup_memvarTSnEvtGuiMainFrame,G__setup_memfuncTSnEvtGuiMainFrame);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGCheckButton);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGRadioButton);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGButtonGroup);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGLabel);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGNumberEntry);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGTab);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGComboBox);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnEvtGuiSeleFramecLcLEButtonIds);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TGFileDialog);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnGCanvasSaveDialog),sizeof(TSnGCanvasSaveDialog),-1,292096,"a dialog box for saving TGCanvases",G__setup_memvarTSnGCanvasSaveDialog,G__setup_memfuncTSnGCanvasSaveDialog);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnRejectBadVoltTimesMod),sizeof(TSnRejectBadVoltTimesMod),-1,324864,"reject power readings with unreasonable times",G__setup_memvarTSnRejectBadVoltTimesMod,G__setup_memfuncTSnRejectBadVoltTimesMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnPlotPowerReadingsMod),sizeof(TSnPlotPowerReadingsMod),-1,324864,"make volt/curr plots",G__setup_memvarTSnPlotPowerReadingsMod,G__setup_memfuncTSnPlotPowerReadingsMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnPlotAdcDists),sizeof(TSnPlotAdcDists),-1,324864,"make diagnostic ADC distributions",G__setup_memvarTSnPlotAdcDists,G__setup_memfuncTSnPlotAdcDists);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnCalDatModule),sizeof(TSnCalDatModule),-1,324864,"base class for modules wanting to load calibrated (fpn sub, gain cal or processed data)",G__setup_memvarTSnCalDatModule,G__setup_memfuncTSnCalDatModule);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnCalDatModulecLcLAdrWrap_t),sizeof(TSnCalDatModule::AdrWrap_t),-1,292096,"wrapper for a pointer to a pointer to a TSnCalWvData",G__setup_memvarTSnCalDatModulecLcLAdrWrap_t,G__setup_memfuncTSnCalDatModulecLcLAdrWrap_t);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TF1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnFilterWaveformMod),sizeof(TSnFilterWaveformMod),-1,324864,"pass the fpn sub or amp out waveforms through a filter",G__setup_memvarTSnFilterWaveformMod,G__setup_memfuncTSnFilterWaveformMod);
   G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnStopPosnSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnStopFindRms),sizeof(TSnStopFindRms),-1,324864,"try to find the stop by looking for low RMS in known slot locations",G__setup_memvarTSnStopFindRms,G__setup_memfuncTSnStopFindRms);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnShiftCalWvDataMod),sizeof(TSnShiftCalWvDataMod),-1,324864,"shift a calib wvfm using stop positions found in the event",G__setup_memvarTSnShiftCalWvDataMod,G__setup_memfuncTSnShiftCalWvDataMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnMakeShiftTree),sizeof(TSnMakeShiftTree),-1,324864,"make a tree storing an event, stop positions and shifted waveforms",G__setup_memvarTSnMakeShiftTree,G__setup_memfuncTSnMakeShiftTree);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnPruneBadEvtsMod),sizeof(TSnPruneBadEvtsMod),-1,324864,(char*)NULL,G__setup_memvarTSnPruneBadEvtsMod,G__setup_memfuncTSnPruneBadEvtsMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnFFTCalcMod),sizeof(TSnFFTCalcMod),-1,324864,"module to calculate FFTs for each chan and add them to the event",G__setup_memvarTSnFFTCalcMod,G__setup_memfuncTSnFFTCalcMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocLN_TSnFindWaveformEnvelopeMod),sizeof(TSnFindWaveformEnvelopeMod),-1,324864,"find the envelope of a waveform and add it to the event",G__setup_memvarTSnFindWaveformEnvelopeMod,G__setup_memfuncTSnFindWaveformEnvelopeMod);
}
extern "C" void G__cpp_setupG__sigproc(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__sigproc()");
  G__set_cpp_environmentG__sigproc();
  G__cpp_setup_tagtableG__sigproc();

  G__cpp_setup_inheritanceG__sigproc();

  G__cpp_setup_typetableG__sigproc();

  G__cpp_setup_memvarG__sigproc();

  G__cpp_setup_memfuncG__sigproc();
  G__cpp_setup_globalG__sigproc();
  G__cpp_setup_funcG__sigproc();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__sigproc();
  return;
}
class G__cpp_setup_initG__sigproc {
  public:
    G__cpp_setup_initG__sigproc() { G__add_setup_func("G__sigproc",(G__incsetup)(&G__cpp_setupG__sigproc)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__sigproc() { G__remove_setup_func("G__sigproc"); }
};
G__cpp_setup_initG__sigproc G__cpp_setup_initializerG__sigproc;

