//
// File generated by /data/users/jtatar/Software/root/bin/rootcint at Mon Mar 24 20:10:12 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME tamdIG__tam
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__tam.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TAMVirtualBranchLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TAMVirtualBranchLoader(void *p = 0);
   static void *newArray_TAMVirtualBranchLoader(Long_t size, void *p);
   static void delete_TAMVirtualBranchLoader(void *p);
   static void deleteArray_TAMVirtualBranchLoader(void *p);
   static void destruct_TAMVirtualBranchLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAMVirtualBranchLoader*)
   {
      ::TAMVirtualBranchLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAMVirtualBranchLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAMVirtualBranchLoader", ::TAMVirtualBranchLoader::Class_Version(), "include/TAMVirtualBranchLoader.h", 20,
                  typeid(::TAMVirtualBranchLoader), DefineBehavior(ptr, ptr),
                  &::TAMVirtualBranchLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TAMVirtualBranchLoader) );
      instance.SetNew(&new_TAMVirtualBranchLoader);
      instance.SetNewArray(&newArray_TAMVirtualBranchLoader);
      instance.SetDelete(&delete_TAMVirtualBranchLoader);
      instance.SetDeleteArray(&deleteArray_TAMVirtualBranchLoader);
      instance.SetDestructor(&destruct_TAMVirtualBranchLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAMVirtualBranchLoader*)
   {
      return GenerateInitInstanceLocal((::TAMVirtualBranchLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAMVirtualBranchLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TAMBranchInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TAMBranchInfo(void *p = 0);
   static void *newArray_TAMBranchInfo(Long_t size, void *p);
   static void delete_TAMBranchInfo(void *p);
   static void deleteArray_TAMBranchInfo(void *p);
   static void destruct_TAMBranchInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAMBranchInfo*)
   {
      ::TAMBranchInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAMBranchInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAMBranchInfo", ::TAMBranchInfo::Class_Version(), "./tam/TAMBranchInfo.h", 30,
                  typeid(::TAMBranchInfo), DefineBehavior(ptr, ptr),
                  &::TAMBranchInfo::Dictionary, isa_proxy, 4,
                  sizeof(::TAMBranchInfo) );
      instance.SetNew(&new_TAMBranchInfo);
      instance.SetNewArray(&newArray_TAMBranchInfo);
      instance.SetDelete(&delete_TAMBranchInfo);
      instance.SetDeleteArray(&deleteArray_TAMBranchInfo);
      instance.SetDestructor(&destruct_TAMBranchInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAMBranchInfo*)
   {
      return GenerateInitInstanceLocal((::TAMBranchInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAMBranchInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TAMObjBranchLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TAMObjBranchLoader(void *p = 0);
   static void *newArray_TAMObjBranchLoader(Long_t size, void *p);
   static void delete_TAMObjBranchLoader(void *p);
   static void deleteArray_TAMObjBranchLoader(void *p);
   static void destruct_TAMObjBranchLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAMObjBranchLoader*)
   {
      ::TAMObjBranchLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAMObjBranchLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAMObjBranchLoader", ::TAMObjBranchLoader::Class_Version(), "./tam/TAMObjBranchLoader.h", 9,
                  typeid(::TAMObjBranchLoader), DefineBehavior(ptr, ptr),
                  &::TAMObjBranchLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TAMObjBranchLoader) );
      instance.SetNew(&new_TAMObjBranchLoader);
      instance.SetNewArray(&newArray_TAMObjBranchLoader);
      instance.SetDelete(&delete_TAMObjBranchLoader);
      instance.SetDeleteArray(&deleteArray_TAMObjBranchLoader);
      instance.SetDestructor(&destruct_TAMObjBranchLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAMObjBranchLoader*)
   {
      return GenerateInitInstanceLocal((::TAMObjBranchLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAMObjBranchLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TAMVirtualLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TAMVirtualLoader(void *p);
   static void deleteArray_TAMVirtualLoader(void *p);
   static void destruct_TAMVirtualLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAMVirtualLoader*)
   {
      ::TAMVirtualLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAMVirtualLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAMVirtualLoader", ::TAMVirtualLoader::Class_Version(), "./tam/TAMVirtualLoader.h", 19,
                  typeid(::TAMVirtualLoader), DefineBehavior(ptr, ptr),
                  &::TAMVirtualLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TAMVirtualLoader) );
      instance.SetDelete(&delete_TAMVirtualLoader);
      instance.SetDeleteArray(&deleteArray_TAMVirtualLoader);
      instance.SetDestructor(&destruct_TAMVirtualLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAMVirtualLoader*)
   {
      return GenerateInitInstanceLocal((::TAMVirtualLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAMVirtualLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TAMObjLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TAMObjLoader(void *p = 0);
   static void *newArray_TAMObjLoader(Long_t size, void *p);
   static void delete_TAMObjLoader(void *p);
   static void deleteArray_TAMObjLoader(void *p);
   static void destruct_TAMObjLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAMObjLoader*)
   {
      ::TAMObjLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAMObjLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAMObjLoader", ::TAMObjLoader::Class_Version(), "./tam/TAMObjLoader.h", 11,
                  typeid(::TAMObjLoader), DefineBehavior(ptr, ptr),
                  &::TAMObjLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TAMObjLoader) );
      instance.SetNew(&new_TAMObjLoader);
      instance.SetNewArray(&newArray_TAMObjLoader);
      instance.SetDelete(&delete_TAMObjLoader);
      instance.SetDeleteArray(&deleteArray_TAMObjLoader);
      instance.SetDestructor(&destruct_TAMObjLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAMObjLoader*)
   {
      return GenerateInitInstanceLocal((::TAMObjLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAMObjLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TAModule_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TAModule(void *p = 0);
   static void *newArray_TAModule(Long_t size, void *p);
   static void delete_TAModule(void *p);
   static void deleteArray_TAModule(void *p);
   static void destruct_TAModule(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAModule*)
   {
      ::TAModule *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAModule >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAModule", ::TAModule::Class_Version(), "./tam/TAModule.h", 33,
                  typeid(::TAModule), DefineBehavior(ptr, ptr),
                  &::TAModule::Dictionary, isa_proxy, 4,
                  sizeof(::TAModule) );
      instance.SetNew(&new_TAModule);
      instance.SetNewArray(&newArray_TAModule);
      instance.SetDelete(&delete_TAModule);
      instance.SetDeleteArray(&deleteArray_TAModule);
      instance.SetDestructor(&destruct_TAModule);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAModule*)
   {
      return GenerateInitInstanceLocal((::TAModule*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAModule*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TAMOutput_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TAMOutput(void *p = 0);
   static void *newArray_TAMOutput(Long_t size, void *p);
   static void delete_TAMOutput(void *p);
   static void deleteArray_TAMOutput(void *p);
   static void destruct_TAMOutput(void *p);
   static Long64_t merge_TAMOutput(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAMOutput*)
   {
      ::TAMOutput *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAMOutput >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAMOutput", ::TAMOutput::Class_Version(), "./tam/TAMOutput.h", 40,
                  typeid(::TAMOutput), DefineBehavior(ptr, ptr),
                  &::TAMOutput::Dictionary, isa_proxy, 4,
                  sizeof(::TAMOutput) );
      instance.SetNew(&new_TAMOutput);
      instance.SetNewArray(&newArray_TAMOutput);
      instance.SetDelete(&delete_TAMOutput);
      instance.SetDeleteArray(&deleteArray_TAMOutput);
      instance.SetDestructor(&destruct_TAMOutput);
      instance.SetMerge(&merge_TAMOutput);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAMOutput*)
   {
      return GenerateInitInstanceLocal((::TAMOutput*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAMOutput*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TAMSelector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TAMSelector(void *p = 0);
   static void *newArray_TAMSelector(Long_t size, void *p);
   static void delete_TAMSelector(void *p);
   static void deleteArray_TAMSelector(void *p);
   static void destruct_TAMSelector(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAMSelector*)
   {
      ::TAMSelector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAMSelector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAMSelector", ::TAMSelector::Class_Version(), "./tam/TAMSelector.h", 39,
                  typeid(::TAMSelector), DefineBehavior(ptr, ptr),
                  &::TAMSelector::Dictionary, isa_proxy, 4,
                  sizeof(::TAMSelector) );
      instance.SetNew(&new_TAMSelector);
      instance.SetNewArray(&newArray_TAMSelector);
      instance.SetDelete(&delete_TAMSelector);
      instance.SetDeleteArray(&deleteArray_TAMSelector);
      instance.SetDestructor(&destruct_TAMSelector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAMSelector*)
   {
      return GenerateInitInstanceLocal((::TAMSelector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAMSelector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TAMOutputcLcLTAMModInspector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TAMOutputcLcLTAMModInspector(void *p = 0);
   static void *newArray_TAMOutputcLcLTAMModInspector(Long_t size, void *p);
   static void delete_TAMOutputcLcLTAMModInspector(void *p);
   static void deleteArray_TAMOutputcLcLTAMModInspector(void *p);
   static void destruct_TAMOutputcLcLTAMModInspector(void *p);
   static void streamer_TAMOutputcLcLTAMModInspector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAMOutput::TAMModInspector*)
   {
      ::TAMOutput::TAMModInspector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAMOutput::TAMModInspector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAMOutput::TAMModInspector", ::TAMOutput::TAMModInspector::Class_Version(), "./tam/TAMOutput.h", 45,
                  typeid(::TAMOutput::TAMModInspector), DefineBehavior(ptr, ptr),
                  &::TAMOutput::TAMModInspector::Dictionary, isa_proxy, 1,
                  sizeof(::TAMOutput::TAMModInspector) );
      instance.SetNew(&new_TAMOutputcLcLTAMModInspector);
      instance.SetNewArray(&newArray_TAMOutputcLcLTAMModInspector);
      instance.SetDelete(&delete_TAMOutputcLcLTAMModInspector);
      instance.SetDeleteArray(&deleteArray_TAMOutputcLcLTAMModInspector);
      instance.SetDestructor(&destruct_TAMOutputcLcLTAMModInspector);
      instance.SetStreamerFunc(&streamer_TAMOutputcLcLTAMModInspector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAMOutput::TAMModInspector*)
   {
      return GenerateInitInstanceLocal((::TAMOutput::TAMModInspector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAMOutput::TAMModInspector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TAMOutputcLcLTAMModInspectorcLcLTAMModMember_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TAMOutputcLcLTAMModInspectorcLcLTAMModMember(void *p = 0);
   static void *newArray_TAMOutputcLcLTAMModInspectorcLcLTAMModMember(Long_t size, void *p);
   static void delete_TAMOutputcLcLTAMModInspectorcLcLTAMModMember(void *p);
   static void deleteArray_TAMOutputcLcLTAMModInspectorcLcLTAMModMember(void *p);
   static void destruct_TAMOutputcLcLTAMModInspectorcLcLTAMModMember(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAMOutput::TAMModInspector::TAMModMember*)
   {
      ::TAMOutput::TAMModInspector::TAMModMember *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAMOutput::TAMModInspector::TAMModMember >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAMOutput::TAMModInspector::TAMModMember", ::TAMOutput::TAMModInspector::TAMModMember::Class_Version(), "./tam/TAMOutput.h", 46,
                  typeid(::TAMOutput::TAMModInspector::TAMModMember), DefineBehavior(ptr, ptr),
                  &::TAMOutput::TAMModInspector::TAMModMember::Dictionary, isa_proxy, 4,
                  sizeof(::TAMOutput::TAMModInspector::TAMModMember) );
      instance.SetNew(&new_TAMOutputcLcLTAMModInspectorcLcLTAMModMember);
      instance.SetNewArray(&newArray_TAMOutputcLcLTAMModInspectorcLcLTAMModMember);
      instance.SetDelete(&delete_TAMOutputcLcLTAMModInspectorcLcLTAMModMember);
      instance.SetDeleteArray(&deleteArray_TAMOutputcLcLTAMModInspectorcLcLTAMModMember);
      instance.SetDestructor(&destruct_TAMOutputcLcLTAMModInspectorcLcLTAMModMember);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAMOutput::TAMModInspector::TAMModMember*)
   {
      return GenerateInitInstanceLocal((::TAMOutput::TAMModInspector::TAMModMember*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAMOutput::TAMModInspector::TAMModMember*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TAMTreeBranchLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TAMTreeBranchLoader(void *p = 0);
   static void *newArray_TAMTreeBranchLoader(Long_t size, void *p);
   static void delete_TAMTreeBranchLoader(void *p);
   static void deleteArray_TAMTreeBranchLoader(void *p);
   static void destruct_TAMTreeBranchLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAMTreeBranchLoader*)
   {
      ::TAMTreeBranchLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAMTreeBranchLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAMTreeBranchLoader", ::TAMTreeBranchLoader::Class_Version(), "./tam/TAMTreeBranchLoader.h", 22,
                  typeid(::TAMTreeBranchLoader), DefineBehavior(ptr, ptr),
                  &::TAMTreeBranchLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TAMTreeBranchLoader) );
      instance.SetNew(&new_TAMTreeBranchLoader);
      instance.SetNewArray(&newArray_TAMTreeBranchLoader);
      instance.SetDelete(&delete_TAMTreeBranchLoader);
      instance.SetDeleteArray(&deleteArray_TAMTreeBranchLoader);
      instance.SetDestructor(&destruct_TAMTreeBranchLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAMTreeBranchLoader*)
   {
      return GenerateInitInstanceLocal((::TAMTreeBranchLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAMTreeBranchLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TAMTreeLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TAMTreeLoader(void *p = 0);
   static void *newArray_TAMTreeLoader(Long_t size, void *p);
   static void delete_TAMTreeLoader(void *p);
   static void deleteArray_TAMTreeLoader(void *p);
   static void destruct_TAMTreeLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAMTreeLoader*)
   {
      ::TAMTreeLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAMTreeLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAMTreeLoader", ::TAMTreeLoader::Class_Version(), "./tam/TAMTreeLoader.h", 18,
                  typeid(::TAMTreeLoader), DefineBehavior(ptr, ptr),
                  &::TAMTreeLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TAMTreeLoader) );
      instance.SetNew(&new_TAMTreeLoader);
      instance.SetNewArray(&newArray_TAMTreeLoader);
      instance.SetDelete(&delete_TAMTreeLoader);
      instance.SetDeleteArray(&deleteArray_TAMTreeLoader);
      instance.SetDestructor(&destruct_TAMTreeLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAMTreeLoader*)
   {
      return GenerateInitInstanceLocal((::TAMTreeLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAMTreeLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TAMVirtualBranchLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAMVirtualBranchLoader::Class_Name()
{
   return "TAMVirtualBranchLoader";
}

//______________________________________________________________________________
const char *TAMVirtualBranchLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMVirtualBranchLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAMVirtualBranchLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMVirtualBranchLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAMVirtualBranchLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMVirtualBranchLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAMVirtualBranchLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMVirtualBranchLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TAMBranchInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAMBranchInfo::Class_Name()
{
   return "TAMBranchInfo";
}

//______________________________________________________________________________
const char *TAMBranchInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMBranchInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAMBranchInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMBranchInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAMBranchInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMBranchInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAMBranchInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMBranchInfo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TAMObjBranchLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAMObjBranchLoader::Class_Name()
{
   return "TAMObjBranchLoader";
}

//______________________________________________________________________________
const char *TAMObjBranchLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMObjBranchLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAMObjBranchLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMObjBranchLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAMObjBranchLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMObjBranchLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAMObjBranchLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMObjBranchLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TAMVirtualLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAMVirtualLoader::Class_Name()
{
   return "TAMVirtualLoader";
}

//______________________________________________________________________________
const char *TAMVirtualLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMVirtualLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAMVirtualLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMVirtualLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAMVirtualLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMVirtualLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAMVirtualLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMVirtualLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TAMObjLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAMObjLoader::Class_Name()
{
   return "TAMObjLoader";
}

//______________________________________________________________________________
const char *TAMObjLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMObjLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAMObjLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMObjLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAMObjLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMObjLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAMObjLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMObjLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TAModule::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAModule::Class_Name()
{
   return "TAModule";
}

//______________________________________________________________________________
const char *TAModule::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAModule*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAModule::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAModule*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAModule::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAModule*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAModule::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAModule*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TAMOutput::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAMOutput::Class_Name()
{
   return "TAMOutput";
}

//______________________________________________________________________________
const char *TAMOutput::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMOutput*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAMOutput::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMOutput*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAMOutput::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMOutput*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAMOutput::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMOutput*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TAMSelector::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAMSelector::Class_Name()
{
   return "TAMSelector";
}

//______________________________________________________________________________
const char *TAMSelector::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMSelector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAMSelector::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMSelector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAMSelector::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMSelector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAMSelector::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMSelector*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TAMOutput::TAMModInspector::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAMOutput::TAMModInspector::Class_Name()
{
   return "TAMOutput::TAMModInspector";
}

//______________________________________________________________________________
const char *TAMOutput::TAMModInspector::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMOutput::TAMModInspector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAMOutput::TAMModInspector::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMOutput::TAMModInspector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAMOutput::TAMModInspector::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMOutput::TAMModInspector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAMOutput::TAMModInspector::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMOutput::TAMModInspector*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TAMOutput::TAMModInspector::TAMModMember::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAMOutput::TAMModInspector::TAMModMember::Class_Name()
{
   return "TAMOutput::TAMModInspector::TAMModMember";
}

//______________________________________________________________________________
const char *TAMOutput::TAMModInspector::TAMModMember::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMOutput::TAMModInspector::TAMModMember*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAMOutput::TAMModInspector::TAMModMember::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMOutput::TAMModInspector::TAMModMember*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAMOutput::TAMModInspector::TAMModMember::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMOutput::TAMModInspector::TAMModMember*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAMOutput::TAMModInspector::TAMModMember::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMOutput::TAMModInspector::TAMModMember*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TAMTreeBranchLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAMTreeBranchLoader::Class_Name()
{
   return "TAMTreeBranchLoader";
}

//______________________________________________________________________________
const char *TAMTreeBranchLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMTreeBranchLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAMTreeBranchLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMTreeBranchLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAMTreeBranchLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMTreeBranchLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAMTreeBranchLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMTreeBranchLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TAMTreeLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAMTreeLoader::Class_Name()
{
   return "TAMTreeLoader";
}

//______________________________________________________________________________
const char *TAMTreeLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMTreeLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAMTreeLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAMTreeLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAMTreeLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMTreeLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAMTreeLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAMTreeLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TAMVirtualBranchLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TAMVirtualBranchLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TAMVirtualBranchLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TAMVirtualBranchLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TAMVirtualBranchLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TAMVirtualBranchLoader.
      TClass *R__cl = ::TAMVirtualBranchLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBInfo", &fBInfo);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TAMVirtualBranchLoader(void *p) {
      return  p ? new(p) ::TAMVirtualBranchLoader : new ::TAMVirtualBranchLoader;
   }
   static void *newArray_TAMVirtualBranchLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TAMVirtualBranchLoader[nElements] : new ::TAMVirtualBranchLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TAMVirtualBranchLoader(void *p) {
      delete ((::TAMVirtualBranchLoader*)p);
   }
   static void deleteArray_TAMVirtualBranchLoader(void *p) {
      delete [] ((::TAMVirtualBranchLoader*)p);
   }
   static void destruct_TAMVirtualBranchLoader(void *p) {
      typedef ::TAMVirtualBranchLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TAMVirtualBranchLoader

//______________________________________________________________________________
void TAMBranchInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class TAMBranchInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TAMBranchInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(TAMBranchInfo::Class(),this);
   }
}

//______________________________________________________________________________
void TAMBranchInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TAMBranchInfo.
      TClass *R__cl = ::TAMBranchInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLoaded", &fIsLoaded);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLoader", &fLoader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsrAddresses", (void*)&fUsrAddresses);
      R__insp.InspectMember("vector<BranchPtr_t*>", (void*)&fUsrAddresses, "fUsrAddresses.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TAMBranchInfo(void *p) {
      return  p ? new(p) ::TAMBranchInfo : new ::TAMBranchInfo;
   }
   static void *newArray_TAMBranchInfo(Long_t nElements, void *p) {
      return p ? new(p) ::TAMBranchInfo[nElements] : new ::TAMBranchInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_TAMBranchInfo(void *p) {
      delete ((::TAMBranchInfo*)p);
   }
   static void deleteArray_TAMBranchInfo(void *p) {
      delete [] ((::TAMBranchInfo*)p);
   }
   static void destruct_TAMBranchInfo(void *p) {
      typedef ::TAMBranchInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TAMBranchInfo

//______________________________________________________________________________
void TAMObjBranchLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TAMObjBranchLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TAMObjBranchLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TAMObjBranchLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TAMObjBranchLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TAMObjBranchLoader.
      TClass *R__cl = ::TAMObjBranchLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fObj", &fObj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRequireObj", &fRequireObj);
      TAMVirtualBranchLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TAMObjBranchLoader(void *p) {
      return  p ? new(p) ::TAMObjBranchLoader : new ::TAMObjBranchLoader;
   }
   static void *newArray_TAMObjBranchLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TAMObjBranchLoader[nElements] : new ::TAMObjBranchLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TAMObjBranchLoader(void *p) {
      delete ((::TAMObjBranchLoader*)p);
   }
   static void deleteArray_TAMObjBranchLoader(void *p) {
      delete [] ((::TAMObjBranchLoader*)p);
   }
   static void destruct_TAMObjBranchLoader(void *p) {
      typedef ::TAMObjBranchLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TAMObjBranchLoader

//______________________________________________________________________________
void TAMVirtualLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TAMVirtualLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TAMVirtualLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TAMVirtualLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TAMVirtualLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TAMVirtualLoader.
      TClass *R__cl = ::TAMVirtualLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TAMVirtualLoader(void *p) {
      delete ((::TAMVirtualLoader*)p);
   }
   static void deleteArray_TAMVirtualLoader(void *p) {
      delete [] ((::TAMVirtualLoader*)p);
   }
   static void destruct_TAMVirtualLoader(void *p) {
      typedef ::TAMVirtualLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TAMVirtualLoader

//______________________________________________________________________________
void TAMObjLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TAMObjLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TAMObjLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TAMObjLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TAMObjLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TAMObjLoader.
      TClass *R__cl = ::TAMObjLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fObjName", &fObjName);
      R__insp.InspectMember(fObjName, "fObjName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRequireObj", &fRequireObj);
      TAMVirtualLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TAMObjLoader(void *p) {
      return  p ? new(p) ::TAMObjLoader : new ::TAMObjLoader;
   }
   static void *newArray_TAMObjLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TAMObjLoader[nElements] : new ::TAMObjLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TAMObjLoader(void *p) {
      delete ((::TAMObjLoader*)p);
   }
   static void deleteArray_TAMObjLoader(void *p) {
      delete [] ((::TAMObjLoader*)p);
   }
   static void destruct_TAMObjLoader(void *p) {
      typedef ::TAMObjLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TAMObjLoader

//______________________________________________________________________________
void TAModule::Streamer(TBuffer &R__b)
{
   // Stream an object of class TAModule.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TAModule::Class(),this);
   } else {
      R__b.WriteClassBuffer(TAModule::Class(),this);
   }
}

//______________________________________________________________________________
void TAModule::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TAModule.
      TClass *R__cl = ::TAModule::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSelector", &fSelector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutput", &fOutput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDefActv", &fDefActv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerbose", &fVerbose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStopped", &fStopped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseName", &fUseName);
      TTask::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TAModule(void *p) {
      return  p ? new(p) ::TAModule : new ::TAModule;
   }
   static void *newArray_TAModule(Long_t nElements, void *p) {
      return p ? new(p) ::TAModule[nElements] : new ::TAModule[nElements];
   }
   // Wrapper around operator delete
   static void delete_TAModule(void *p) {
      delete ((::TAModule*)p);
   }
   static void deleteArray_TAModule(void *p) {
      delete [] ((::TAModule*)p);
   }
   static void destruct_TAModule(void *p) {
      typedef ::TAModule current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TAModule

//______________________________________________________________________________
void TAMOutput::Streamer(TBuffer &R__b)
{
   // Stream an object of class TAMOutput.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TAMOutput::Class(),this);
   } else {
      R__b.WriteClassBuffer(TAMOutput::Class(),this);
   }
}

//______________________________________________________________________________
void TAMOutput::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TAMOutput.
      TClass *R__cl = ::TAMOutput::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInspector", &fInspector);
      R__insp.InspectMember(fInspector, "fInspector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutput", &fOutput);
      R__insp.InspectMember(fOutput, "fOutput.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurOutput", &fCurOutput);
      R__insp.InspectMember(fCurOutput, "fCurOutput.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMod", &fMod);
      TList::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TAMOutput(void *p) {
      return  p ? new(p) ::TAMOutput : new ::TAMOutput;
   }
   static void *newArray_TAMOutput(Long_t nElements, void *p) {
      return p ? new(p) ::TAMOutput[nElements] : new ::TAMOutput[nElements];
   }
   // Wrapper around operator delete
   static void delete_TAMOutput(void *p) {
      delete ((::TAMOutput*)p);
   }
   static void deleteArray_TAMOutput(void *p) {
      delete [] ((::TAMOutput*)p);
   }
   static void destruct_TAMOutput(void *p) {
      typedef ::TAMOutput current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_TAMOutput(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::TAMOutput*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::TAMOutput

//______________________________________________________________________________
void TAMSelector::Streamer(TBuffer &R__b)
{
   // Stream an object of class TAMSelector.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TAMSelector::Class(),this);
   } else {
      R__b.WriteClassBuffer(TAMSelector::Class(),this);
   }
}

//______________________________________________________________________________
void TAMSelector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TAMSelector.
      TClass *R__cl = ::TAMSelector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBranchTable", &fBranchTable);
      R__insp.InspectMember(fBranchTable, "fBranchTable.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventObjs", &fEventObjs);
      R__insp.InspectMember(fEventObjs, "fEventObjs.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAModules", &fAModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurEvt", &fCurEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOwnInput", &fOwnInput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAnalysisAborted", &fAnalysisAborted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModAborted", &fModAborted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventAborted", &fEventAborted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fActNotify", &fActNotify);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fObjCounter", &fObjCounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fObjCounterRun", &fObjCounterRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerbosity", &fVerbosity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProxy", (void*)&fProxy);
      R__insp.InspectMember("TAMSelector::BranchProxy", (void*)&fProxy, "fProxy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoProxy", &fDoProxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoObjTabClean", &fDoObjTabClean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fObjTabClean", &fObjTabClean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoaders", &fLoaders);
      R__insp.InspectMember(fLoaders, "fLoaders.");
      TSelector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TAMSelector(void *p) {
      return  p ? new(p) ::TAMSelector : new ::TAMSelector;
   }
   static void *newArray_TAMSelector(Long_t nElements, void *p) {
      return p ? new(p) ::TAMSelector[nElements] : new ::TAMSelector[nElements];
   }
   // Wrapper around operator delete
   static void delete_TAMSelector(void *p) {
      delete ((::TAMSelector*)p);
   }
   static void deleteArray_TAMSelector(void *p) {
      delete [] ((::TAMSelector*)p);
   }
   static void destruct_TAMSelector(void *p) {
      typedef ::TAMSelector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TAMSelector

//______________________________________________________________________________
void TAMOutput::TAMModInspector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TAMOutput::TAMModInspector.
      TClass *R__cl = ::TAMOutput::TAMModInspector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputMembers", &fOutputMembers);
      R__insp.InspectMember(fOutputMembers, "fOutputMembers.");
      TMemberInspector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TAMOutputcLcLTAMModInspector(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TAMOutput::TAMModInspector : new ::TAMOutput::TAMModInspector;
   }
   static void *newArray_TAMOutputcLcLTAMModInspector(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TAMOutput::TAMModInspector[nElements] : new ::TAMOutput::TAMModInspector[nElements];
   }
   // Wrapper around operator delete
   static void delete_TAMOutputcLcLTAMModInspector(void *p) {
      delete ((::TAMOutput::TAMModInspector*)p);
   }
   static void deleteArray_TAMOutputcLcLTAMModInspector(void *p) {
      delete [] ((::TAMOutput::TAMModInspector*)p);
   }
   static void destruct_TAMOutputcLcLTAMModInspector(void *p) {
      typedef ::TAMOutput::TAMModInspector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TAMOutputcLcLTAMModInspector(TBuffer &buf, void *obj) {
      ((::TAMOutput::TAMModInspector*)obj)->::TAMOutput::TAMModInspector::Streamer(buf);
   }
} // end of namespace ROOT for class ::TAMOutput::TAMModInspector

//______________________________________________________________________________
void TAMOutput::TAMModInspector::TAMModMember::Streamer(TBuffer &R__b)
{
   // Stream an object of class TAMOutput::TAMModInspector::TAMModMember.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TAMOutput::TAMModInspector::TAMModMember::Class(),this);
   } else {
      R__b.WriteClassBuffer(TAMOutput::TAMModInspector::TAMModMember::Class(),this);
   }
}

//______________________________________________________________________________
void TAMOutput::TAMModInspector::TAMModMember::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TAMOutput::TAMModInspector::TAMModMember.
      TClass *R__cl = ::TAMOutput::TAMModInspector::TAMModMember::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAddr", &fAddr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMClass", &fMClass);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TAMOutputcLcLTAMModInspectorcLcLTAMModMember(void *p) {
      return  p ? new(p) ::TAMOutput::TAMModInspector::TAMModMember : new ::TAMOutput::TAMModInspector::TAMModMember;
   }
   static void *newArray_TAMOutputcLcLTAMModInspectorcLcLTAMModMember(Long_t nElements, void *p) {
      return p ? new(p) ::TAMOutput::TAMModInspector::TAMModMember[nElements] : new ::TAMOutput::TAMModInspector::TAMModMember[nElements];
   }
   // Wrapper around operator delete
   static void delete_TAMOutputcLcLTAMModInspectorcLcLTAMModMember(void *p) {
      delete ((::TAMOutput::TAMModInspector::TAMModMember*)p);
   }
   static void deleteArray_TAMOutputcLcLTAMModInspectorcLcLTAMModMember(void *p) {
      delete [] ((::TAMOutput::TAMModInspector::TAMModMember*)p);
   }
   static void destruct_TAMOutputcLcLTAMModInspectorcLcLTAMModMember(void *p) {
      typedef ::TAMOutput::TAMModInspector::TAMModMember current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TAMOutput::TAMModInspector::TAMModMember

//______________________________________________________________________________
void TAMTreeBranchLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TAMTreeBranchLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TAMTreeBranchLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TAMTreeBranchLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TAMTreeBranchLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TAMTreeBranchLoader.
      TClass *R__cl = ::TAMTreeBranchLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBAddr", &fBAddr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsClass", &fIsClass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLeafSizeConst", &fLeafSizeConst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBranch", &fBranch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClass", &fClass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDataType", &fDataType);
      TAMVirtualBranchLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TAMTreeBranchLoader(void *p) {
      return  p ? new(p) ::TAMTreeBranchLoader : new ::TAMTreeBranchLoader;
   }
   static void *newArray_TAMTreeBranchLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TAMTreeBranchLoader[nElements] : new ::TAMTreeBranchLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TAMTreeBranchLoader(void *p) {
      delete ((::TAMTreeBranchLoader*)p);
   }
   static void deleteArray_TAMTreeBranchLoader(void *p) {
      delete [] ((::TAMTreeBranchLoader*)p);
   }
   static void destruct_TAMTreeBranchLoader(void *p) {
      typedef ::TAMTreeBranchLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TAMTreeBranchLoader

//______________________________________________________________________________
void TAMTreeLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TAMTreeLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TAMTreeLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TAMTreeLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TAMTreeLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TAMTreeLoader.
      TClass *R__cl = ::TAMTreeLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      TAMVirtualLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TAMTreeLoader(void *p) {
      return  p ? new(p) ::TAMTreeLoader : new ::TAMTreeLoader;
   }
   static void *newArray_TAMTreeLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TAMTreeLoader[nElements] : new ::TAMTreeLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TAMTreeLoader(void *p) {
      delete ((::TAMTreeLoader*)p);
   }
   static void deleteArray_TAMTreeLoader(void *p) {
      delete [] ((::TAMTreeLoader*)p);
   }
   static void destruct_TAMTreeLoader(void *p) {
      typedef ::TAMTreeLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TAMTreeLoader

/********************************************************
* tam/G__tam.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__tam();

extern "C" void G__set_cpp_environmentG__tam() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("tam/TAMBranchInfo.h");
  G__add_compiledheader("tam/TAMObjBranchLoader.h");
  G__add_compiledheader("tam/TAMObjLoader.h");
  G__add_compiledheader("tam/TAModule.h");
  G__add_compiledheader("tam/TAMOutput.h");
  G__add_compiledheader("tam/TAMSelector.h");
  G__add_compiledheader("tam/TAMTreeBranchLoader.h");
  G__add_compiledheader("tam/TAMTreeLoader.h");
  G__add_compiledheader("tam/TAMVirtualBranchLoader.h");
  G__add_compiledheader("tam/TAMVirtualLoader.h");
  G__cpp_reset_tagtableG__tam();
}
#include <new>
extern "C" int G__cpp_dllrevG__tam() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TAMVirtualBranchLoader */
static int G__G__tam_184_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMVirtualBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMVirtualBranchLoader[n];
     } else {
       p = new((void*) gvp) TAMVirtualBranchLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMVirtualBranchLoader;
     } else {
       p = new((void*) gvp) TAMVirtualBranchLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMVirtualBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TAMVirtualBranchLoader((TAMBranchInfo*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TAMVirtualBranchLoader((TAMBranchInfo*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const TAMVirtualBranchLoader*) G__getstructoffset())->GetAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMVirtualBranchLoader*) G__getstructoffset())->GetBInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAMVirtualBranchLoader*) G__getstructoffset())->GetBInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TAMVirtualBranchLoader*) G__getstructoffset())->GetEntry((Long64_t) G__Longlong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TAMVirtualBranchLoader*) G__getstructoffset())->Notify((TTree*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAMVirtualBranchLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMVirtualBranchLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAMVirtualBranchLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAMVirtualBranchLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMVirtualBranchLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMVirtualBranchLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMVirtualBranchLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMVirtualBranchLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_184_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMVirtualBranchLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__tam_184_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TAMVirtualBranchLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TAMVirtualBranchLoader(*(TAMVirtualBranchLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAMVirtualBranchLoader G__TTAMVirtualBranchLoader;
static int G__G__tam_184_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAMVirtualBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAMVirtualBranchLoader*) (soff+(sizeof(TAMVirtualBranchLoader)*i)))->~G__TTAMVirtualBranchLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAMVirtualBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAMVirtualBranchLoader*) (soff))->~G__TTAMVirtualBranchLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__tam_184_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMVirtualBranchLoader* dest = (TAMVirtualBranchLoader*) G__getstructoffset();
   *dest = *(TAMVirtualBranchLoader*) libp->para[0].ref;
   const TAMVirtualBranchLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TAMBranchInfo */
static int G__G__tam_185_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMBranchInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMBranchInfo((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TAMBranchInfo((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TAMBranchInfo[n];
       } else {
         p = new((void*) gvp) TAMBranchInfo[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TAMBranchInfo;
       } else {
         p = new((void*) gvp) TAMBranchInfo;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMBranchInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TAMBranchInfo*) G__getstructoffset())->GetEntry((Long64_t) G__Longlong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMBranchInfo*) G__getstructoffset())->GetLoader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAMBranchInfo*) G__getstructoffset())->GetLoader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const type_info& obj = ((const TAMBranchInfo*) G__getstructoffset())->GetType();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMBranchInfo*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TAMBranchInfo*) G__getstructoffset())->IsLoaded());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TAMBranchInfo*) G__getstructoffset())->Notify((TTree*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMBranchInfo*) G__getstructoffset())->SetUsrAddrs();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMBranchInfo*) G__getstructoffset())->SetLoader((TAMVirtualBranchLoader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMBranchInfo*) G__getstructoffset())->ZeroUsrAddrs();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAMBranchInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMBranchInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAMBranchInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAMBranchInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMBranchInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMBranchInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMBranchInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMBranchInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_185_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMBranchInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__tam_185_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TAMBranchInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TAMBranchInfo(*(TAMBranchInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMBranchInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAMBranchInfo G__TTAMBranchInfo;
static int G__G__tam_185_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAMBranchInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAMBranchInfo*) (soff+(sizeof(TAMBranchInfo)*i)))->~G__TTAMBranchInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAMBranchInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAMBranchInfo*) (soff))->~G__TTAMBranchInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__tam_185_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMBranchInfo* dest = (TAMBranchInfo*) G__getstructoffset();
   *dest = *(TAMBranchInfo*) libp->para[0].ref;
   const TAMBranchInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TAMObjBranchLoader */
static int G__G__tam_191_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMObjBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMObjBranchLoader[n];
     } else {
       p = new((void*) gvp) TAMObjBranchLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMObjBranchLoader;
     } else {
       p = new((void*) gvp) TAMObjBranchLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMObjBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_191_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMObjBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TAMObjBranchLoader((TAMBranchInfo*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TAMObjBranchLoader((TAMBranchInfo*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMObjBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TAMObjBranchLoader*) G__getstructoffset())->IsRequiringObj());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMObjBranchLoader*) G__getstructoffset())->SetRequireObj((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAMObjBranchLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_191_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMObjBranchLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_191_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAMObjBranchLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_191_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAMObjBranchLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_191_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMObjBranchLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_191_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMObjBranchLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_191_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMObjBranchLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_191_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMObjBranchLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_191_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMObjBranchLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__tam_191_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TAMObjBranchLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TAMObjBranchLoader(*(TAMObjBranchLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMObjBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAMObjBranchLoader G__TTAMObjBranchLoader;
static int G__G__tam_191_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAMObjBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAMObjBranchLoader*) (soff+(sizeof(TAMObjBranchLoader)*i)))->~G__TTAMObjBranchLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAMObjBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAMObjBranchLoader*) (soff))->~G__TTAMObjBranchLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__tam_191_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMObjBranchLoader* dest = (TAMObjBranchLoader*) G__getstructoffset();
   *dest = *(TAMObjBranchLoader*) libp->para[0].ref;
   const TAMObjBranchLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TAMVirtualLoader */
static int G__G__tam_192_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMVirtualLoader*) G__getstructoffset())->CreateBranchLoader((TTree*) G__int(libp->para[0]), (TAMBranchInfo*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_192_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAMVirtualLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_192_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMVirtualLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_192_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAMVirtualLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_192_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAMVirtualLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_192_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMVirtualLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_192_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMVirtualLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_192_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMVirtualLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_192_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMVirtualLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_192_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMVirtualLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAMVirtualLoader G__TTAMVirtualLoader;
static int G__G__tam_192_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAMVirtualLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAMVirtualLoader*) (soff+(sizeof(TAMVirtualLoader)*i)))->~G__TTAMVirtualLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAMVirtualLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAMVirtualLoader*) (soff))->~G__TTAMVirtualLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__tam_192_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMVirtualLoader* dest = (TAMVirtualLoader*) G__getstructoffset();
   *dest = *(TAMVirtualLoader*) libp->para[0].ref;
   const TAMVirtualLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TAMObjLoader */
static int G__G__tam_193_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMObjLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMObjLoader((const Char_t*) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TAMObjLoader((const Char_t*) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMObjLoader((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TAMObjLoader((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TAMObjLoader[n];
       } else {
         p = new((void*) gvp) TAMObjLoader[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TAMObjLoader;
       } else {
         p = new((void*) gvp) TAMObjLoader;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMObjLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_193_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TAMObjLoader*) G__getstructoffset())->GetObjName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_193_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TAMObjLoader*) G__getstructoffset())->IsRequiringObj());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMObjLoader*) G__getstructoffset())->SetObjName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_193_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMObjLoader*) G__getstructoffset())->SetRequireObj((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_193_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAMObjLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_193_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMObjLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAMObjLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_193_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAMObjLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMObjLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMObjLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_193_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMObjLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_193_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMObjLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMObjLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__tam_193_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TAMObjLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TAMObjLoader(*(TAMObjLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMObjLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAMObjLoader G__TTAMObjLoader;
static int G__G__tam_193_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAMObjLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAMObjLoader*) (soff+(sizeof(TAMObjLoader)*i)))->~G__TTAMObjLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAMObjLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAMObjLoader*) (soff))->~G__TTAMObjLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__tam_193_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMObjLoader* dest = (TAMObjLoader*) G__getstructoffset();
   *dest = *(TAMObjLoader*) libp->para[0].ref;
   const TAMObjLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TAModule */
static int G__G__tam_211_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAModule* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAModule[n];
     } else {
       p = new((void*) gvp) TAModule[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAModule;
     } else {
       p = new((void*) gvp) TAModule;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAModule));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAModule* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TAModule((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TAModule((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAModule));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TAModule*) G__getstructoffset())->SetActive((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TAModule*) G__getstructoffset())->SetActive();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const TAModule*) G__getstructoffset())->CheckSelectors((TAMSelector*) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const TAModule*) G__getstructoffset())->CheckSelectors((TAMSelector*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAModule*) G__getstructoffset())->FindPublicObj((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAModule*) G__getstructoffset())->GetCurrentFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAModule*) G__getstructoffset())->GetModOutput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAModule*) G__getstructoffset())->GetModOutput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAModule*) G__getstructoffset())->GetSubModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAModule*) G__getstructoffset())->GetSubModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TAModule*) G__getstructoffset())->GetUseName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TAModule*) G__getstructoffset())->GetVerbosity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TAModule*) G__getstructoffset())->PublishObj((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAModule*) G__getstructoffset())->RetractObj((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAModule*) G__getstructoffset())->SetDefActive((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAModule*) G__getstructoffset())->SetSelector((TAMSelector*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAModule*) G__getstructoffset())->SetUseName((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAModule*) G__getstructoffset())->SetVerbosity((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAModule*) G__getstructoffset())->SetAllVerbosity((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAModule::Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAModule::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAModule::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAModule::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAModule::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAModule*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAModule::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAModule::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAModule::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_211_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAModule::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__tam_211_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TAModule* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TAModule(*(TAModule*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAModule));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAModule G__TTAModule;
static int G__G__tam_211_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAModule*) (soff+(sizeof(TAModule)*i)))->~G__TTAModule();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAModule*) (soff))->~G__TTAModule();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__tam_211_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAModule* dest = (TAModule*) G__getstructoffset();
   *dest = *(TAModule*) libp->para[0].ref;
   const TAModule& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TAMOutput */
static int G__G__tam_212_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMOutput* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMOutput[n];
     } else {
       p = new((void*) gvp) TAMOutput[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMOutput;
     } else {
       p = new((void*) gvp) TAMOutput;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMOutput));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMOutput* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TAMOutput((TAModule*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TAMOutput((TAModule*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMOutput));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAMOutput::CheckHistDir((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMOutput*) G__getstructoffset())->FindModOutput((TAModule*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMOutput*) G__getstructoffset())->FindModOutput((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMOutput*) G__getstructoffset())->FindOutput((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMOutput*) G__getstructoffset())->FindOutput((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMOutput*) G__getstructoffset())->FindOutput((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAMOutput*) G__getstructoffset())->GetMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMOutput*) G__getstructoffset())->GetMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAMOutput*) G__getstructoffset())->GetOutputList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMOutput*) G__getstructoffset())->GetOutputList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((TAMOutput*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMOutput*) G__getstructoffset())->RemoveOutput((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMOutput*) G__getstructoffset())->SetAllOutputMembers((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMOutput*) G__getstructoffset())->SetMod((TAModule*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMOutput*) G__getstructoffset())->SetOutputMembers((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMOutput*) G__getstructoffset())->StoreAllOutputObjs();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMOutput*) G__getstructoffset())->StoreOutputObjs();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((const TAMOutput*) G__getstructoffset())->WriteCol((TCollection*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((const TAMOutput*) G__getstructoffset())->WriteCol((TCollection*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const TAMOutput*) G__getstructoffset())->WriteCol((TCollection*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const TAMOutput*) G__getstructoffset())->WriteCol((TCollection*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAMOutput::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMOutput::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAMOutput::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAMOutput::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMOutput*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMOutput::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMOutput::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMOutput::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_212_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMOutput::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAMOutput G__TTAMOutput;
static int G__G__tam_212_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAMOutput*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAMOutput*) (soff+(sizeof(TAMOutput)*i)))->~G__TTAMOutput();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAMOutput*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAMOutput*) (soff))->~G__TTAMOutput();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TAMSelector */
static int G__G__tam_214_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMSelector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMSelector[n];
     } else {
       p = new((void*) gvp) TAMSelector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMSelector;
     } else {
       p = new((void*) gvp) TAMSelector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMSelector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMSelector*) G__getstructoffset())->AbortAnalysis();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMSelector*) G__getstructoffset())->AbortEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMSelector*) G__getstructoffset())->AbortModule((TAModule*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMSelector*) G__getstructoffset())->AddInput((TAModule*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMSelector*) G__getstructoffset())->AddLoader((TAMVirtualLoader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TAMSelector*) G__getstructoffset())->AddObjThisEvt((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TAMSelector*) G__getstructoffset())->AddObjThisEvt((TObject*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TAMSelector*) G__getstructoffset())->BeginRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TAMSelector*) G__getstructoffset())->EndRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMSelector*) G__getstructoffset())->FindModOutput((TAModule*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAMSelector*) G__getstructoffset())->FindObjThisEvt((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAMSelector*) G__getstructoffset())->FindPublicObj((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const TAMSelector*) G__getstructoffset())->GetCurEvt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAMSelector*) G__getstructoffset())->GetCurrentFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMSelector*) G__getstructoffset())->GetCurrentFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAMSelector*) G__getstructoffset())->GetModOutput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMSelector*) G__getstructoffset())->GetModOutput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMSelector*) G__getstructoffset())->GetObjectWithID((UInt_t) G__int(libp->para[0]), (TProcessID*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAMSelector*) G__getstructoffset())->GetTopModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TAMSelector*) G__getstructoffset())->GetTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TAMSelector*) G__getstructoffset())->GetObjTabClean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMSelector*) G__getstructoffset())->GetTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TAMSelector*) G__getstructoffset())->GetVerbosity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TAMSelector*) G__getstructoffset())->IsAModAborted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TAMSelector*) G__getstructoffset())->IsEventAborted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TAMSelector*) G__getstructoffset())->IsAnalysisAborted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMSelector*) G__getstructoffset())->LoadBranch((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TAMSelector*) G__getstructoffset())->Process((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TAMSelector*) G__getstructoffset())->PublishObj((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMSelector*) G__getstructoffset())->RemoveObjThisEvt((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMSelector*) G__getstructoffset())->RetractObj((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMSelector*) G__getstructoffset())->SetDoProxy((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMSelector*) G__getstructoffset())->SetDoObjTabClean((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMSelector*) G__getstructoffset())->SetVerbosity((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAMSelector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMSelector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAMSelector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAMSelector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMSelector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMSelector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMSelector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMSelector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_214_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMSelector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAMSelector G__TTAMSelector;
static int G__G__tam_214_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAMSelector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAMSelector*) (soff+(sizeof(TAMSelector)*i)))->~G__TTAMSelector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAMSelector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAMSelector*) (soff))->~G__TTAMSelector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TAMOutput::TAMModInspector */
static int G__G__tam_480_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMOutput::TAMModInspector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMOutput::TAMModInspector[n];
     } else {
       p = new((void*) gvp) TAMOutput::TAMModInspector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMOutput::TAMModInspector;
     } else {
       p = new((void*) gvp) TAMOutput::TAMModInspector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMOutput::TAMModInspector*) G__getstructoffset())->AddOutput((TObject*) G__int(libp->para[0]), (void*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMOutput::TAMModInspector*) G__getstructoffset())->FindModMemberWithAddr((void*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAMOutput::TAMModInspector*) G__getstructoffset())->FindModMemberWithMemberName((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMOutput::TAMModInspector*) G__getstructoffset())->RemoveOutput((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMOutput::TAMModInspector*) G__getstructoffset())->SetMemberAddrFor((TObject*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAMOutput::TAMModInspector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMOutput::TAMModInspector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAMOutput::TAMModInspector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAMOutput::TAMModInspector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMOutput::TAMModInspector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMOutput::TAMModInspector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMOutput::TAMModInspector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMOutput::TAMModInspector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_480_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMOutput::TAMModInspector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAMOutput::TAMModInspector G__TTAMOutputcLcLTAMModInspector;
static int G__G__tam_480_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAMOutput::TAMModInspector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAMOutput::TAMModInspector*) (soff+(sizeof(TAMOutput::TAMModInspector)*i)))->~G__TTAMOutputcLcLTAMModInspector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAMOutput::TAMModInspector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAMOutput::TAMModInspector*) (soff))->~G__TTAMOutputcLcLTAMModInspector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TAMOutput::TAMModInspector::TAMModMember */
static int G__G__tam_481_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMOutput::TAMModInspector::TAMModMember* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMOutput::TAMModInspector::TAMModMember(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (void*) G__int(libp->para[2]), (TClass*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TAMOutput::TAMModInspector::TAMModMember(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (void*) G__int(libp->para[2]), (TClass*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMOutput::TAMModInspector::TAMModMember(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (void*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TAMOutput::TAMModInspector::TAMModMember(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (void*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMOutput::TAMModInspector::TAMModMember((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TAMOutput::TAMModInspector::TAMModMember((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMOutput::TAMModInspector::TAMModMember((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TAMOutput::TAMModInspector::TAMModMember((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TAMOutput::TAMModInspector::TAMModMember[n];
       } else {
         p = new((void*) gvp) TAMOutput::TAMModInspector::TAMModMember[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TAMOutput::TAMModInspector::TAMModMember;
       } else {
         p = new((void*) gvp) TAMOutput::TAMModInspector::TAMModMember;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_481_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAMOutput::TAMModInspector::TAMModMember::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_481_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMOutput::TAMModInspector::TAMModMember::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_481_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAMOutput::TAMModInspector::TAMModMember::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_481_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAMOutput::TAMModInspector::TAMModMember::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_481_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMOutput::TAMModInspector::TAMModMember*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_481_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMOutput::TAMModInspector::TAMModMember::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_481_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMOutput::TAMModInspector::TAMModMember::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_481_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMOutput::TAMModInspector::TAMModMember::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_481_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMOutput::TAMModInspector::TAMModMember::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__tam_481_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TAMOutput::TAMModInspector::TAMModMember* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TAMOutput::TAMModInspector::TAMModMember(*(TAMOutput::TAMModInspector::TAMModMember*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAMOutput::TAMModInspector::TAMModMember G__TTAMOutputcLcLTAMModInspectorcLcLTAMModMember;
static int G__G__tam_481_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAMOutput::TAMModInspector::TAMModMember*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAMOutput::TAMModInspector::TAMModMember*) (soff+(sizeof(TAMOutput::TAMModInspector::TAMModMember)*i)))->~G__TTAMOutputcLcLTAMModInspectorcLcLTAMModMember();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAMOutput::TAMModInspector::TAMModMember*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAMOutput::TAMModInspector::TAMModMember*) (soff))->~G__TTAMOutputcLcLTAMModInspectorcLcLTAMModMember();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__tam_481_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMOutput::TAMModInspector::TAMModMember* dest = (TAMOutput::TAMModInspector::TAMModMember*) G__getstructoffset();
   *dest = *(TAMOutput::TAMModInspector::TAMModMember*) libp->para[0].ref;
   const TAMOutput::TAMModInspector::TAMModMember& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TAMTreeBranchLoader */
static int G__G__tam_489_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMTreeBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMTreeBranchLoader[n];
     } else {
       p = new((void*) gvp) TAMTreeBranchLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMTreeBranchLoader;
     } else {
       p = new((void*) gvp) TAMTreeBranchLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMTreeBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_489_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMTreeBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TAMTreeBranchLoader((TAMBranchInfo*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TAMTreeBranchLoader((TAMBranchInfo*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMTreeBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_489_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAMTreeBranchLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_489_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMTreeBranchLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_489_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAMTreeBranchLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_489_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAMTreeBranchLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_489_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMTreeBranchLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_489_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMTreeBranchLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_489_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMTreeBranchLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_489_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMTreeBranchLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_489_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMTreeBranchLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__tam_489_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TAMTreeBranchLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TAMTreeBranchLoader(*(TAMTreeBranchLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMTreeBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAMTreeBranchLoader G__TTAMTreeBranchLoader;
static int G__G__tam_489_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAMTreeBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAMTreeBranchLoader*) (soff+(sizeof(TAMTreeBranchLoader)*i)))->~G__TTAMTreeBranchLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAMTreeBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAMTreeBranchLoader*) (soff))->~G__TTAMTreeBranchLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TAMTreeLoader */
static int G__G__tam_490_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMTreeLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMTreeLoader[n];
     } else {
       p = new((void*) gvp) TAMTreeLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAMTreeLoader;
     } else {
       p = new((void*) gvp) TAMTreeLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMTreeLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_490_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAMTreeLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_490_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMTreeLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_490_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAMTreeLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_490_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAMTreeLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_490_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAMTreeLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_490_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMTreeLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_490_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMTreeLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_490_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAMTreeLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__tam_490_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAMTreeLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__tam_490_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TAMTreeLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TAMTreeLoader(*(TAMTreeLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__tamLN_TAMTreeLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAMTreeLoader G__TTAMTreeLoader;
static int G__G__tam_490_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAMTreeLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAMTreeLoader*) (soff+(sizeof(TAMTreeLoader)*i)))->~G__TTAMTreeLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAMTreeLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAMTreeLoader*) (soff))->~G__TTAMTreeLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__tam_490_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAMTreeLoader* dest = (TAMTreeLoader*) G__getstructoffset();
   *dest = *(TAMTreeLoader*) libp->para[0].ref;
   const TAMTreeLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TAMVirtualBranchLoader */

/* TAMBranchInfo */

/* TAMObjBranchLoader */

/* TAMVirtualLoader */

/* TAMObjLoader */

/* TAModule */

/* TAMOutput */

/* TAMSelector */

/* TAMOutput::TAMModInspector */

/* TAMOutput::TAMModInspector::TAMModMember */

/* TAMTreeBranchLoader */

/* TAMTreeLoader */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__tam {
 public:
  G__Sizep2memfuncG__tam(): p(&G__Sizep2memfuncG__tam::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__tam::*p)();
};

size_t G__get_sizep2memfuncG__tam()
{
  G__Sizep2memfuncG__tam a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__tam() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader))) {
     TAMVirtualBranchLoader *G__Lderived;
     G__Lderived=(TAMVirtualBranchLoader*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader),G__get_linked_tagnum(&G__G__tamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__tamLN_TAMBranchInfo))) {
     TAMBranchInfo *G__Lderived;
     G__Lderived=(TAMBranchInfo*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMBranchInfo),G__get_linked_tagnum(&G__G__tamLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMBranchInfo),G__get_linked_tagnum(&G__G__tamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__tamLN_TAMObjBranchLoader))) {
     TAMObjBranchLoader *G__Lderived;
     G__Lderived=(TAMObjBranchLoader*)0x1000;
     {
       TAMVirtualBranchLoader *G__Lpbase=(TAMVirtualBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMObjBranchLoader),G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMObjBranchLoader),G__get_linked_tagnum(&G__G__tamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__tamLN_TAMVirtualLoader))) {
     TAMVirtualLoader *G__Lderived;
     G__Lderived=(TAMVirtualLoader*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMVirtualLoader),G__get_linked_tagnum(&G__G__tamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__tamLN_TAMObjLoader))) {
     TAMObjLoader *G__Lderived;
     G__Lderived=(TAMObjLoader*)0x1000;
     {
       TAMVirtualLoader *G__Lpbase=(TAMVirtualLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMObjLoader),G__get_linked_tagnum(&G__G__tamLN_TAMVirtualLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMObjLoader),G__get_linked_tagnum(&G__G__tamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__tamLN_TAModule))) {
     TAModule *G__Lderived;
     G__Lderived=(TAModule*)0x1000;
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAModule),G__get_linked_tagnum(&G__G__tamLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAModule),G__get_linked_tagnum(&G__G__tamLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAModule),G__get_linked_tagnum(&G__G__tamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__tamLN_TAMOutput))) {
     TAMOutput *G__Lderived;
     G__Lderived=(TAMOutput*)0x1000;
     {
       TList *G__Lpbase=(TList*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMOutput),G__get_linked_tagnum(&G__G__tamLN_TList),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMOutput),G__get_linked_tagnum(&G__G__tamLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMOutput),G__get_linked_tagnum(&G__G__tamLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMOutput),G__get_linked_tagnum(&G__G__tamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__tamLN_TAMSelector))) {
     TAMSelector *G__Lderived;
     G__Lderived=(TAMSelector*)0x1000;
     {
       TSelector *G__Lpbase=(TSelector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMSelector),G__get_linked_tagnum(&G__G__tamLN_TSelector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMSelector),G__get_linked_tagnum(&G__G__tamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspector))) {
     TAMOutput::TAMModInspector *G__Lderived;
     G__Lderived=(TAMOutput::TAMModInspector*)0x1000;
     {
       TMemberInspector *G__Lpbase=(TMemberInspector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspector),G__get_linked_tagnum(&G__G__tamLN_TMemberInspector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember))) {
     TAMOutput::TAMModInspector::TAMModMember *G__Lderived;
     G__Lderived=(TAMOutput::TAMModInspector::TAMModMember*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember),G__get_linked_tagnum(&G__G__tamLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember),G__get_linked_tagnum(&G__G__tamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__tamLN_TAMTreeBranchLoader))) {
     TAMTreeBranchLoader *G__Lderived;
     G__Lderived=(TAMTreeBranchLoader*)0x1000;
     {
       TAMVirtualBranchLoader *G__Lpbase=(TAMVirtualBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMTreeBranchLoader),G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMTreeBranchLoader),G__get_linked_tagnum(&G__G__tamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__tamLN_TAMTreeLoader))) {
     TAMTreeLoader *G__Lderived;
     G__Lderived=(TAMTreeLoader*)0x1000;
     {
       TAMVirtualLoader *G__Lpbase=(TAMVirtualLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMTreeLoader),G__get_linked_tagnum(&G__G__tamLN_TAMVirtualLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__tamLN_TAMTreeLoader),G__get_linked_tagnum(&G__G__tamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__tam() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__tamLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__tamLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__tamLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__tamLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__tamLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__tamLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__tamLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__tamLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__tamLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__tamLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<BranchPtr_t*>",117,G__get_linked_tagnum(&G__G__tamLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__tamLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__tamLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__tamLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__tamLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TAMBranchInfo::BranchPtr_t*>",117,G__get_linked_tagnum(&G__G__tamLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__tamLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__tamLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__tamLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__tamLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__tamLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__G__tamLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__tamLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__tamLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__G__tamLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TIterator*>",117,G__get_linked_tagnum(&G__G__tamLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__tamLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__tamLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__tamLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__tamLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TAMVirtualBranchLoader */
static void G__setup_memvarTAMVirtualBranchLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader));
   { TAMVirtualBranchLoader *p; p=(TAMVirtualBranchLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TAMBranchInfo),-1,-1,4,"fBInfo=",0,"corresponding TAMBranchInfo (not owned)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TAMBranchInfo */
static void G__setup_memvarTAMBranchInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__tamLN_TAMBranchInfo));
   { TAMBranchInfo *p; p=(TAMBranchInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fIsLoaded)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fIsLoaded=",0,"if branch is loaded ");
   G__memvar_setup((void*)((long)(&p->fLoader)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader),-1,-1,1,"fLoader=",0,"our data (tree) loader");
   G__memvar_setup((void*)((long)(&p->fUsrAddresses)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__tamLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR),G__defined_typename("vector<BranchPtr_t*>"),-1,1,"fUsrAddresses=",0,"list of pointers to each ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TAMObjBranchLoader */
static void G__setup_memvarTAMObjBranchLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__tamLN_TAMObjBranchLoader));
   { TAMObjBranchLoader *p; p=(TAMObjBranchLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TObject),-1,-1,4,"fObj=",0,"the header object");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fRequireObj=",0,"if true, Notify will fail if the obj cannot be loaded (default true)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TAMVirtualLoader */
static void G__setup_memvarTAMVirtualLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__tamLN_TAMVirtualLoader));
   { TAMVirtualLoader *p; p=(TAMVirtualLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TAMObjLoader */
static void G__setup_memvarTAMObjLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__tamLN_TAMObjLoader));
   { TAMObjLoader *p; p=(TAMObjLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__tamLN_TString),-1,-1,4,"fObjName=",0,"name of the object to load. must match the modules' ReqBranch");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fRequireObj=",0,"fail if the object cannot be loaded (default: true)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TAModule */
static void G__setup_memvarTAModule(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__tamLN_TAModule));
   { TAModule *p; p=(TAModule*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__tamLN_TAModulecLcLEModResult),-1,-2,1,G__FastAllocString(4096).Format("kWarning=%lldLL",(long long)TAModule::kWarning).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__tamLN_TAModulecLcLEModResult),-1,-2,1,G__FastAllocString(4096).Format("kAbortModule=%lldLL",(long long)TAModule::kAbortModule).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__tamLN_TAModulecLcLEModResult),-1,-2,1,G__FastAllocString(4096).Format("kAbortEvent=%lldLL",(long long)TAModule::kAbortEvent).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__tamLN_TAModulecLcLEModResult),-1,-2,1,G__FastAllocString(4096).Format("kStopModule=%lldLL",(long long)TAModule::kStopModule).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__tamLN_TAModulecLcLEModResult),-1,-2,1,G__FastAllocString(4096).Format("kAbortAnalysis=%lldLL",(long long)TAModule::kAbortAnalysis).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TAMSelector),-1,-1,4,"fSelector=",0,"!the selector processing the tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TAMOutput),-1,-1,4,"fOutput=",0,"the list of output objects for this mod");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDefActv=",0,"!copy of fActive so that TAMSelector can ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fVerbose=",0,"verbosity level");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStopped=",0,"!indicate if module (and its submodules) are");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseName=",0,"if true use this module's name when ");
   G__memvar_setup((void*)G__PVOID,99,0,1,-1,G__defined_typename("Char_t"),-2,4,"kExecBegin=0LL",0,"!key to mark Begin");
   G__memvar_setup((void*)G__PVOID,99,0,1,-1,G__defined_typename("Char_t"),-2,4,"kExecSlaveBegin=0LL",0,"!key to mark SlaveBegin");
   G__memvar_setup((void*)G__PVOID,99,0,1,-1,G__defined_typename("Char_t"),-2,4,"kExecProcess=0LL",0,"!key to mark Process");
   G__memvar_setup((void*)G__PVOID,99,0,1,-1,G__defined_typename("Char_t"),-2,4,"kExecBeginRun=0LL",0,"!key to mark BeginRun");
   G__memvar_setup((void*)G__PVOID,99,0,1,-1,G__defined_typename("Char_t"),-2,4,"kExecEndRun=0LL",0,"!key to mark EndRun");
   G__memvar_setup((void*)G__PVOID,99,0,1,-1,G__defined_typename("Char_t"),-2,4,"kExecSlaveTerminate=0LL",0,"!key to mark SlaveTerminate");
   G__memvar_setup((void*)G__PVOID,99,0,1,-1,G__defined_typename("Char_t"),-2,4,"kExecTerminate=0LL",0,"!key to mark Terminate");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TAMOutput */
static void G__setup_memvarTAMOutput(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__tamLN_TAMOutput));
   { TAMOutput *p; p=(TAMOutput*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"kParentStrLen=1028ULL",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspector),-1,-1,4,"fInspector=",0,"stores info about module's output members");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__tamLN_TList),-1,-1,4,"fOutput=",0,"list of this module's output (NOT owner)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__tamLN_TList),-1,-1,4,"fCurOutput=",0,"list of this module's output objects ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TAModule),-1,-1,4,"fMod=",0,"!pointer to the module whose output this is");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TAMSelector */
static void G__setup_memvarTAMSelector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__tamLN_TAMSelector));
   { TAMSelector *p; p=(TAMSelector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TTree),-1,-1,2,"fTree=",0,"!the tree or chain");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__tamLN_THashTable),-1,-1,2,"fBranchTable=",0,"!table of requested branches");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__tamLN_THashTable),-1,-1,2,"fEventObjs=",0,"!table of objects available to any mod");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TAModule),-1,-1,2,"fAModules=",0,"!the top-most TAModule. Nothing but a ");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,2,"fCurEvt=",0,"!the current event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TList),-1,-1,2,"fOwnInput=",0,"!keep pointer to own input list ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fAnalysisAborted=",0,"!if the analysis should be aborted");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fModAborted=",0,"!if >=1 modules(s) are aborted");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fEventAborted=",0,"!if the current event should be aborted");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fActNotify=",0,"!if notify is active ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fObjCounter=",0,"!keep object counter for resetting it ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fObjCounterRun=",0,"!keep object counter for resetting it ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fVerbosity=",0,"if one wants to print debug info");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__tamLN_TAMSelectorcLcLBranchProxy),-1,-1,2,"fProxy=",0,"proxy for reference resolving branch ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDoProxy=",0,"if TAMSelector should be proxy for ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDoObjTabClean=",0,"true if TAMSelector should clean the ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fObjTabClean=",0,"bool to track whether object tables of");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__tamLN_TList),-1,-1,2,"fLoaders=",0,"list of data loaders");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TAMOutput::TAMModInspector */
static void G__setup_memvarTAMOutputcLcLTAMModInspector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspector));
   { TAMOutput::TAMModInspector *p; p=(TAMOutput::TAMModInspector*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fOutputMembers)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__tamLN_THashTable),-1,-1,1,"fOutputMembers=",0,"stores members pointing to output objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TAMOutput::TAMModInspector::TAMModMember */
static void G__setup_memvarTAMOutputcLcLTAMModInspectorcLcLTAMModMember(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember));
   { TAMOutput::TAMModInspector::TAMModMember *p; p=(TAMOutput::TAMModInspector::TAMModMember*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fAddr)-(long)(p)),89,0,0,-1,-1,-1,1,"fAddr=",0,"!address of member");
   G__memvar_setup((void*)((long)(&p->fMClass)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-1,1,"fMClass=",0,"module class");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TAMTreeBranchLoader */
static void G__setup_memvarTAMTreeBranchLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__tamLN_TAMTreeBranchLoader));
   { TAMTreeBranchLoader *p; p=(TAMTreeBranchLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,89,0,0,-1,G__defined_typename("BranchAddr_t"),-1,2,"fBAddr=",0,"branch address for the data");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsClass=",0,"if the branch stores a class ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fLeafSizeConst=",0,"if size of leaves in branch is const");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TBranch),-1,-1,2,"fBranch=",0,"the branch itself (not owned)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-1,2,"fClass=",0,"class information from dictionary ");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__tamLN_TDataType),-1,-1,2,"fDataType=",0,"fundamental data type (ptr=0 if class)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TAMTreeLoader */
static void G__setup_memvarTAMTreeLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__tamLN_TAMTreeLoader));
   { TAMTreeLoader *p; p=(TAMTreeLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__tamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__tam() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTAMVirtualBranchLoader(void) {
   /* TAMVirtualBranchLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader));
   G__memfunc_setup("TAMVirtualBranchLoader",2158,G__G__tam_184_0_1, 105, G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAMVirtualBranchLoader",2158,G__G__tam_184_0_2, 105, G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader), -1, 0, 1, 1, 1, 0, "U 'TAMBranchInfo' - 0 - binfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAddress",998,G__G__tam_184_0_4, 89, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBInfo",750,G__G__tam_184_0_5, 85, G__get_linked_tagnum(&G__G__tamLN_TAMBranchInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBInfo",750,G__G__tam_184_0_6, 85, G__get_linked_tagnum(&G__G__tamLN_TAMBranchInfo), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntry",818,G__G__tam_184_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,G__G__tam_184_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__tam_184_0_10, 85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAMVirtualBranchLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__tam_184_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMVirtualBranchLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__tam_184_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAMVirtualBranchLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__tam_184_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAMVirtualBranchLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__tam_184_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__tam_184_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMVirtualBranchLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__tam_184_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMVirtualBranchLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__tam_184_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMVirtualBranchLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__tam_184_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMVirtualBranchLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TAMVirtualBranchLoader", 2158, G__G__tam_184_0_22, (int) ('i'), 
G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader), -1, 0, 1, 1, 1, 0, "u 'TAMVirtualBranchLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TAMVirtualBranchLoader", 2284, G__G__tam_184_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__tam_184_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader), -1, 1, 1, 1, 1, 0, "u 'TAMVirtualBranchLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTAMBranchInfo(void) {
   /* TAMBranchInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__tamLN_TAMBranchInfo));
   G__memfunc_setup("TAMBranchInfo",1212,G__G__tam_185_0_1, 105, G__get_linked_tagnum(&G__G__tamLN_TAMBranchInfo), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 '0' branchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntry",818,G__G__tam_185_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLoader",887,G__G__tam_185_0_3, 85, G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLoader",887,G__G__tam_185_0_4, 85, G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__G__tam_185_0_5, 117, G__get_linked_tagnum(&G__G__tamLN_type_info), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__tam_185_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLoaded",773,G__G__tam_185_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,G__G__tam_185_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUsrAddrs",1108,G__G__tam_185_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoader",899,G__G__tam_185_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TAMVirtualBranchLoader' - 0 - loader", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZeroUsrAddrs",1224,G__G__tam_185_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__tam_185_0_13, 85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAMBranchInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__tam_185_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMBranchInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__tam_185_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAMBranchInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__tam_185_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAMBranchInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__tam_185_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__tam_185_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMBranchInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__tam_185_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMBranchInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__tam_185_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMBranchInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__tam_185_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMBranchInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TAMBranchInfo", 1212, G__G__tam_185_0_25, (int) ('i'), G__get_linked_tagnum(&G__G__tamLN_TAMBranchInfo), -1, 0, 1, 1, 1, 0, "u 'TAMBranchInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TAMBranchInfo", 1338, G__G__tam_185_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__tam_185_0_27, (int) ('u'), G__get_linked_tagnum(&G__G__tamLN_TAMBranchInfo), -1, 1, 1, 1, 1, 0, "u 'TAMBranchInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTAMObjBranchLoader(void) {
   /* TAMObjBranchLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__tamLN_TAMObjBranchLoader));
   G__memfunc_setup("CheckType",896,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'type_info' - 11 - ptrtype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckTypeAllModules",1906,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAMObjBranchLoader",1698,G__G__tam_191_0_3, 105, G__get_linked_tagnum(&G__G__tamLN_TAMObjBranchLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAMObjBranchLoader",1698,G__G__tam_191_0_4, 105, G__get_linked_tagnum(&G__G__tamLN_TAMObjBranchLoader), -1, 0, 1, 1, 1, 0, "U 'TAMBranchInfo' - 0 - brInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAddress",998,(G__InterfaceMethod) NULL,89, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntry",818,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsRequiringObj",1421,G__G__tam_191_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRequireObj",1316,G__G__tam_191_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__tam_191_0_11, 85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAMObjBranchLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__tam_191_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMObjBranchLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__tam_191_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAMObjBranchLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__tam_191_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAMObjBranchLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__tam_191_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__tam_191_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMObjBranchLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__tam_191_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMObjBranchLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__tam_191_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMObjBranchLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__tam_191_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMObjBranchLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TAMObjBranchLoader", 1698, G__G__tam_191_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__tamLN_TAMObjBranchLoader), -1, 0, 1, 1, 1, 0, "u 'TAMObjBranchLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TAMObjBranchLoader", 1824, G__G__tam_191_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__tam_191_0_25, (int) ('u'), G__get_linked_tagnum(&G__G__tamLN_TAMObjBranchLoader), -1, 1, 1, 1, 1, 0, "u 'TAMObjBranchLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTAMVirtualLoader(void) {
   /* TAMVirtualLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__tamLN_TAMVirtualLoader));
   G__memfunc_setup("CreateBranchLoader",1785,G__G__tam_192_0_2, 85, G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree U 'TAMBranchInfo' - 0 - brInfo", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__tam_192_0_3, 85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAMVirtualLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__tam_192_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMVirtualLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__tam_192_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAMVirtualLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__tam_192_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAMVirtualLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__tam_192_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__tam_192_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMVirtualLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__tam_192_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMVirtualLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__tam_192_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMVirtualLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__tam_192_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMVirtualLoader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TAMVirtualLoader", 1694, G__G__tam_192_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__tam_192_0_16, (int) ('u'), G__get_linked_tagnum(&G__G__tamLN_TAMVirtualLoader), -1, 1, 1, 1, 1, 0, "u 'TAMVirtualLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTAMObjLoader(void) {
   /* TAMObjLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__tamLN_TAMObjLoader));
   G__memfunc_setup("TAMObjLoader",1108,G__G__tam_193_0_1, 105, G__get_linked_tagnum(&G__G__tamLN_TAMObjLoader), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' objName g - 'Bool_t' 10 'kTRUE' reqObj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjName",956,G__G__tam_193_0_2, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsRequiringObj",1421,G__G__tam_193_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetObjName",968,G__G__tam_193_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRequireObj",1316,G__G__tam_193_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateBranchLoader",1785,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree U 'TAMBranchInfo' - 0 - brInfo", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__tam_193_0_7, 85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAMObjLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__tam_193_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMObjLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__tam_193_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAMObjLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__tam_193_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAMObjLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__tam_193_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__tam_193_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMObjLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__tam_193_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMObjLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__tam_193_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMObjLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__tam_193_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMObjLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TAMObjLoader", 1108, G__G__tam_193_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__tamLN_TAMObjLoader), -1, 0, 1, 1, 1, 0, "u 'TAMObjLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TAMObjLoader", 1234, G__G__tam_193_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__tam_193_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__tamLN_TAMObjLoader), -1, 1, 1, 1, 1, 0, "u 'TAMObjLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTAModule(void) {
   /* TAModule */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__tamLN_TAModule));
   G__memfunc_setup("AbortAnalysis",1340,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AbortModule",1118,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeactivateAll",1299,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewOutputList",1367,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TList' - 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NotifyAll",914,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetAllActiveFlags",1893,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAllModOutput",1526,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TAMOutput' - 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetModOutput",1245,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TAMOutput' - 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StopModule",1036,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AbortEvent",1018,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddObjThisEvt",1259,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddObjThisEvt",1259,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'TObject' - 0 - obj C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSelector",1121,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__tamLN_TAMSelector), -1, 0, 0, 1, 2, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEventAborted",1407,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAnalysisAborted",1729,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadBranch",974,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "C - 'Char_t' 10 - bname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindObjThisEvt",1379,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__tamLN_TObject), -1, 0, 1, 1, 2, 8, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RemoveObjThisEvt",1616,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__tamLN_TObject), -1, 0, 1, 1, 2, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RemoveOutput",1279,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SendError",916,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 8, 2, 0, 
"i 'TAModule::EModResult' - 10 - errLevel C - 'Char_t' 10 - location "
"C - 'Char_t' 10 - formattedMsg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SkipEvent",921,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginRun",794,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EndRun",588,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SlaveTerminate",1444,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TAModule",763,G__G__tam_211_0_31, 105, G__get_linked_tagnum(&G__G__tamLN_TAModule), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAModule",763,G__G__tam_211_0_32, 105, G__get_linked_tagnum(&G__G__tamLN_TAModule), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetActive",904,G__G__tam_211_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' act", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckSelectors",1426,G__G__tam_211_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"U 'TAMSelector' - 10 - sel g - 'Bool_t' 10 'kTRUE' warn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindPublicObj",1275,G__G__tam_211_0_37, 85, G__get_linked_tagnum(&G__G__tamLN_TObject), -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentFile",1411,G__G__tam_211_0_38, 85, G__get_linked_tagnum(&G__G__tamLN_TFile), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModOutput",1233,G__G__tam_211_0_39, 85, G__get_linked_tagnum(&G__G__tamLN_TAMOutput), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModOutput",1233,G__G__tam_211_0_40, 85, G__get_linked_tagnum(&G__G__tamLN_TAMOutput), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSubModules",1315,G__G__tam_211_0_41, 85, G__get_linked_tagnum(&G__G__tamLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSubModules",1315,G__G__tam_211_0_42, 85, G__get_linked_tagnum(&G__G__tamLN_TList), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseName",974,G__G__tam_211_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVerbosity",1255,G__G__tam_211_0_44, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PublishObj",1010,G__G__tam_211_0_46, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RetractObj",1008,G__G__tam_211_0_47, 85, G__get_linked_tagnum(&G__G__tamLN_TObject), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefActive",1175,G__G__tam_211_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - active", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSelector",1133,G__G__tam_211_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TAMSelector' - 0 - sel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseName",986,G__G__tam_211_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVerbosity",1267,G__G__tam_211_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - vb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAllVerbosity",1548,G__G__tam_211_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - vb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Version",742,G__G__tam_211_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAModule::Version) ), 0);
   G__memfunc_setup("Class",502,G__G__tam_211_0_54, 85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAModule::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__tam_211_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAModule::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__tam_211_0_56, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAModule::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__tam_211_0_57, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAModule::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__tam_211_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__tam_211_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAModule::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__tam_211_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAModule::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__tam_211_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAModule::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__tam_211_0_65, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAModule::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TAModule", 763, G__G__tam_211_0_66, (int) ('i'), G__get_linked_tagnum(&G__G__tamLN_TAModule), -1, 0, 1, 1, 1, 0, "u 'TAModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TAModule", 889, G__G__tam_211_0_67, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__tam_211_0_68, (int) ('u'), G__get_linked_tagnum(&G__G__tamLN_TAModule), -1, 1, 1, 1, 1, 0, "u 'TAModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTAMOutput(void) {
   /* TAMOutput */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__tamLN_TAMOutput));
   G__memfunc_setup("CallMerge",876,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'TObject' - 0 - obj u 'TList' - 1 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteIterators",1552,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'vector<TIterator*,allocator<TIterator*> >' 'vector<TIterator*>' 1 - iters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurOutputList",1655,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__tamLN_TList), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeOutput",1153,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TCollection' - 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NullObjInAddOutput",1799,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NullClassFor",1208,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"Y - - 0 - adr C - 'Char_t' 10 - tid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WarnNameDuplicate",1716,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAMOutput",883,G__G__tam_212_0_8, 105, G__get_linked_tagnum(&G__G__tamLN_TAMOutput), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAMOutput",883,G__G__tam_212_0_9, 105, G__get_linked_tagnum(&G__G__tamLN_TAMOutput), -1, 0, 1, 1, 1, 0, "U 'TAModule' - 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckHistDir",1173,G__G__tam_212_0_11, 121, -1, -1, 0, 1, 3, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) G__func2void( (void (*)(TObject*))(&TAMOutput::CheckHistDir) ), 0);
   G__memfunc_setup("FindModOutput",1330,G__G__tam_212_0_12, 85, G__get_linked_tagnum(&G__G__tamLN_TAMOutput), -1, 0, 1, 1, 1, 0, "U 'TAModule' - 10 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindModOutput",1330,G__G__tam_212_0_13, 85, G__get_linked_tagnum(&G__G__tamLN_TAMOutput), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindOutput",1042,G__G__tam_212_0_14, 85, G__get_linked_tagnum(&G__G__tamLN_TObject), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindOutput",1042,G__G__tam_212_0_15, 85, G__get_linked_tagnum(&G__G__tamLN_TObject), -1, 0, 1, 1, 1, 0, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindOutput",1042,G__G__tam_212_0_16, 85, G__get_linked_tagnum(&G__G__tamLN_TObject), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - module C - 'Char_t' 10 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMod",576,G__G__tam_212_0_17, 85, G__get_linked_tagnum(&G__G__tamLN_TAModule), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMod",576,G__G__tam_212_0_18, 85, G__get_linked_tagnum(&G__G__tamLN_TAModule), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutputList",1357,G__G__tam_212_0_19, 85, G__get_linked_tagnum(&G__G__tamLN_TList), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutputList",1357,G__G__tam_212_0_20, 85, G__get_linked_tagnum(&G__G__tamLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__G__tam_212_0_21, 110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' wildcard", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"C - 'Option_t' 10 - option i - 'Int_t' 0 - recurse", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 8, 
"C - 'Option_t' 10 - option C - - 10 - wildcard "
"i - 'Int_t' 0 '1' recurse", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 8, 
"C - 'Option_t' 10 - option u 'TPRegexp' - 1 - regexp "
"i - 'Int_t' 0 '1' recurse", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RemoveOutput",1279,G__G__tam_212_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAllOutputMembers",1953,G__G__tam_212_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - setAddresses", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMod",588,G__G__tam_212_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TAModule' - 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOutputMembers",1672,G__G__tam_212_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - setAddresses", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StoreAllOutputObjs",1861,G__G__tam_212_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StoreOutputObjs",1580,G__G__tam_212_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteCol",809,G__G__tam_212_0_35, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 8, 
"U 'TCollection' - 10 - col C - - 10 '0' name "
"i - 'Int_t' 0 '0' option i - 'Int_t' 0 '0' bsize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__tam_212_0_36, 85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAMOutput::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__tam_212_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMOutput::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__tam_212_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAMOutput::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__tam_212_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAMOutput::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__tam_212_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__tam_212_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMOutput::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__tam_212_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMOutput::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__tam_212_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMOutput::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__tam_212_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMOutput::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TAMOutput", 1009, G__G__tam_212_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTAMSelector(void) {
   /* TAMSelector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__tamLN_TAMSelector));
   G__memfunc_setup("AddNewOutputLists",1747,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanObjTable",1254,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 8, 
"U 'TProcessID' - 0 - pid h - 'UInt_t' 0 - lastKeptUID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearAllLoaders",1482,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyModsFromInput",1746,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindLoader",984,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "U 'TAMBranchInfo' - 0 - brInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadBranch",974,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TAMBranchInfo' - 0 - brInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TakeModsFromInput",1724,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TakeLoadersFromInput",2035,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZeroAllBranches",1503,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAMSelector",1059,G__G__tam_214_0_10, 105, G__get_linked_tagnum(&G__G__tamLN_TAMSelector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AbortAnalysis",1340,G__G__tam_214_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AbortEvent",1018,G__G__tam_214_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AbortModule",1118,G__G__tam_214_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TAModule' - 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddInput",793,G__G__tam_214_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TAModule' - 0 - mod", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddLoader",864,G__G__tam_214_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TAMVirtualLoader' - 0 - loader", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddObjThisEvt",1259,G__G__tam_214_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddObjThisEvt",1259,G__G__tam_214_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TObject' - 0 - obj C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginRun",794,G__G__tam_214_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EndRun",588,G__G__tam_214_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindModOutput",1330,G__G__tam_214_0_21, 85, G__get_linked_tagnum(&G__G__tamLN_TAMOutput), -1, 0, 1, 1, 1, 0, "U 'TAModule' - 10 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindObjThisEvt",1379,G__G__tam_214_0_22, 85, G__get_linked_tagnum(&G__G__tamLN_TObject), -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindPublicObj",1275,G__G__tam_214_0_23, 85, G__get_linked_tagnum(&G__G__tamLN_TObject), -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurEvt",889,G__G__tam_214_0_24, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentFile",1411,G__G__tam_214_0_25, 85, G__get_linked_tagnum(&G__G__tamLN_TFile), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentFile",1411,G__G__tam_214_0_26, 85, G__get_linked_tagnum(&G__G__tamLN_TFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModOutput",1233,G__G__tam_214_0_27, 85, G__get_linked_tagnum(&G__G__tamLN_TAMOutput), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModOutput",1233,G__G__tam_214_0_28, 85, G__get_linked_tagnum(&G__G__tamLN_TAMOutput), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjectWithID",1440,G__G__tam_214_0_29, 85, G__get_linked_tagnum(&G__G__tamLN_TObject), -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - uid U 'TProcessID' - 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTopModule",1209,G__G__tam_214_0_30, 85, G__get_linked_tagnum(&G__G__tamLN_TAModule), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTree",688,G__G__tam_214_0_31, 85, G__get_linked_tagnum(&G__G__tamLN_TTree), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjTabClean",1333,G__G__tam_214_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTree",688,G__G__tam_214_0_33, 85, G__get_linked_tagnum(&G__G__tamLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVerbosity",1255,G__G__tam_214_0_34, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsAModAborted",1246,G__G__tam_214_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEventAborted",1407,G__G__tam_214_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAnalysisAborted",1729,G__G__tam_214_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadBranch",974,G__G__tam_214_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - bname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,G__G__tam_214_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PublishObj",1010,G__G__tam_214_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RemoveObjThisEvt",1616,G__G__tam_214_0_44, 85, G__get_linked_tagnum(&G__G__tamLN_TObject), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RetractObj",1008,G__G__tam_214_0_45, 85, G__get_linked_tagnum(&G__G__tamLN_TObject), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDoProxy",1025,G__G__tam_214_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDoObjTabClean",1524,G__G__tam_214_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVerbosity",1267,G__G__tam_214_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - vb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SlaveTerminate",1444,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Version",742,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__tam_214_0_53, 85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAMSelector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__tam_214_0_54, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMSelector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__tam_214_0_55, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAMSelector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__tam_214_0_56, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAMSelector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__tam_214_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__tam_214_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMSelector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__tam_214_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMSelector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__tam_214_0_63, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMSelector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__tam_214_0_64, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMSelector::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TAMSelector", 1185, G__G__tam_214_0_65, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTAMOutputcLcLTAMModInspector(void) {
   /* TAMOutput::TAMModInspector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspector));
   G__memfunc_setup("TAMModInspector",1465,G__G__tam_480_0_1, 105, G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddOutput",922,G__G__tam_480_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TObject' - 0 - obj Y - - 10 - adr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Inspect",726,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TClass' - 0 - cl C - 'Char_t' 10 - parent "
"C - 'Char_t' 10 - name Y - - 10 - addr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindModMemberWithAddr",2064,G__G__tam_480_0_4, 85, G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember), -1, 0, 1, 1, 1, 0, "Y - - 10 - addr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindModMemberWithMemberName",2670,G__G__tam_480_0_5, 85, G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - mn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveOutput",1279,G__G__tam_480_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMemberAddrFor",1574,G__G__tam_480_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TObject' - 0 - obj h - 'UInt_t' 10 - verbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__tam_480_0_8, 85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAMOutput::TAMModInspector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__tam_480_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMOutput::TAMModInspector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__tam_480_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAMOutput::TAMModInspector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__tam_480_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAMOutput::TAMModInspector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__tam_480_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__tam_480_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMOutput::TAMModInspector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__tam_480_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMOutput::TAMModInspector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__tam_480_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMOutput::TAMModInspector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__tam_480_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMOutput::TAMModInspector::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TAMModInspector", 1591, G__G__tam_480_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTAMOutputcLcLTAMModInspectorcLcLTAMModMember(void) {
   /* TAMOutput::TAMModInspector::TAMModMember */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember));
   G__memfunc_setup("TAMModMember",1114,G__G__tam_481_0_1, 105, G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '0' objectname C - 'Char_t' 10 '0' membername "
"Y - - 0 '0' addr U 'TClass' - 0 '0' cl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__tam_481_0_2, 85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAMOutput::TAMModInspector::TAMModMember::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__tam_481_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMOutput::TAMModInspector::TAMModMember::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__tam_481_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAMOutput::TAMModInspector::TAMModMember::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__tam_481_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAMOutput::TAMModInspector::TAMModMember::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__tam_481_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__tam_481_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMOutput::TAMModInspector::TAMModMember::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__tam_481_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMOutput::TAMModInspector::TAMModMember::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__tam_481_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMOutput::TAMModInspector::TAMModMember::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__tam_481_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMOutput::TAMModInspector::TAMModMember::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TAMModMember", 1114, G__G__tam_481_0_14, (int) ('i'), G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember), -1, 0, 1, 1, 1, 0, "u 'TAMOutput::TAMModInspector::TAMModMember' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TAMModMember", 1240, G__G__tam_481_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__tam_481_0_16, (int) ('u'), G__get_linked_tagnum(&G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember), -1, 1, 1, 1, 1, 0, "u 'TAMOutput::TAMModInspector::TAMModMember' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTAMTreeBranchLoader(void) {
   /* TAMTreeBranchLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__tamLN_TAMTreeBranchLoader));
   G__memfunc_setup("AllocateMemory",1438,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckBrClass",1160,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"u 'type_info' - 11 - ptrtype u 'TClass' - 11 - cls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckBrStruct",1303,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "u 'TClass' - 1 - cls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckFundType",1293,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "u 'type_info' - 11 - ptrtype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckBrType",1076,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "u 'type_info' - 11 - ptrtype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckBrTypeAllModules",2086,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteMemory",1228,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBranchAddress",1600,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLeafAddresses",1602,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAMTreeBranchLoader",1815,G__G__tam_489_0_10, 105, G__get_linked_tagnum(&G__G__tamLN_TAMTreeBranchLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAMTreeBranchLoader",1815,G__G__tam_489_0_11, 105, G__get_linked_tagnum(&G__G__tamLN_TAMTreeBranchLoader), -1, 0, 1, 1, 1, 0, "U 'TAMBranchInfo' - 0 - binfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAddress",998,(G__InterfaceMethod) NULL,89, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntry",818,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__tam_489_0_17, 85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAMTreeBranchLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__tam_489_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMTreeBranchLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__tam_489_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAMTreeBranchLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__tam_489_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAMTreeBranchLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__tam_489_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__tam_489_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMTreeBranchLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__tam_489_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMTreeBranchLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__tam_489_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMTreeBranchLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__tam_489_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMTreeBranchLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TAMTreeBranchLoader", 1815, G__G__tam_489_0_29, (int) ('i'), G__get_linked_tagnum(&G__G__tamLN_TAMTreeBranchLoader), -1, 0, 1, 1, 1, 0, "u 'TAMTreeBranchLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TAMTreeBranchLoader", 1941, G__G__tam_489_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTAMTreeLoader(void) {
   /* TAMTreeLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__tamLN_TAMTreeLoader));
   G__memfunc_setup("TAMTreeLoader",1225,G__G__tam_490_0_1, 105, G__get_linked_tagnum(&G__G__tamLN_TAMTreeLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateBranchLoader",1785,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TAMVirtualBranchLoader), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree U 'TAMBranchInfo' - 0 - brInfo", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__tam_490_0_3, 85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAMTreeLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__tam_490_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMTreeLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__tam_490_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAMTreeLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__tam_490_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAMTreeLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__tamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__tam_490_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__tam_490_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMTreeLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__tam_490_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMTreeLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__tam_490_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAMTreeLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__tam_490_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAMTreeLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TAMTreeLoader", 1225, G__G__tam_490_0_15, (int) ('i'), G__get_linked_tagnum(&G__G__tamLN_TAMTreeLoader), -1, 0, 1, 1, 1, 0, "u 'TAMTreeLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TAMTreeLoader", 1351, G__G__tam_490_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__tam_490_0_17, (int) ('u'), G__get_linked_tagnum(&G__G__tamLN_TAMTreeLoader), -1, 1, 1, 1, 1, 0, "u 'TAMTreeLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__tam() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__tam() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__tam() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__tamLN_type_info = { "type_info" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__tamLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__tamLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TBrowser = { "TBrowser" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TProcessID = { "TProcessID" , 99 , -1 };
G__linked_taginfo G__G__tamLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__tamLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TPRegexp = { "TPRegexp" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TAMVirtualBranchLoader = { "TAMVirtualBranchLoader" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TAMBranchInfo = { "TAMBranchInfo" , 115 , -1 };
G__linked_taginfo G__G__tamLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR = { "vector<TAMBranchInfo::BranchPtr_t*,allocator<TAMBranchInfo::BranchPtr_t*> >" , 99 , -1 };
G__linked_taginfo G__G__tamLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TAMBranchInfo::BranchPtr_t*,allocator<TAMBranchInfo::BranchPtr_t*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TAMObjBranchLoader = { "TAMObjBranchLoader" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TAMVirtualLoader = { "TAMVirtualLoader" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TAMObjLoader = { "TAMObjLoader" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TSeqCollection = { "TSeqCollection" , 99 , -1 };
G__linked_taginfo G__G__tamLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__tamLN_TTask = { "TTask" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TSelector = { "TSelector" , 99 , -1 };
G__linked_taginfo G__G__tamLN_THashTable = { "THashTable" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TAModule = { "TAModule" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TAMOutput = { "TAMOutput" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TAMSelector = { "TAMSelector" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TAMSelectorcLcLBranchProxy = { "TAMSelector::BranchProxy" , 99 , -1 };
G__linked_taginfo G__G__tamLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TAMOutputcLcLTAMModInspector = { "TAMOutput::TAMModInspector" , 115 , -1 };
G__linked_taginfo G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember = { "TAMOutput::TAMModInspector::TAMModMember" , 115 , -1 };
G__linked_taginfo G__G__tamLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR = { "vector<TIterator*,allocator<TIterator*> >" , 99 , -1 };
G__linked_taginfo G__G__tamLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TIterator*,allocator<TIterator*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TAModulecLcLEModResult = { "TAModule::EModResult" , 101 , -1 };
G__linked_taginfo G__G__tamLN_TDataType = { "TDataType" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TAMTreeBranchLoader = { "TAMTreeBranchLoader" , 99 , -1 };
G__linked_taginfo G__G__tamLN_TAMTreeLoader = { "TAMTreeLoader" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__tam() {
  G__G__tamLN_type_info.tagnum = -1 ;
  G__G__tamLN_TClass.tagnum = -1 ;
  G__G__tamLN_TBuffer.tagnum = -1 ;
  G__G__tamLN_TMemberInspector.tagnum = -1 ;
  G__G__tamLN_TObject.tagnum = -1 ;
  G__G__tamLN_TNamed.tagnum = -1 ;
  G__G__tamLN_TCollection.tagnum = -1 ;
  G__G__tamLN_TString.tagnum = -1 ;
  G__G__tamLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__tamLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__tamLN_TList.tagnum = -1 ;
  G__G__tamLN_TBrowser.tagnum = -1 ;
  G__G__tamLN_TProcessID.tagnum = -1 ;
  G__G__tamLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__tamLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__tamLN_TPRegexp.tagnum = -1 ;
  G__G__tamLN_TTree.tagnum = -1 ;
  G__G__tamLN_TAMVirtualBranchLoader.tagnum = -1 ;
  G__G__tamLN_TAMBranchInfo.tagnum = -1 ;
  G__G__tamLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR.tagnum = -1 ;
  G__G__tamLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__tamLN_TAMObjBranchLoader.tagnum = -1 ;
  G__G__tamLN_TAMVirtualLoader.tagnum = -1 ;
  G__G__tamLN_TAMObjLoader.tagnum = -1 ;
  G__G__tamLN_TSeqCollection.tagnum = -1 ;
  G__G__tamLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__tamLN_TTask.tagnum = -1 ;
  G__G__tamLN_TSelector.tagnum = -1 ;
  G__G__tamLN_THashTable.tagnum = -1 ;
  G__G__tamLN_TBranch.tagnum = -1 ;
  G__G__tamLN_TFile.tagnum = -1 ;
  G__G__tamLN_TAModule.tagnum = -1 ;
  G__G__tamLN_TAMOutput.tagnum = -1 ;
  G__G__tamLN_TAMSelector.tagnum = -1 ;
  G__G__tamLN_TAMSelectorcLcLBranchProxy.tagnum = -1 ;
  G__G__tamLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__tamLN_TAMOutputcLcLTAMModInspector.tagnum = -1 ;
  G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember.tagnum = -1 ;
  G__G__tamLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR.tagnum = -1 ;
  G__G__tamLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__tamLN_TAModulecLcLEModResult.tagnum = -1 ;
  G__G__tamLN_TDataType.tagnum = -1 ;
  G__G__tamLN_TAMTreeBranchLoader.tagnum = -1 ;
  G__G__tamLN_TAMTreeLoader.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__tam() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__tamLN_type_info);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TCollection);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TString);
   G__get_linked_tagnum_fwd(&G__G__tamLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__tamLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TList);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TBrowser);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TProcessID);
   G__get_linked_tagnum_fwd(&G__G__tamLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__tamLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TPRegexp);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TTree);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__tamLN_TAMVirtualBranchLoader),sizeof(TAMVirtualBranchLoader),-1,324864,"Base class for data loader plugins",G__setup_memvarTAMVirtualBranchLoader,G__setup_memfuncTAMVirtualBranchLoader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__tamLN_TAMBranchInfo),sizeof(TAMBranchInfo),-1,324864,"General per branch information",G__setup_memvarTAMBranchInfo,G__setup_memfuncTAMBranchInfo);
   G__get_linked_tagnum_fwd(&G__G__tamLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__tamLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__tamLN_TAMObjBranchLoader),sizeof(TAMObjBranchLoader),-1,324864,"load a TObject directly from the current TFile",G__setup_memvarTAMObjBranchLoader,G__setup_memfuncTAMObjBranchLoader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__tamLN_TAMVirtualLoader),sizeof(TAMVirtualLoader),-1,292097,"Base class for loading plugins into TAM",G__setup_memvarTAMVirtualLoader,G__setup_memfuncTAMVirtualLoader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__tamLN_TAMObjLoader),sizeof(TAMObjLoader),-1,292096,"use TAMObjBranchLoader to load a TObject from the current file",G__setup_memvarTAMObjLoader,G__setup_memfuncTAMObjLoader);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TSeqCollection);
   G__get_linked_tagnum_fwd(&G__G__tamLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TTask);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TSelector);
   G__get_linked_tagnum_fwd(&G__G__tamLN_THashTable);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TBranch);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__tamLN_TAModule),sizeof(TAModule),-1,324864,"Base class for modular processing a tree",G__setup_memvarTAModule,G__setup_memfuncTAModule);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__tamLN_TAMOutput),sizeof(TAMOutput),-1,324864,"Tree analysis module output class",G__setup_memvarTAMOutput,G__setup_memfuncTAMOutput);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__tamLN_TAMSelector),sizeof(TAMSelector),-1,292096,"Tree analysis module selector",G__setup_memvarTAMSelector,G__setup_memfuncTAMSelector);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TAMSelectorcLcLBranchProxy);
   G__get_linked_tagnum_fwd(&G__G__tamLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__tamLN_TAMOutputcLcLTAMModInspector),sizeof(TAMOutput::TAMModInspector),-1,66816,"TAM inspector class",G__setup_memvarTAMOutputcLcLTAMModInspector,G__setup_memfuncTAMOutputcLcLTAMModInspector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__tamLN_TAMOutputcLcLTAMModInspectorcLcLTAMModMember),sizeof(TAMOutput::TAMModInspector::TAMModMember),-1,324864,"TAM module member class",G__setup_memvarTAMOutputcLcLTAMModInspectorcLcLTAMModMember,G__setup_memfuncTAMOutputcLcLTAMModInspectorcLcLTAMModMember);
   G__get_linked_tagnum_fwd(&G__G__tamLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__tamLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__tamLN_TAModulecLcLEModResult),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__G__tamLN_TDataType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__tamLN_TAMTreeBranchLoader),sizeof(TAMTreeBranchLoader),-1,324864,"TAM plugin to load data from a branch",G__setup_memvarTAMTreeBranchLoader,G__setup_memfuncTAMTreeBranchLoader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__tamLN_TAMTreeLoader),sizeof(TAMTreeLoader),-1,292096,"Tree branch plugin loader for TAM ",G__setup_memvarTAMTreeLoader,G__setup_memfuncTAMTreeLoader);
}
extern "C" void G__cpp_setupG__tam(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__tam()");
  G__set_cpp_environmentG__tam();
  G__cpp_setup_tagtableG__tam();

  G__cpp_setup_inheritanceG__tam();

  G__cpp_setup_typetableG__tam();

  G__cpp_setup_memvarG__tam();

  G__cpp_setup_memfuncG__tam();
  G__cpp_setup_globalG__tam();
  G__cpp_setup_funcG__tam();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__tam();
  return;
}
class G__cpp_setup_initG__tam {
  public:
    G__cpp_setup_initG__tam() { G__add_setup_func("G__tam",(G__incsetup)(&G__cpp_setupG__tam)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__tam() { G__remove_setup_func("G__tam"); }
};
G__cpp_setup_initG__tam G__cpp_setup_initializerG__tam;

