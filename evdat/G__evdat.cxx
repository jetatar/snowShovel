//
// File generated by /data/users/jtatar/Software/root/bin/rootcint at Wed Apr 30 16:57:15 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME evdatdIG__evdat
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__evdat.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

#include "TBuffer.h"
#include "TVirtualObject.h"
#include <vector>
#include "TSchemaHelper.h"


// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TSnCompressor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnCompressor(void *p = 0);
   static void *newArray_TSnCompressor(Long_t size, void *p);
   static void delete_TSnCompressor(void *p);
   static void deleteArray_TSnCompressor(void *p);
   static void destruct_TSnCompressor(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnCompressor*)
   {
      ::TSnCompressor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnCompressor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnCompressor", ::TSnCompressor::Class_Version(), "./evdat/TSnCompressor.h", 8,
                  typeid(::TSnCompressor), DefineBehavior(ptr, ptr),
                  &::TSnCompressor::Dictionary, isa_proxy, 4,
                  sizeof(::TSnCompressor) );
      instance.SetNew(&new_TSnCompressor);
      instance.SetNewArray(&newArray_TSnCompressor);
      instance.SetDelete(&delete_TSnCompressor);
      instance.SetDeleteArray(&deleteArray_TSnCompressor);
      instance.SetDestructor(&destruct_TSnCompressor);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnCompressor*)
   {
      return GenerateInitInstanceLocal((::TSnCompressor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnCompressor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnTrgInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnTrgInfo(void *p = 0);
   static void *newArray_TSnTrgInfo(Long_t size, void *p);
   static void delete_TSnTrgInfo(void *p);
   static void deleteArray_TSnTrgInfo(void *p);
   static void destruct_TSnTrgInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnTrgInfo*)
   {
      ::TSnTrgInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnTrgInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnTrgInfo", ::TSnTrgInfo::Class_Version(), "./evdat/TSnTrgInfo.h", 6,
                  typeid(::TSnTrgInfo), DefineBehavior(ptr, ptr),
                  &::TSnTrgInfo::Dictionary, isa_proxy, 4,
                  sizeof(::TSnTrgInfo) );
      instance.SetNew(&new_TSnTrgInfo);
      instance.SetNewArray(&newArray_TSnTrgInfo);
      instance.SetDelete(&delete_TSnTrgInfo);
      instance.SetDeleteArray(&deleteArray_TSnTrgInfo);
      instance.SetDestructor(&destruct_TSnTrgInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnTrgInfo*)
   {
      return GenerateInitInstanceLocal((::TSnTrgInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnTrgInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnEventHeader(void *p = 0);
   static void *newArray_TSnEventHeader(Long_t size, void *p);
   static void delete_TSnEventHeader(void *p);
   static void deleteArray_TSnEventHeader(void *p);
   static void destruct_TSnEventHeader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnEventHeader*)
   {
      ::TSnEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnEventHeader", ::TSnEventHeader::Class_Version(), "./evdat/TSnEventHeader.h", 9,
                  typeid(::TSnEventHeader), DefineBehavior(ptr, ptr),
                  &::TSnEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnEventHeader) );
      instance.SetNew(&new_TSnEventHeader);
      instance.SetNewArray(&newArray_TSnEventHeader);
      instance.SetDelete(&delete_TSnEventHeader);
      instance.SetDeleteArray(&deleteArray_TSnEventHeader);
      instance.SetDestructor(&destruct_TSnEventHeader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnEventHeader*)
   {
      return GenerateInitInstanceLocal((::TSnEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace NSnConstants {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void NSnConstants_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("NSnConstants", 0 /*version*/, "./evdat/NSnConstants.h", 22,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &NSnConstants_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void NSnConstants_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void TSnRawWaveform_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnRawWaveform(void *p = 0);
   static void *newArray_TSnRawWaveform(Long_t size, void *p);
   static void delete_TSnRawWaveform(void *p);
   static void deleteArray_TSnRawWaveform(void *p);
   static void destruct_TSnRawWaveform(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnRawWaveform*)
   {
      ::TSnRawWaveform *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnRawWaveform >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnRawWaveform", ::TSnRawWaveform::Class_Version(), "./evdat/TSnRawWaveform.h", 10,
                  typeid(::TSnRawWaveform), DefineBehavior(ptr, ptr),
                  &::TSnRawWaveform::Dictionary, isa_proxy, 4,
                  sizeof(::TSnRawWaveform) );
      instance.SetNew(&new_TSnRawWaveform);
      instance.SetNewArray(&newArray_TSnRawWaveform);
      instance.SetDelete(&delete_TSnRawWaveform);
      instance.SetDeleteArray(&deleteArray_TSnRawWaveform);
      instance.SetDestructor(&destruct_TSnRawWaveform);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnRawWaveform*)
   {
      return GenerateInitInstanceLocal((::TSnRawWaveform*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnRawWaveform*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnEvent(void *p = 0);
   static void *newArray_TSnEvent(Long_t size, void *p);
   static void delete_TSnEvent(void *p);
   static void deleteArray_TSnEvent(void *p);
   static void destruct_TSnEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnEvent*)
   {
      ::TSnEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnEvent", ::TSnEvent::Class_Version(), "./evdat/TSnEvent.h", 13,
                  typeid(::TSnEvent), DefineBehavior(ptr, ptr),
                  &::TSnEvent::Dictionary, isa_proxy, 4,
                  sizeof(::TSnEvent) );
      instance.SetNew(&new_TSnEvent);
      instance.SetNewArray(&newArray_TSnEvent);
      instance.SetDelete(&delete_TSnEvent);
      instance.SetDeleteArray(&deleteArray_TSnEvent);
      instance.SetDestructor(&destruct_TSnEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnEvent*)
   {
      return GenerateInitInstanceLocal((::TSnEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnEventMetadata_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnEventMetadata(void *p = 0);
   static void *newArray_TSnEventMetadata(Long_t size, void *p);
   static void delete_TSnEventMetadata(void *p);
   static void deleteArray_TSnEventMetadata(void *p);
   static void destruct_TSnEventMetadata(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnEventMetadata*)
   {
      ::TSnEventMetadata *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnEventMetadata >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnEventMetadata", ::TSnEventMetadata::Class_Version(), "./evdat/TSnEventMetadata.h", 7,
                  typeid(::TSnEventMetadata), DefineBehavior(ptr, ptr),
                  &::TSnEventMetadata::Dictionary, isa_proxy, 4,
                  sizeof(::TSnEventMetadata) );
      instance.SetNew(&new_TSnEventMetadata);
      instance.SetNewArray(&newArray_TSnEventMetadata);
      instance.SetDelete(&delete_TSnEventMetadata);
      instance.SetDeleteArray(&deleteArray_TSnEventMetadata);
      instance.SetDestructor(&destruct_TSnEventMetadata);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnEventMetadata*)
   {
      return GenerateInitInstanceLocal((::TSnEventMetadata*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnEventMetadata*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnStatusUpdate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnStatusUpdate(void *p = 0);
   static void *newArray_TSnStatusUpdate(Long_t size, void *p);
   static void delete_TSnStatusUpdate(void *p);
   static void deleteArray_TSnStatusUpdate(void *p);
   static void destruct_TSnStatusUpdate(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnStatusUpdate*)
   {
      ::TSnStatusUpdate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnStatusUpdate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnStatusUpdate", ::TSnStatusUpdate::Class_Version(), "./evdat/TSnStatusUpdate.h", 8,
                  typeid(::TSnStatusUpdate), DefineBehavior(ptr, ptr),
                  &::TSnStatusUpdate::Dictionary, isa_proxy, 4,
                  sizeof(::TSnStatusUpdate) );
      instance.SetNew(&new_TSnStatusUpdate);
      instance.SetNewArray(&newArray_TSnStatusUpdate);
      instance.SetDelete(&delete_TSnStatusUpdate);
      instance.SetDeleteArray(&deleteArray_TSnStatusUpdate);
      instance.SetDestructor(&destruct_TSnStatusUpdate);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnStatusUpdate*)
   {
      return GenerateInitInstanceLocal((::TSnStatusUpdate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnStatusUpdate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnStatusUpdatecLcLTObsoletePars_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnStatusUpdatecLcLTObsoletePars(void *p = 0);
   static void *newArray_TSnStatusUpdatecLcLTObsoletePars(Long_t size, void *p);
   static void delete_TSnStatusUpdatecLcLTObsoletePars(void *p);
   static void deleteArray_TSnStatusUpdatecLcLTObsoletePars(void *p);
   static void destruct_TSnStatusUpdatecLcLTObsoletePars(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnStatusUpdate::TObsoletePars*)
   {
      ::TSnStatusUpdate::TObsoletePars *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnStatusUpdate::TObsoletePars >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnStatusUpdate::TObsoletePars", ::TSnStatusUpdate::TObsoletePars::Class_Version(), "./evdat/TSnStatusUpdate.h", 10,
                  typeid(::TSnStatusUpdate::TObsoletePars), DefineBehavior(ptr, ptr),
                  &::TSnStatusUpdate::TObsoletePars::Dictionary, isa_proxy, 4,
                  sizeof(::TSnStatusUpdate::TObsoletePars) );
      instance.SetNew(&new_TSnStatusUpdatecLcLTObsoletePars);
      instance.SetNewArray(&newArray_TSnStatusUpdatecLcLTObsoletePars);
      instance.SetDelete(&delete_TSnStatusUpdatecLcLTObsoletePars);
      instance.SetDeleteArray(&deleteArray_TSnStatusUpdatecLcLTObsoletePars);
      instance.SetDestructor(&destruct_TSnStatusUpdatecLcLTObsoletePars);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnStatusUpdate::TObsoletePars*)
   {
      return GenerateInitInstanceLocal((::TSnStatusUpdate::TObsoletePars*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnStatusUpdate::TObsoletePars*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace NSnCRCUtils {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void NSnCRCUtils_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("NSnCRCUtils", 0 /*version*/, "./evdat/NSnCRCUtils.h", 16,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &NSnCRCUtils_Dictionary, 4);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void NSnCRCUtils_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void TSnPowerReading_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnPowerReading(void *p = 0);
   static void *newArray_TSnPowerReading(Long_t size, void *p);
   static void delete_TSnPowerReading(void *p);
   static void deleteArray_TSnPowerReading(void *p);
   static void destruct_TSnPowerReading(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnPowerReading*)
   {
      ::TSnPowerReading *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnPowerReading >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnPowerReading", ::TSnPowerReading::Class_Version(), "./evdat/TSnPowerReading.h", 7,
                  typeid(::TSnPowerReading), DefineBehavior(ptr, ptr),
                  &::TSnPowerReading::Dictionary, isa_proxy, 4,
                  sizeof(::TSnPowerReading) );
      instance.SetNew(&new_TSnPowerReading);
      instance.SetNewArray(&newArray_TSnPowerReading);
      instance.SetDelete(&delete_TSnPowerReading);
      instance.SetDeleteArray(&deleteArray_TSnPowerReading);
      instance.SetDestructor(&destruct_TSnPowerReading);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnPowerReading*)
   {
      return GenerateInitInstanceLocal((::TSnPowerReading*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnPowerReading*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnPowerReadingcLcLTObsoletePars_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnPowerReadingcLcLTObsoletePars(void *p = 0);
   static void *newArray_TSnPowerReadingcLcLTObsoletePars(Long_t size, void *p);
   static void delete_TSnPowerReadingcLcLTObsoletePars(void *p);
   static void deleteArray_TSnPowerReadingcLcLTObsoletePars(void *p);
   static void destruct_TSnPowerReadingcLcLTObsoletePars(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnPowerReading::TObsoletePars*)
   {
      ::TSnPowerReading::TObsoletePars *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnPowerReading::TObsoletePars >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnPowerReading::TObsoletePars", ::TSnPowerReading::TObsoletePars::Class_Version(), "./evdat/TSnPowerReading.h", 9,
                  typeid(::TSnPowerReading::TObsoletePars), DefineBehavior(ptr, ptr),
                  &::TSnPowerReading::TObsoletePars::Dictionary, isa_proxy, 4,
                  sizeof(::TSnPowerReading::TObsoletePars) );
      instance.SetNew(&new_TSnPowerReadingcLcLTObsoletePars);
      instance.SetNewArray(&newArray_TSnPowerReadingcLcLTObsoletePars);
      instance.SetDelete(&delete_TSnPowerReadingcLcLTObsoletePars);
      instance.SetDeleteArray(&deleteArray_TSnPowerReadingcLcLTObsoletePars);
      instance.SetDestructor(&destruct_TSnPowerReadingcLcLTObsoletePars);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnPowerReading::TObsoletePars*)
   {
      return GenerateInitInstanceLocal((::TSnPowerReading::TObsoletePars*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnPowerReading::TObsoletePars*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnHeartbeat_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnHeartbeat(void *p = 0);
   static void *newArray_TSnHeartbeat(Long_t size, void *p);
   static void delete_TSnHeartbeat(void *p);
   static void deleteArray_TSnHeartbeat(void *p);
   static void destruct_TSnHeartbeat(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnHeartbeat*)
   {
      ::TSnHeartbeat *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnHeartbeat >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnHeartbeat", ::TSnHeartbeat::Class_Version(), "./evdat/TSnHeartbeat.h", 7,
                  typeid(::TSnHeartbeat), DefineBehavior(ptr, ptr),
                  &::TSnHeartbeat::Dictionary, isa_proxy, 4,
                  sizeof(::TSnHeartbeat) );
      instance.SetNew(&new_TSnHeartbeat);
      instance.SetNewArray(&newArray_TSnHeartbeat);
      instance.SetDelete(&delete_TSnHeartbeat);
      instance.SetDeleteArray(&deleteArray_TSnHeartbeat);
      instance.SetDestructor(&destruct_TSnHeartbeat);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnHeartbeat*)
   {
      return GenerateInitInstanceLocal((::TSnHeartbeat*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnHeartbeat*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnClockSetInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnClockSetInfo(void *p = 0);
   static void *newArray_TSnClockSetInfo(Long_t size, void *p);
   static void delete_TSnClockSetInfo(void *p);
   static void deleteArray_TSnClockSetInfo(void *p);
   static void destruct_TSnClockSetInfo(void *p);

   // Schema evolution read functions
   static void read_TSnClockSetInfo_0( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
      static TClassRef cls("TSnClockSetInfo");
      static Long_t offset_fAbsCache = cls->GetDataMemberOffset("fAbsCache");
      TTimeStamp*& fAbsCache = *(TTimeStamp**)(target+offset_fAbsCache);
      TSnClockSetInfo* newObj = (TSnClockSetInfo*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
      if (fAbsCache!=0) { delete fAbsCache; fAbsCache=0; } 
   }

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnClockSetInfo*)
   {
      ::TSnClockSetInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnClockSetInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnClockSetInfo", ::TSnClockSetInfo::Class_Version(), "./evdat/TSnClockSetInfo.h", 9,
                  typeid(::TSnClockSetInfo), DefineBehavior(ptr, ptr),
                  &::TSnClockSetInfo::Dictionary, isa_proxy, 4,
                  sizeof(::TSnClockSetInfo) );
      instance.SetNew(&new_TSnClockSetInfo);
      instance.SetNewArray(&newArray_TSnClockSetInfo);
      instance.SetDelete(&delete_TSnClockSetInfo);
      instance.SetDeleteArray(&deleteArray_TSnClockSetInfo);
      instance.SetDestructor(&destruct_TSnClockSetInfo);

      ROOT::TSchemaHelper* rule;

      // the io read rules
      std::vector<ROOT::TSchemaHelper> readrules(1);
      rule = &readrules[0];
      rule->fSourceClass = "TSnClockSetInfo";
      rule->fTarget      = "fAbsCache";
      rule->fSource      = "";
      rule->fFunctionPtr = (void *)G__func2void( read_TSnClockSetInfo_0);
      rule->fCode        = " if (fAbsCache!=0) { delete fAbsCache; fAbsCache=0; } ";
      rule->fVersion     = "[1-]";
      instance.SetReadRules( readrules );
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnClockSetInfo*)
   {
      return GenerateInitInstanceLocal((::TSnClockSetInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnClockSetInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace NSnHashUtils {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void NSnHashUtils_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("NSnHashUtils", 0 /*version*/, "./evdat/NSnHashUtils.h", 13,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &NSnHashUtils_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void NSnHashUtils_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void TSnWindData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnWindData(void *p = 0);
   static void *newArray_TSnWindData(Long_t size, void *p);
   static void delete_TSnWindData(void *p);
   static void deleteArray_TSnWindData(void *p);
   static void destruct_TSnWindData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnWindData*)
   {
      ::TSnWindData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnWindData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnWindData", ::TSnWindData::Class_Version(), "./evdat/TSnWindData.h", 9,
                  typeid(::TSnWindData), DefineBehavior(ptr, ptr),
                  &::TSnWindData::Dictionary, isa_proxy, 4,
                  sizeof(::TSnWindData) );
      instance.SetNew(&new_TSnWindData);
      instance.SetNewArray(&newArray_TSnWindData);
      instance.SetDelete(&delete_TSnWindData);
      instance.SetDeleteArray(&deleteArray_TSnWindData);
      instance.SetDestructor(&destruct_TSnWindData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnWindData*)
   {
      return GenerateInitInstanceLocal((::TSnWindData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnWindData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TSnCompressor::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnCompressor::Class_Name()
{
   return "TSnCompressor";
}

//______________________________________________________________________________
const char *TSnCompressor::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCompressor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnCompressor::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCompressor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnCompressor::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCompressor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnCompressor::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCompressor*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnTrgInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnTrgInfo::Class_Name()
{
   return "TSnTrgInfo";
}

//______________________________________________________________________________
const char *TSnTrgInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnTrgInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnTrgInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnTrgInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnTrgInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnTrgInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnTrgInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnTrgInfo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnEventHeader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnEventHeader::Class_Name()
{
   return "TSnEventHeader";
}

//______________________________________________________________________________
const char *TSnEventHeader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnEventHeader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnEventHeader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnEventHeader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEventHeader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnRawWaveform::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnRawWaveform::Class_Name()
{
   return "TSnRawWaveform";
}

//______________________________________________________________________________
const char *TSnRawWaveform::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnRawWaveform*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnRawWaveform::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnRawWaveform*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnRawWaveform::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnRawWaveform*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnRawWaveform::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnRawWaveform*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnEvent::Class_Name()
{
   return "TSnEvent";
}

//______________________________________________________________________________
const char *TSnEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnEventMetadata::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnEventMetadata::Class_Name()
{
   return "TSnEventMetadata";
}

//______________________________________________________________________________
const char *TSnEventMetadata::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEventMetadata*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnEventMetadata::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnEventMetadata*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnEventMetadata::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEventMetadata*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnEventMetadata::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnEventMetadata*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnStatusUpdate::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnStatusUpdate::Class_Name()
{
   return "TSnStatusUpdate";
}

//______________________________________________________________________________
const char *TSnStatusUpdate::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnStatusUpdate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnStatusUpdate::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnStatusUpdate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnStatusUpdate::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnStatusUpdate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnStatusUpdate::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnStatusUpdate*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnStatusUpdate::TObsoletePars::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnStatusUpdate::TObsoletePars::Class_Name()
{
   return "TSnStatusUpdate::TObsoletePars";
}

//______________________________________________________________________________
const char *TSnStatusUpdate::TObsoletePars::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnStatusUpdate::TObsoletePars*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnStatusUpdate::TObsoletePars::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnStatusUpdate::TObsoletePars*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnStatusUpdate::TObsoletePars::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnStatusUpdate::TObsoletePars*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnStatusUpdate::TObsoletePars::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnStatusUpdate::TObsoletePars*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnPowerReading::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnPowerReading::Class_Name()
{
   return "TSnPowerReading";
}

//______________________________________________________________________________
const char *TSnPowerReading::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPowerReading*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnPowerReading::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPowerReading*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnPowerReading::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPowerReading*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnPowerReading::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPowerReading*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnPowerReading::TObsoletePars::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnPowerReading::TObsoletePars::Class_Name()
{
   return "TSnPowerReading::TObsoletePars";
}

//______________________________________________________________________________
const char *TSnPowerReading::TObsoletePars::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPowerReading::TObsoletePars*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnPowerReading::TObsoletePars::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPowerReading::TObsoletePars*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnPowerReading::TObsoletePars::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPowerReading::TObsoletePars*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnPowerReading::TObsoletePars::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPowerReading::TObsoletePars*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnHeartbeat::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnHeartbeat::Class_Name()
{
   return "TSnHeartbeat";
}

//______________________________________________________________________________
const char *TSnHeartbeat::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnHeartbeat*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnHeartbeat::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnHeartbeat*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnHeartbeat::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnHeartbeat*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnHeartbeat::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnHeartbeat*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnClockSetInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnClockSetInfo::Class_Name()
{
   return "TSnClockSetInfo";
}

//______________________________________________________________________________
const char *TSnClockSetInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnClockSetInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnClockSetInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnClockSetInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnClockSetInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnClockSetInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnClockSetInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnClockSetInfo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnWindData::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnWindData::Class_Name()
{
   return "TSnWindData";
}

//______________________________________________________________________________
const char *TSnWindData::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnWindData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnWindData::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnWindData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnWindData::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnWindData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnWindData::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnWindData*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TSnCompressor::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnCompressor.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnCompressor::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnCompressor::Class(),this);
   }
}

//______________________________________________________________________________
void TSnCompressor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnCompressor.
      TClass *R__cl = ::TSnCompressor::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnCompressor(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TSnCompressor : new ::TSnCompressor;
   }
   static void *newArray_TSnCompressor(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TSnCompressor[nElements] : new ::TSnCompressor[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnCompressor(void *p) {
      delete ((::TSnCompressor*)p);
   }
   static void deleteArray_TSnCompressor(void *p) {
      delete [] ((::TSnCompressor*)p);
   }
   static void destruct_TSnCompressor(void *p) {
      typedef ::TSnCompressor current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnCompressor

//______________________________________________________________________________
void TSnEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnEvent::Class(),this);
   }
}

//______________________________________________________________________________
void TSnEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnEvent.
      TClass *R__cl = ::TSnEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHeader", &fHeader);
      R__insp.InspectMember(fHeader, "fHeader.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawWvfm", &fRawWvfm);
      R__insp.InspectMember(fRawWvfm, "fRawWvfm.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnEvent(void *p) {
      return  p ? new(p) ::TSnEvent : new ::TSnEvent;
   }
   static void *newArray_TSnEvent(Long_t nElements, void *p) {
      return p ? new(p) ::TSnEvent[nElements] : new ::TSnEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnEvent(void *p) {
      delete ((::TSnEvent*)p);
   }
   static void deleteArray_TSnEvent(void *p) {
      delete [] ((::TSnEvent*)p);
   }
   static void destruct_TSnEvent(void *p) {
      typedef ::TSnEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnEvent

//______________________________________________________________________________
void TSnEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnEventHeader.
      TClass *R__cl = ::TSnEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.InspectMember(fTime, "fTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNum", &fNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrgNum", &fTrgNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDTms", &fDTms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrgInfo", &fTrgInfo);
      R__insp.InspectMember(fTrgInfo, "fTrgInfo.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnEventHeader(void *p) {
      return  p ? new(p) ::TSnEventHeader : new ::TSnEventHeader;
   }
   static void *newArray_TSnEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnEventHeader[nElements] : new ::TSnEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnEventHeader(void *p) {
      delete ((::TSnEventHeader*)p);
   }
   static void deleteArray_TSnEventHeader(void *p) {
      delete [] ((::TSnEventHeader*)p);
   }
   static void destruct_TSnEventHeader(void *p) {
      typedef ::TSnEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnEventHeader

//______________________________________________________________________________
void TSnEventMetadata::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnEventMetadata.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnEventMetadata::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnEventMetadata::Class(),this);
   }
}

//______________________________________________________________________________
void TSnEventMetadata::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnEventMetadata.
      TClass *R__cl = ::TSnEventMetadata::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStnId", &fStnId);
      R__insp.InspectMember(fStnId, "fStnId.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRun", &fRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSeq", &fSeq);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnEventMetadata(void *p) {
      return  p ? new(p) ::TSnEventMetadata : new ::TSnEventMetadata;
   }
   static void *newArray_TSnEventMetadata(Long_t nElements, void *p) {
      return p ? new(p) ::TSnEventMetadata[nElements] : new ::TSnEventMetadata[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnEventMetadata(void *p) {
      delete ((::TSnEventMetadata*)p);
   }
   static void deleteArray_TSnEventMetadata(void *p) {
      delete [] ((::TSnEventMetadata*)p);
   }
   static void destruct_TSnEventMetadata(void *p) {
      typedef ::TSnEventMetadata current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnEventMetadata

//______________________________________________________________________________
void TSnRawWaveform::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnRawWaveform.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnRawWaveform::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnRawWaveform::Class(),this);
   }
}

//______________________________________________________________________________
void TSnRawWaveform::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnRawWaveform.
      TClass *R__cl = ::TSnRawWaveform::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fData[512]", fData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStationCRC", &fStationCRC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCRC", &fCRC);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnRawWaveform(void *p) {
      return  p ? new(p) ::TSnRawWaveform : new ::TSnRawWaveform;
   }
   static void *newArray_TSnRawWaveform(Long_t nElements, void *p) {
      return p ? new(p) ::TSnRawWaveform[nElements] : new ::TSnRawWaveform[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnRawWaveform(void *p) {
      delete ((::TSnRawWaveform*)p);
   }
   static void deleteArray_TSnRawWaveform(void *p) {
      delete [] ((::TSnRawWaveform*)p);
   }
   static void destruct_TSnRawWaveform(void *p) {
      typedef ::TSnRawWaveform current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnRawWaveform

//______________________________________________________________________________
void TSnStatusUpdate::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnStatusUpdate.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnStatusUpdate::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnStatusUpdate::Class(),this);
   }
}

//______________________________________________________________________________
void TSnStatusUpdate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnStatusUpdate.
      TClass *R__cl = ::TSnStatusUpdate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMacAdr", &fMacAdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConfLabel", &fConfLabel);
      R__insp.InspectMember(fConfLabel, "fConfLabel.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRun", &fRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.InspectMember(fTime, "fTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWvLoseLSB", &fWvLoseLSB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWvLoseMSB", &fWvLoseMSB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWvBaseline", &fWvBaseline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSeq", &fSeq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThmRate", &fThmRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvtRate", &fEvtRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFreeMB", &fFreeMB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWDreset", &fWDreset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fObs", &fObs);
      R__insp.InspectMember(fObs, "fObs.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHasObs", &fHasObs);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnStatusUpdate(void *p) {
      return  p ? new(p) ::TSnStatusUpdate : new ::TSnStatusUpdate;
   }
   static void *newArray_TSnStatusUpdate(Long_t nElements, void *p) {
      return p ? new(p) ::TSnStatusUpdate[nElements] : new ::TSnStatusUpdate[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnStatusUpdate(void *p) {
      delete ((::TSnStatusUpdate*)p);
   }
   static void deleteArray_TSnStatusUpdate(void *p) {
      delete [] ((::TSnStatusUpdate*)p);
   }
   static void destruct_TSnStatusUpdate(void *p) {
      typedef ::TSnStatusUpdate current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnStatusUpdate

//______________________________________________________________________________
void TSnStatusUpdate::TObsoletePars::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnStatusUpdate::TObsoletePars.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnStatusUpdate::TObsoletePars::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnStatusUpdate::TObsoletePars::Class(),this);
   }
}

//______________________________________________________________________________
void TSnStatusUpdate::TObsoletePars::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnStatusUpdate::TObsoletePars.
      TClass *R__cl = ::TSnStatusUpdate::TObsoletePars::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNfiles", &fNfiles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotKB", &fTotKB);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnStatusUpdatecLcLTObsoletePars(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TSnStatusUpdate::TObsoletePars : new ::TSnStatusUpdate::TObsoletePars;
   }
   static void *newArray_TSnStatusUpdatecLcLTObsoletePars(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TSnStatusUpdate::TObsoletePars[nElements] : new ::TSnStatusUpdate::TObsoletePars[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnStatusUpdatecLcLTObsoletePars(void *p) {
      delete ((::TSnStatusUpdate::TObsoletePars*)p);
   }
   static void deleteArray_TSnStatusUpdatecLcLTObsoletePars(void *p) {
      delete [] ((::TSnStatusUpdate::TObsoletePars*)p);
   }
   static void destruct_TSnStatusUpdatecLcLTObsoletePars(void *p) {
      typedef ::TSnStatusUpdate::TObsoletePars current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnStatusUpdate::TObsoletePars

//______________________________________________________________________________
void TSnTrgInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnTrgInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnTrgInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnTrgInfo::Class(),this);
   }
}

//______________________________________________________________________________
void TSnTrgInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnTrgInfo.
      TClass *R__cl = ::TSnTrgInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrgBits", &fTrgBits);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnTrgInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TSnTrgInfo : new ::TSnTrgInfo;
   }
   static void *newArray_TSnTrgInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TSnTrgInfo[nElements] : new ::TSnTrgInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnTrgInfo(void *p) {
      delete ((::TSnTrgInfo*)p);
   }
   static void deleteArray_TSnTrgInfo(void *p) {
      delete [] ((::TSnTrgInfo*)p);
   }
   static void destruct_TSnTrgInfo(void *p) {
      typedef ::TSnTrgInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnTrgInfo

//______________________________________________________________________________
void TSnPowerReading::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnPowerReading.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnPowerReading::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnPowerReading::Class(),this);
   }
}

//______________________________________________________________________________
void TSnPowerReading::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnPowerReading.
      TClass *R__cl = ::TSnPowerReading::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "faveV1", &faveV1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "faveV2", &faveV2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frmsV1", &frmsV1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frmsV2", &frmsV2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.InspectMember(fTime, "fTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fObs", &fObs);
      R__insp.InspectMember(fObs, "fObs.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHasObs", &fHasObs);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnPowerReading(void *p) {
      return  p ? new(p) ::TSnPowerReading : new ::TSnPowerReading;
   }
   static void *newArray_TSnPowerReading(Long_t nElements, void *p) {
      return p ? new(p) ::TSnPowerReading[nElements] : new ::TSnPowerReading[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnPowerReading(void *p) {
      delete ((::TSnPowerReading*)p);
   }
   static void deleteArray_TSnPowerReading(void *p) {
      delete [] ((::TSnPowerReading*)p);
   }
   static void destruct_TSnPowerReading(void *p) {
      typedef ::TSnPowerReading current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnPowerReading

//______________________________________________________________________________
void TSnPowerReading::TObsoletePars::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnPowerReading::TObsoletePars.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnPowerReading::TObsoletePars::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnPowerReading::TObsoletePars::Class(),this);
   }
}

//______________________________________________________________________________
void TSnPowerReading::TObsoletePars::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnPowerReading::TObsoletePars.
      TClass *R__cl = ::TSnPowerReading::TObsoletePars::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVadc1", &fVadc1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVadc2", &fVadc2);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnPowerReadingcLcLTObsoletePars(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TSnPowerReading::TObsoletePars : new ::TSnPowerReading::TObsoletePars;
   }
   static void *newArray_TSnPowerReadingcLcLTObsoletePars(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TSnPowerReading::TObsoletePars[nElements] : new ::TSnPowerReading::TObsoletePars[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnPowerReadingcLcLTObsoletePars(void *p) {
      delete ((::TSnPowerReading::TObsoletePars*)p);
   }
   static void deleteArray_TSnPowerReadingcLcLTObsoletePars(void *p) {
      delete [] ((::TSnPowerReading::TObsoletePars*)p);
   }
   static void destruct_TSnPowerReadingcLcLTObsoletePars(void *p) {
      typedef ::TSnPowerReading::TObsoletePars current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnPowerReading::TObsoletePars

//______________________________________________________________________________
void TSnHeartbeat::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnHeartbeat.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnHeartbeat::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnHeartbeat::Class(),this);
   }
}

//______________________________________________________________________________
void TSnHeartbeat::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnHeartbeat.
      TClass *R__cl = ::TSnHeartbeat::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNum", &fNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.InspectMember(fTime, "fTime.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnHeartbeat(void *p) {
      return  p ? new(p) ::TSnHeartbeat : new ::TSnHeartbeat;
   }
   static void *newArray_TSnHeartbeat(Long_t nElements, void *p) {
      return p ? new(p) ::TSnHeartbeat[nElements] : new ::TSnHeartbeat[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnHeartbeat(void *p) {
      delete ((::TSnHeartbeat*)p);
   }
   static void deleteArray_TSnHeartbeat(void *p) {
      delete [] ((::TSnHeartbeat*)p);
   }
   static void destruct_TSnHeartbeat(void *p) {
      typedef ::TSnHeartbeat current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnHeartbeat

//______________________________________________________________________________
void TSnClockSetInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnClockSetInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnClockSetInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnClockSetInfo::Class(),this);
   }
}

//______________________________________________________________________________
void TSnClockSetInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnClockSetInfo.
      TClass *R__cl = ::TSnClockSetInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrevTime", &fPrevTime);
      R__insp.InspectMember(fPrevTime, "fPrevTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSetTime", &fSetTime);
      R__insp.InspectMember(fSetTime, "fSetTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrTime", &fCurrTime);
      R__insp.InspectMember(fCurrTime, "fCurrTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUSsinceSet", &fUSsinceSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAbsCache", &fAbsCache);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnClockSetInfo(void *p) {
      return  p ? new(p) ::TSnClockSetInfo : new ::TSnClockSetInfo;
   }
   static void *newArray_TSnClockSetInfo(Long_t nElements, void *p) {
      return p ? new(p) ::TSnClockSetInfo[nElements] : new ::TSnClockSetInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnClockSetInfo(void *p) {
      delete ((::TSnClockSetInfo*)p);
   }
   static void deleteArray_TSnClockSetInfo(void *p) {
      delete [] ((::TSnClockSetInfo*)p);
   }
   static void destruct_TSnClockSetInfo(void *p) {
      typedef ::TSnClockSetInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnClockSetInfo

//______________________________________________________________________________
void TSnWindData::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnWindData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnWindData::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnWindData::Class(),this);
   }
}

//______________________________________________________________________________
void TSnWindData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnWindData.
      TClass *R__cl = ::TSnWindData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWind", &fWind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.InspectMember(fTime, "fTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bSB", &bSB);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnWindData(void *p) {
      return  p ? new(p) ::TSnWindData : new ::TSnWindData;
   }
   static void *newArray_TSnWindData(Long_t nElements, void *p) {
      return p ? new(p) ::TSnWindData[nElements] : new ::TSnWindData[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnWindData(void *p) {
      delete ((::TSnWindData*)p);
   }
   static void deleteArray_TSnWindData(void *p) {
      delete [] ((::TSnWindData*)p);
   }
   static void destruct_TSnWindData(void *p) {
      typedef ::TSnWindData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnWindData

/********************************************************
* evdat/G__evdat.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__evdat();

extern "C" void G__set_cpp_environmentG__evdat() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("evdat/TSnCompressor.h");
  G__add_compiledheader("evdat/TSnEvent.h");
  G__add_compiledheader("evdat/TSnEventHeader.h");
  G__add_compiledheader("evdat/TSnEventMetadata.h");
  G__add_compiledheader("evdat/TSnRawWaveform.h");
  G__add_compiledheader("evdat/TSnStatusUpdate.h");
  G__add_compiledheader("evdat/TSnTrgInfo.h");
  G__add_compiledheader("evdat/NSnCRCUtils.h");
  G__add_compiledheader("evdat/NSnConstants.h");
  G__add_compiledheader("evdat/TSnPowerReading.h");
  G__add_compiledheader("evdat/TSnHeartbeat.h");
  G__add_compiledheader("evdat/TSnClockSetInfo.h");
  G__add_compiledheader("evdat/NSnHashUtils.h");
  G__add_compiledheader("evdat/TSnWindData.h");
  G__cpp_reset_tagtableG__evdat();
}
#include <new>
extern "C" int G__cpp_dllrevG__evdat() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TSnCompressor */
static int G__G__evdat_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCompressor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnCompressor[n];
     } else {
       p = new((void*) gvp) TSnCompressor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnCompressor;
     } else {
       p = new((void*) gvp) TSnCompressor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnCompressor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnCompressor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCompressor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnCompressor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnCompressor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnCompressor*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCompressor*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCompressor*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCompressor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCompressor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCompressor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCompressor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCompressor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__evdat_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnCompressor* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnCompressor(*(TSnCompressor*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnCompressor));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnCompressor G__TTSnCompressor;
static int G__G__evdat_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnCompressor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnCompressor*) (soff+(sizeof(TSnCompressor)*i)))->~G__TTSnCompressor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnCompressor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnCompressor*) (soff))->~G__TTSnCompressor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__evdat_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCompressor* dest = (TSnCompressor*) G__getstructoffset();
   *dest = *(TSnCompressor*) libp->para[0].ref;
   const TSnCompressor& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnTrgInfo */
static int G__G__evdat_186_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnTrgInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnTrgInfo((const UShort_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TSnTrgInfo((const UShort_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TSnTrgInfo[n];
       } else {
         p = new((void*) gvp) TSnTrgInfo[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TSnTrgInfo;
       } else {
         p = new((void*) gvp) TSnTrgInfo;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const TSnTrgInfo*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const TSnTrgInfo*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TSnTrgInfo*) G__getstructoffset())->PrintBits((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = TSnTrgInfo::GetBitsAsString((const UShort_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnTrgInfo*) G__getstructoffset())->GetBitsAsString();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const TSnTrgInfo*) G__getstructoffset())->GetTrgBits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnTrgInfo*) G__getstructoffset())->IsTrig((const UShort_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) TSnTrgInfo::IsTrig((const UShort_t) G__int(libp->para[0]), (const UShort_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnTrgInfo*) G__getstructoffset())->IsThermal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnTrgInfo*) G__getstructoffset())->IsForced());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnTrgInfo*) G__getstructoffset())->IsAdcToMBFlagged());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnTrgInfo*) G__getstructoffset())->SetTrgBits((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnTrgInfo*) G__getstructoffset())->EnableTrig((const TSnTrgInfo::ETrgBit_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnTrgInfo*) G__getstructoffset())->ToggleTrig((const TSnTrgInfo::ETrgBit_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnTrgInfo*) G__getstructoffset())->DisableTrig((const TSnTrgInfo::ETrgBit_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnTrgInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnTrgInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnTrgInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnTrgInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnTrgInfo*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnTrgInfo*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnTrgInfo*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnTrgInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnTrgInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnTrgInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnTrgInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_186_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnTrgInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__evdat_186_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnTrgInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnTrgInfo(*(TSnTrgInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnTrgInfo G__TTSnTrgInfo;
static int G__G__evdat_186_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnTrgInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnTrgInfo*) (soff+(sizeof(TSnTrgInfo)*i)))->~G__TTSnTrgInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnTrgInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnTrgInfo*) (soff))->~G__TTSnTrgInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__evdat_186_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnTrgInfo* dest = (TSnTrgInfo*) G__getstructoffset();
   *dest = *(TSnTrgInfo*) libp->para[0].ref;
   const TSnTrgInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnEventHeader */
static int G__G__evdat_188_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEventHeader[n];
     } else {
       p = new((void*) gvp) TSnEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEventHeader;
     } else {
       p = new((void*) gvp) TSnEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const TSnEventHeader*) G__getstructoffset())->GetUnixTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((const TSnEventHeader*) G__getstructoffset())->GetTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((TSnEventHeader*) G__getstructoffset())->GetTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnEventHeader*) G__getstructoffset())->GetEvtNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnEventHeader*) G__getstructoffset())->GetTrgNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnEventHeader*) G__getstructoffset())->GetDTms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnTrgInfo& obj = ((const TSnEventHeader*) G__getstructoffset())->GetTrgInfo();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnEventHeader*) G__getstructoffset())->IsThermal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnEventHeader*) G__getstructoffset())->IsForced());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnEventHeader*) G__getstructoffset())->IsAdcToMBFlagged());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEventHeader*) G__getstructoffset())->SetTime(*(TTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TSnEventHeader*) G__getstructoffset())->SetTime((const UInt_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TSnEventHeader*) G__getstructoffset())->SetTime((const UInt_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TSnEventHeader*) G__getstructoffset())->SetTime((const UInt_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TSnEventHeader*) G__getstructoffset())->SetTime((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEventHeader*) G__getstructoffset())->SetEvtNum((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEventHeader*) G__getstructoffset())->SetTrgNum((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEventHeader*) G__getstructoffset())->SetDTms((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEventHeader*) G__getstructoffset())->SetTrgInfo(*(TSnTrgInfo*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEventHeader*) G__getstructoffset())->SetTrgInfo((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_188_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__evdat_188_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnEventHeader(*(TSnEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnEventHeader G__TTSnEventHeader;
static int G__G__evdat_188_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnEventHeader*) (soff+(sizeof(TSnEventHeader)*i)))->~G__TTSnEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnEventHeader*) (soff))->~G__TTSnEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__evdat_188_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEventHeader* dest = (TSnEventHeader*) G__getstructoffset();
   *dest = *(TSnEventHeader*) libp->para[0].ref;
   const TSnEventHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* NSnConstants */
static int G__G__evdat_189_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) NSnConstants::WrapSampleNum<UChar_t>(*(unsigned char*) G__UCharref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_189_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) NSnConstants::WrapSampleNum<Short_t>(*(short*) G__Shortref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_189_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) NSnConstants::WrapSampleNum<UShort_t>(*(unsigned short*) G__UShortref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_189_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) NSnConstants::WrapSampleNum<Int_t>(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_189_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) NSnConstants::WrapSampleNum<UInt_t>(*(unsigned int*) G__UIntref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_189_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) NSnConstants::WrapSampleNum<Long64_t>(*(long long*) G__Longlongref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_189_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) NSnConstants::WrapSampleNum<ULong64_t>(*(unsigned long long*) G__ULonglongref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnRawWaveform */
static int G__G__evdat_191_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRawWaveform* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRawWaveform[n];
     } else {
       p = new((void*) gvp) TSnRawWaveform[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnRawWaveform;
     } else {
       p = new((void*) gvp) TSnRawWaveform;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnRawWaveform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) TSnRawWaveform::GetUncheckedIndex((const UChar_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) TSnRawWaveform::GetIndexOf((const UChar_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnRawWaveform*) G__getstructoffset())->GetStationCRC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnRawWaveform*) G__getstructoffset())->GetCRC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const TSnRawWaveform*) G__getstructoffset())->GetWvData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const TSnRawWaveform*) G__getstructoffset())->GetWvData((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const TSnRawWaveform*) G__getstructoffset())->GetWvData((const UChar_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRawWaveform*) G__getstructoffset())->SetStationCRC((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRawWaveform*) G__getstructoffset())->SetWvData((const UShort_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRawWaveform*) G__getstructoffset())->SetWvData((const UChar_t) G__int(libp->para[0]), (const UShort_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRawWaveform*) G__getstructoffset())->SetWvData((const UChar_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TSnRawWaveform*) G__getstructoffset())->CalcCRC();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnRawWaveform::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRawWaveform::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnRawWaveform::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnRawWaveform::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnRawWaveform*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRawWaveform::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnRawWaveform::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnRawWaveform::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_191_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnRawWaveform::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__evdat_191_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnRawWaveform* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnRawWaveform(*(TSnRawWaveform*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnRawWaveform));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnRawWaveform G__TTSnRawWaveform;
static int G__G__evdat_191_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnRawWaveform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnRawWaveform*) (soff+(sizeof(TSnRawWaveform)*i)))->~G__TTSnRawWaveform();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnRawWaveform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnRawWaveform*) (soff))->~G__TTSnRawWaveform();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__evdat_191_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnRawWaveform* dest = (TSnRawWaveform*) G__getstructoffset();
   *dest = *(TSnRawWaveform*) libp->para[0].ref;
   const TSnRawWaveform& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnEvent */
static int G__G__evdat_194_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvent[n];
     } else {
       p = new((void*) gvp) TSnEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEvent;
     } else {
       p = new((void*) gvp) TSnEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnEventHeader& obj = ((TSnEvent*) G__getstructoffset())->GetHeader();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnEventHeader& obj = ((const TSnEvent*) G__getstructoffset())->GetHeader();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((const TSnEvent*) G__getstructoffset())->GetTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnEvent*) G__getstructoffset())->GetEvtNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnEvent*) G__getstructoffset())->GetTrgNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnEvent*) G__getstructoffset())->GetDTms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnTrgInfo& obj = ((const TSnEvent*) G__getstructoffset())->GetTrgInfo();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnRawWaveform& obj = ((TSnEvent*) G__getstructoffset())->GetRawWaveform();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnRawWaveform& obj = ((const TSnEvent*) G__getstructoffset())->GetRawWaveform();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnEvent*) G__getstructoffset())->GetStationCRC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnEvent*) G__getstructoffset())->GetCRC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const TSnEvent*) G__getstructoffset())->GetWvData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const TSnEvent*) G__getstructoffset())->GetWvData((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const TSnEvent*) G__getstructoffset())->GetWvData((const UChar_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnEvent*) G__getstructoffset())->IsThermal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnEvent*) G__getstructoffset())->IsForced());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvent*) G__getstructoffset())->SetHeader(*(TSnEventHeader*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvent*) G__getstructoffset())->SetTime(*(TTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TSnEvent*) G__getstructoffset())->SetTime((const UInt_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TSnEvent*) G__getstructoffset())->SetTime((const UInt_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TSnEvent*) G__getstructoffset())->SetTime((const UInt_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TSnEvent*) G__getstructoffset())->SetTime((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvent*) G__getstructoffset())->SetEvtNum((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvent*) G__getstructoffset())->SetTrgNum((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvent*) G__getstructoffset())->SetDTms((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvent*) G__getstructoffset())->SetTrgInfo(*(TSnTrgInfo*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvent*) G__getstructoffset())->SetTrgInfo((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvent*) G__getstructoffset())->SetRawWaveform(*(TSnRawWaveform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvent*) G__getstructoffset())->SetStationCRC((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvent*) G__getstructoffset())->SetWvData((const UShort_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvent*) G__getstructoffset())->SetWvData((const UChar_t) G__int(libp->para[0]), (const UShort_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvent*) G__getstructoffset())->SetWvData((const UChar_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TSnEvent*) G__getstructoffset())->CalcCRC();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_194_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__evdat_194_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnEvent(*(TSnEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnEvent G__TTSnEvent;
static int G__G__evdat_194_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnEvent*) (soff+(sizeof(TSnEvent)*i)))->~G__TTSnEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnEvent*) (soff))->~G__TTSnEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__evdat_194_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEvent* dest = (TSnEvent*) G__getstructoffset();
   *dest = *(TSnEvent*) libp->para[0].ref;
   const TSnEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnEventMetadata */
static int G__G__evdat_195_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEventMetadata* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEventMetadata[n];
     } else {
       p = new((void*) gvp) TSnEventMetadata[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnEventMetadata;
     } else {
       p = new((void*) gvp) TSnEventMetadata;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnEventMetadata));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEventMetadata* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnEventMetadata(
(const Char_t*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TSnEventMetadata(
(const Char_t*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UShort_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnEventMetadata));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnEventMetadata*) G__getstructoffset())->GetStationId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnEventMetadata*) G__getstructoffset())->GetRunNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const TSnEventMetadata*) G__getstructoffset())->GetSeqNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEventMetadata*) G__getstructoffset())->SetStationId((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEventMetadata*) G__getstructoffset())->SetRunNum((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEventMetadata*) G__getstructoffset())->SetSeqNum((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnEventMetadata::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEventMetadata::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnEventMetadata::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnEventMetadata::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnEventMetadata*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEventMetadata::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEventMetadata::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnEventMetadata::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_195_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnEventMetadata::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__evdat_195_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnEventMetadata* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnEventMetadata(*(TSnEventMetadata*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnEventMetadata));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnEventMetadata G__TTSnEventMetadata;
static int G__G__evdat_195_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnEventMetadata*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnEventMetadata*) (soff+(sizeof(TSnEventMetadata)*i)))->~G__TTSnEventMetadata();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnEventMetadata*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnEventMetadata*) (soff))->~G__TTSnEventMetadata();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__evdat_195_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnEventMetadata* dest = (TSnEventMetadata*) G__getstructoffset();
   *dest = *(TSnEventMetadata*) libp->para[0].ref;
   const TSnEventMetadata& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnStatusUpdate */
static int G__G__evdat_196_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnStatusUpdate* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStatusUpdate[n];
     } else {
       p = new((void*) gvp) TSnStatusUpdate[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStatusUpdate;
     } else {
       p = new((void*) gvp) TSnStatusUpdate;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const TSnStatusUpdate*) G__getstructoffset())->GetMacAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnStatusUpdate*) G__getstructoffset())->GetMacAdrAsStr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnStatusUpdate*) G__getstructoffset())->GetConfLabelLen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnStatusUpdate*) G__getstructoffset())->GetConfLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const TSnStatusUpdate*) G__getstructoffset())->GetConfLabelStr();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnStatusUpdate*) G__getstructoffset())->GetRunNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((const TSnStatusUpdate*) G__getstructoffset())->GetStatusTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const TSnStatusUpdate*) G__getstructoffset())->GetWvLoseLSB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const TSnStatusUpdate*) G__getstructoffset())->GetWvLoseMSB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const TSnStatusUpdate*) G__getstructoffset())->GetWvBaseline());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const TSnStatusUpdate*) G__getstructoffset())->GetSeqNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnStatusUpdate*) G__getstructoffset())->GetThmRate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnStatusUpdate*) G__getstructoffset())->GetEvtRate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnStatusUpdate*) G__getstructoffset())->GetFreeMB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const TSnStatusUpdate*) G__getstructoffset())->GetWDReset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnStatusUpdate*) G__getstructoffset())->DidWatchdogReset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetMacAddress((const ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetConfLabel((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetRunNum((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetStatusTime(*(TTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TSnStatusUpdate*) G__getstructoffset())->SetStatusTime((const UInt_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TSnStatusUpdate*) G__getstructoffset())->SetStatusTime((const UInt_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TSnStatusUpdate*) G__getstructoffset())->SetStatusTime((const UInt_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TSnStatusUpdate*) G__getstructoffset())->SetStatusTime((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetWvLoseLSB((const UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetWvLoseMSB((const UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetWvBaseline((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetSeqNum((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetThmRate((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetEvtRate((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetFreeMB((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetWDReset((const UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnStatusUpdate*) G__getstructoffset())->HasObsParams());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnStatusUpdate*) G__getstructoffset())->GetObsNfiles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnStatusUpdate*) G__getstructoffset())->GetObsTotKB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetObsNfiles((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->SetObsTotKB((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnStatusUpdate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnStatusUpdate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnStatusUpdate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnStatusUpdate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnStatusUpdate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnStatusUpdate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnStatusUpdate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_196_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnStatusUpdate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__evdat_196_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnStatusUpdate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnStatusUpdate(*(TSnStatusUpdate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnStatusUpdate G__TTSnStatusUpdate;
static int G__G__evdat_196_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnStatusUpdate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnStatusUpdate*) (soff+(sizeof(TSnStatusUpdate)*i)))->~G__TTSnStatusUpdate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnStatusUpdate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnStatusUpdate*) (soff))->~G__TTSnStatusUpdate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__evdat_196_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnStatusUpdate* dest = (TSnStatusUpdate*) G__getstructoffset();
   *dest = *(TSnStatusUpdate*) libp->para[0].ref;
   const TSnStatusUpdate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnStatusUpdate::TObsoletePars */
static int G__G__evdat_197_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnStatusUpdate::TObsoletePars* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStatusUpdate::TObsoletePars[n];
     } else {
       p = new((void*) gvp) TSnStatusUpdate::TObsoletePars[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStatusUpdate::TObsoletePars;
     } else {
       p = new((void*) gvp) TSnStatusUpdate::TObsoletePars;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdatecLcLTObsoletePars));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_197_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnStatusUpdate::TObsoletePars::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_197_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnStatusUpdate::TObsoletePars::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_197_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnStatusUpdate::TObsoletePars::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_197_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnStatusUpdate::TObsoletePars::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_197_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnStatusUpdate::TObsoletePars*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_197_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate::TObsoletePars*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_197_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate::TObsoletePars*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_197_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStatusUpdate::TObsoletePars*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_197_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnStatusUpdate::TObsoletePars::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_197_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnStatusUpdate::TObsoletePars::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_197_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnStatusUpdate::TObsoletePars::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_197_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnStatusUpdate::TObsoletePars::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__evdat_197_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnStatusUpdate::TObsoletePars* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnStatusUpdate::TObsoletePars(*(TSnStatusUpdate::TObsoletePars*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdatecLcLTObsoletePars));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnStatusUpdate::TObsoletePars G__TTSnStatusUpdatecLcLTObsoletePars;
static int G__G__evdat_197_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnStatusUpdate::TObsoletePars*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnStatusUpdate::TObsoletePars*) (soff+(sizeof(TSnStatusUpdate::TObsoletePars)*i)))->~G__TTSnStatusUpdatecLcLTObsoletePars();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnStatusUpdate::TObsoletePars*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnStatusUpdate::TObsoletePars*) (soff))->~G__TTSnStatusUpdatecLcLTObsoletePars();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__evdat_197_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnStatusUpdate::TObsoletePars* dest = (TSnStatusUpdate::TObsoletePars*) G__getstructoffset();
   *dest = *(TSnStatusUpdate::TObsoletePars*) libp->para[0].ref;
   const TSnStatusUpdate::TObsoletePars& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* NSnCRCUtils */
static int G__G__evdat_198_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::update_crc32_normal((const UInt_t*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (const UChar_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::update_crc32_xfer((UInt_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetCRC32for((FILE*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetCRC32for((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetCRC32for<Char_t>((const char*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetCRC32for<UChar_t>((const unsigned char*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetCRC32for<Short_t>((const short*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetCRC32for<UShort_t>((const unsigned short*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetCRC32for<Int_t>((const int*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetCRC32for<UInt_t>((const unsigned int*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetCRC32for<Long64_t>((const long long*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetCRC32for<ULong64_t>((const unsigned long long*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetUpdatedCRC32for<Char_t>((UInt_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetUpdatedCRC32for<UChar_t>((UInt_t) G__int(libp->para[0]), (const unsigned char*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetUpdatedCRC32for<Short_t>((UInt_t) G__int(libp->para[0]), (const short*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetUpdatedCRC32for<UShort_t>((UInt_t) G__int(libp->para[0]), (const unsigned short*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetUpdatedCRC32for<Int_t>((UInt_t) G__int(libp->para[0]), (const int*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetUpdatedCRC32for<UInt_t>((UInt_t) G__int(libp->para[0]), (const unsigned int*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetUpdatedCRC32for<Long64_t>((UInt_t) G__int(libp->para[0]), (const long long*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_198_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) NSnCRCUtils::GetUpdatedCRC32for<ULong64_t>((UInt_t) G__int(libp->para[0]), (const unsigned long long*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnPowerReading */
static int G__G__evdat_199_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPowerReading* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPowerReading(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (TTimeStamp*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TSnPowerReading(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (TTimeStamp*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPowerReading(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) TSnPowerReading(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPowerReading(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnPowerReading(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPowerReading((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnPowerReading((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPowerReading((const Float_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) TSnPowerReading((const Float_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TSnPowerReading[n];
       } else {
         p = new((void*) gvp) TSnPowerReading[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TSnPowerReading;
       } else {
         p = new((void*) gvp) TSnPowerReading;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReading));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnPowerReading*) G__getstructoffset())->GetAveV1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnPowerReading*) G__getstructoffset())->GetAveV2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnPowerReading*) G__getstructoffset())->GetRmsV1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnPowerReading*) G__getstructoffset())->GetRmsV2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((const TSnPowerReading*) G__getstructoffset())->GetTimeStamp();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((TSnPowerReading*) G__getstructoffset())->GetTimeStamp();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnPowerReading*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const TSnPowerReading*) G__getstructoffset())->GetCalVolt((const Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const TSnPowerReading*) G__getstructoffset())->GetCalVolt());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) ((const TSnPowerReading*) G__getstructoffset())->GetCalCurr((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((const TSnPowerReading*) G__getstructoffset())->GetCalCurr((const Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const TSnPowerReading*) G__getstructoffset())->GetCalCurr());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading*) G__getstructoffset())->SetAveV1((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading*) G__getstructoffset())->SetAveV2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading*) G__getstructoffset())->SetRmsV1((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading*) G__getstructoffset())->SetRmsV2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading*) G__getstructoffset())->SetTime(*(TTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading*) G__getstructoffset())->SetTime((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading*) G__getstructoffset())->Set((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, *(TTimeStamp*) libp->para[4].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading*) G__getstructoffset())->Set((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, *(UInt_t*) G__UIntref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnPowerReading*) G__getstructoffset())->HasObsParams());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const TSnPowerReading*) G__getstructoffset())->GetObsVadc1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const TSnPowerReading*) G__getstructoffset())->GetObsVadc2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading*) G__getstructoffset())->SetObsVadc1((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading*) G__getstructoffset())->SetObsVadc2((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnPowerReading::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPowerReading::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnPowerReading::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnPowerReading::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPowerReading::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPowerReading::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPowerReading::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_199_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPowerReading::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__evdat_199_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnPowerReading* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnPowerReading(*(TSnPowerReading*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReading));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnPowerReading G__TTSnPowerReading;
static int G__G__evdat_199_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnPowerReading*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnPowerReading*) (soff+(sizeof(TSnPowerReading)*i)))->~G__TTSnPowerReading();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnPowerReading*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnPowerReading*) (soff))->~G__TTSnPowerReading();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__evdat_199_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPowerReading* dest = (TSnPowerReading*) G__getstructoffset();
   *dest = *(TSnPowerReading*) libp->para[0].ref;
   const TSnPowerReading& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnPowerReading::TObsoletePars */
static int G__G__evdat_200_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPowerReading::TObsoletePars* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPowerReading::TObsoletePars[n];
     } else {
       p = new((void*) gvp) TSnPowerReading::TObsoletePars[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPowerReading::TObsoletePars;
     } else {
       p = new((void*) gvp) TSnPowerReading::TObsoletePars;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReadingcLcLTObsoletePars));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_200_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnPowerReading::TObsoletePars::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_200_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPowerReading::TObsoletePars::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_200_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnPowerReading::TObsoletePars::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_200_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnPowerReading::TObsoletePars::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_200_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnPowerReading::TObsoletePars*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_200_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading::TObsoletePars*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_200_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading::TObsoletePars*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_200_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPowerReading::TObsoletePars*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_200_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPowerReading::TObsoletePars::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_200_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPowerReading::TObsoletePars::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_200_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPowerReading::TObsoletePars::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_200_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPowerReading::TObsoletePars::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__evdat_200_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnPowerReading::TObsoletePars* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnPowerReading::TObsoletePars(*(TSnPowerReading::TObsoletePars*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReadingcLcLTObsoletePars));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnPowerReading::TObsoletePars G__TTSnPowerReadingcLcLTObsoletePars;
static int G__G__evdat_200_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnPowerReading::TObsoletePars*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnPowerReading::TObsoletePars*) (soff+(sizeof(TSnPowerReading::TObsoletePars)*i)))->~G__TTSnPowerReadingcLcLTObsoletePars();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnPowerReading::TObsoletePars*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnPowerReading::TObsoletePars*) (soff))->~G__TTSnPowerReadingcLcLTObsoletePars();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__evdat_200_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPowerReading::TObsoletePars* dest = (TSnPowerReading::TObsoletePars*) G__getstructoffset();
   *dest = *(TSnPowerReading::TObsoletePars*) libp->para[0].ref;
   const TSnPowerReading::TObsoletePars& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnHeartbeat */
static int G__G__evdat_201_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnHeartbeat* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnHeartbeat[n];
     } else {
       p = new((void*) gvp) TSnHeartbeat[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnHeartbeat;
     } else {
       p = new((void*) gvp) TSnHeartbeat;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnHeartbeat));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnHeartbeat* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnHeartbeat((const UInt_t) G__int(libp->para[0]), *(TTimeStamp*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) TSnHeartbeat((const UInt_t) G__int(libp->para[0]), *(TTimeStamp*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnHeartbeat));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnHeartbeat*) G__getstructoffset())->GetNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((const TSnHeartbeat*) G__getstructoffset())->GetTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((TSnHeartbeat*) G__getstructoffset())->GetTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnHeartbeat*) G__getstructoffset())->GetUnixTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnHeartbeat*) G__getstructoffset())->SetNum((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnHeartbeat*) G__getstructoffset())->SetTime(*(TTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnHeartbeat*) G__getstructoffset())->SetUnixTime((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnHeartbeat::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnHeartbeat::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnHeartbeat::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnHeartbeat::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnHeartbeat*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnHeartbeat::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnHeartbeat::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnHeartbeat::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_201_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnHeartbeat::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__evdat_201_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnHeartbeat* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnHeartbeat(*(TSnHeartbeat*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnHeartbeat));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnHeartbeat G__TTSnHeartbeat;
static int G__G__evdat_201_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnHeartbeat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnHeartbeat*) (soff+(sizeof(TSnHeartbeat)*i)))->~G__TTSnHeartbeat();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnHeartbeat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnHeartbeat*) (soff))->~G__TTSnHeartbeat();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__evdat_201_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnHeartbeat* dest = (TSnHeartbeat*) G__getstructoffset();
   *dest = *(TSnHeartbeat*) libp->para[0].ref;
   const TSnHeartbeat& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnClockSetInfo */
static int G__G__evdat_202_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnClockSetInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnClockSetInfo[n];
     } else {
       p = new((void*) gvp) TSnClockSetInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnClockSetInfo;
     } else {
       p = new((void*) gvp) TSnClockSetInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnClockSetInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnClockSetInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnClockSetInfo(*(TSnClockSetInfo*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TSnClockSetInfo(*(TSnClockSetInfo*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnClockSetInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnClockSetInfo& obj = ((TSnClockSetInfo*) G__getstructoffset())->operator=(*((TSnClockSetInfo*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnClockSetInfo::Swap(*(TSnClockSetInfo*) libp->para[0].ref, *(TSnClockSetInfo*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnClockSetInfo*) G__getstructoffset())->ClearAbsCache();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((const TSnClockSetInfo*) G__getstructoffset())->GetPrevTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((const TSnClockSetInfo*) G__getstructoffset())->GetSetTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((const TSnClockSetInfo*) G__getstructoffset())->GetCurrTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnClockSetInfo*) G__getstructoffset())->GetUSsinceSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnClockSetInfo*) G__getstructoffset())->GetUSsinceSetU());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((const TSnClockSetInfo*) G__getstructoffset())->CalcAbsCurrTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TTimeStamp* pobj;
         TTimeStamp xobj = TSnClockSetInfo::CalcAbsTime(*(TTimeStamp*) libp->para[0].ref, *(TTimeStamp*) libp->para[1].ref
, (const UInt_t) G__int(libp->para[2]));
         pobj = new TTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TTimeStamp* pobj;
         TTimeStamp xobj = TSnClockSetInfo::CalcAbsTime(*(TTimeStamp*) libp->para[0].ref, *(TSnEventHeader*) libp->para[1].ref);
         pobj = new TTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TTimeStamp* pobj;
         TTimeStamp xobj = TSnClockSetInfo::CalcAbsTime(*(TSnClockSetInfo*) libp->para[0].ref, *(TSnEventHeader*) libp->para[1].ref);
         pobj = new TTimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnClockSetInfo*) G__getstructoffset())->SetPrevTime(*(TTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnClockSetInfo*) G__getstructoffset())->SetSetTime(*(TTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnClockSetInfo*) G__getstructoffset())->SetCurrTime(*(TTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnClockSetInfo*) G__getstructoffset())->SetUSsinceSet((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnClockSetInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnClockSetInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnClockSetInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnClockSetInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnClockSetInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnClockSetInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnClockSetInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnClockSetInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_202_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnClockSetInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnClockSetInfo G__TTSnClockSetInfo;
static int G__G__evdat_202_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnClockSetInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnClockSetInfo*) (soff+(sizeof(TSnClockSetInfo)*i)))->~G__TTSnClockSetInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnClockSetInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnClockSetInfo*) (soff))->~G__TTSnClockSetInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* NSnHashUtils */
static int G__G__evdat_203_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      NSnHashUtils::HashCombine(*(ULong_t*) G__ULongref(&libp->para[0]), *(ULong_t*) G__ULongref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_203_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      NSnHashUtils::HashCombine(*(ULong_t*) G__ULongref(&libp->para[0]), *(TObject*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_203_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      NSnHashUtils::HashCombine(*(ULong_t*) G__ULongref(&libp->para[0]), *(TString*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnWindData */
static int G__G__evdat_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnWindData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnWindData[n];
     } else {
       p = new((void*) gvp) TSnWindData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnWindData;
     } else {
       p = new((void*) gvp) TSnWindData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnWindData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnWindData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnWindData((const Double_t) G__double(libp->para[0]), *(TTimeStamp*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) TSnWindData((const Double_t) G__double(libp->para[0]), *(TTimeStamp*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnWindData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnWindData*) G__getstructoffset())->GetWind());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((const TSnWindData*) G__getstructoffset())->GetTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTimeStamp& obj = ((TSnWindData*) G__getstructoffset())->GetTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnWindData*) G__getstructoffset())->GetUnixTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnWindData*) G__getstructoffset())->SetWind((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnWindData*) G__getstructoffset())->SetTime(*(TTimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnWindData*) G__getstructoffset())->SetUnixTime((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnWindData*) G__getstructoffset())->SetSB((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnWindData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnWindData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnWindData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnWindData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnWindData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnWindData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnWindData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnWindData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__evdat_204_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnWindData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__evdat_204_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnWindData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnWindData(*(TSnWindData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__evdatLN_TSnWindData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnWindData G__TTSnWindData;
static int G__G__evdat_204_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnWindData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnWindData*) (soff+(sizeof(TSnWindData)*i)))->~G__TTSnWindData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnWindData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnWindData*) (soff))->~G__TTSnWindData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__evdat_204_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnWindData* dest = (TSnWindData*) G__getstructoffset();
   *dest = *(TSnWindData*) libp->para[0].ref;
   const TSnWindData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TSnCompressor */

/* TSnTrgInfo */

/* TSnEventHeader */

/* NSnConstants */

/* TSnRawWaveform */

/* TSnEvent */

/* TSnEventMetadata */

/* TSnStatusUpdate */

/* TSnStatusUpdate::TObsoletePars */

/* NSnCRCUtils */

/* TSnPowerReading */

/* TSnPowerReading::TObsoletePars */

/* TSnHeartbeat */

/* TSnClockSetInfo */

/* NSnHashUtils */

/* TSnWindData */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__evdat {
 public:
  G__Sizep2memfuncG__evdat(): p(&G__Sizep2memfuncG__evdat::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__evdat::*p)();
};

size_t G__get_sizep2memfuncG__evdat()
{
  G__Sizep2memfuncG__evdat a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__evdat() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__evdatLN_TSnEventHeader))) {
     TSnEventHeader *G__Lderived;
     G__Lderived=(TSnEventHeader*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnEventHeader),G__get_linked_tagnum(&G__G__evdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__evdatLN_TSnRawWaveform))) {
     TSnRawWaveform *G__Lderived;
     G__Lderived=(TSnRawWaveform*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnRawWaveform),G__get_linked_tagnum(&G__G__evdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__evdatLN_TSnEvent))) {
     TSnEvent *G__Lderived;
     G__Lderived=(TSnEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnEvent),G__get_linked_tagnum(&G__G__evdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__evdatLN_TSnEventMetadata))) {
     TSnEventMetadata *G__Lderived;
     G__Lderived=(TSnEventMetadata*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnEventMetadata),G__get_linked_tagnum(&G__G__evdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdate))) {
     TSnStatusUpdate *G__Lderived;
     G__Lderived=(TSnStatusUpdate*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdate),G__get_linked_tagnum(&G__G__evdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReading))) {
     TSnPowerReading *G__Lderived;
     G__Lderived=(TSnPowerReading*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReading),G__get_linked_tagnum(&G__G__evdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__evdatLN_TSnHeartbeat))) {
     TSnHeartbeat *G__Lderived;
     G__Lderived=(TSnHeartbeat*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnHeartbeat),G__get_linked_tagnum(&G__G__evdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__evdatLN_TSnClockSetInfo))) {
     TSnClockSetInfo *G__Lderived;
     G__Lderived=(TSnClockSetInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnClockSetInfo),G__get_linked_tagnum(&G__G__evdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__evdatLN_TSnWindData))) {
     TSnWindData *G__Lderived;
     G__Lderived=(TSnWindData*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnWindData),G__get_linked_tagnum(&G__G__evdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__evdat() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 8 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("ULong64_t",109,-1,0,-1);
   G__setnewtype(-1,"Portable unsigned long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__evdatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__evdatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__evdatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__evdatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__evdatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__evdatLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__evdatLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__evdatLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__evdatLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__evdatLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Byte_t",98,-1,0,G__get_linked_tagnum(&G__G__evdatLN_TSnCompressor));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TSnCompressor */
static void G__setup_memvarTSnCompressor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnCompressor));
   { TSnCompressor *p; p=(TSnCompressor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnTrgInfo */
static void G__setup_memvarTSnTrgInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfo));
   { TSnTrgInfo *p; p=(TSnTrgInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfocLcLETrgBit_t),-1,-2,1,G__FastAllocString(4096).Format("kThermal=%lldLL",(long long)TSnTrgInfo::kThermal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfocLcLETrgBit_t),-1,-2,1,G__FastAllocString(4096).Format("kForced=%lldLL",(long long)TSnTrgInfo::kForced).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfocLcLETrgBit_t),-1,-2,1,G__FastAllocString(4096).Format("kExternal=%lldLL",(long long)TSnTrgInfo::kExternal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfocLcLETrgBit_t),-1,-2,1,G__FastAllocString(4096).Format("kAdcToMBflag=%lldLL",(long long)TSnTrgInfo::kAdcToMBflag).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fTrgBits=",0,"trigger bit word");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnEventHeader */
static void G__setup_memvarTSnEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnEventHeader));
   { TSnEventHeader *p; p=(TSnEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp),-1,-1,4,"fTime=",0,"event time");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNum=",0,"event number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTrgNum=",0,"trigger number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDTms=",0,"delta(T) since last event in ms");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfo),-1,-1,4,"fTrgInfo=",0,"trigger bit word");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* NSnConstants */
static void G__setup_memvarNSnConstants(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_NSnConstants));
   {
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("UChar_t"),-2,1,G__FastAllocString(4096).Format("kNchans=%lluULL",(unsigned long long)NSnConstants::kNchans).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("UChar_t"),-2,1,G__FastAllocString(4096).Format("kNdacs=%lluULL",(unsigned long long)NSnConstants::kNdacs).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("UChar_t"),-2,1,G__FastAllocString(4096).Format("kNsamps=%lluULL",(unsigned long long)NSnConstants::kNsamps).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,114,0,1,-1,G__defined_typename("UShort_t"),-2,1,G__FastAllocString(4096).Format("kTotSamps=%lluULL",(unsigned long long)NSnConstants::kTotSamps).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,114,0,1,-1,G__defined_typename("UShort_t"),-2,1,G__FastAllocString(4096).Format("kTotDacs=%lluULL",(unsigned long long)NSnConstants::kTotDacs).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("UChar_t"),-2,1,G__FastAllocString(4096).Format("kMaxPlasV1=%lluULL",(unsigned long long)NSnConstants::kMaxPlasV1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("UChar_t"),-2,1,G__FastAllocString(4096).Format("kMaxPlas=%lluULL",(unsigned long long)NSnConstants::kMaxPlas).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,114,0,1,-1,G__defined_typename("UShort_t"),-2,1,G__FastAllocString(4096).Format("kNadcs=%lluULL",(unsigned long long)NSnConstants::kNadcs).data(),0,(char*)NULL);
   G__memvar_setup((void*)(&NSnConstants::kSampRate),102,0,1,-1,G__defined_typename("Float_t"),-2,1,"kSampRate=",0,"GHz");
   }
   G__tag_memvar_reset();
}


   /* TSnRawWaveform */
static void G__setup_memvarTSnRawWaveform(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnRawWaveform));
   { TSnRawWaveform *p; p=(TSnRawWaveform*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fData[512]=",0,"the waveform data. use C array so it can be processed by TTree::Draw");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fStationCRC=",0,"32-bit CRC of the waveform data calc by the station");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fCRC=",0,"32-bit CRC of the waveform data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnEvent */
static void G__setup_memvarTSnEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnEvent));
   { TSnEvent *p; p=(TSnEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TSnEventHeader),-1,-1,4,"fHeader=",0,"the event header");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TSnRawWaveform),-1,-1,4,"fRawWvfm=",0,"the raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnEventMetadata */
static void G__setup_memvarTSnEventMetadata(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnEventMetadata));
   { TSnEventMetadata *p; p=(TSnEventMetadata*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TString),-1,-1,4,"fStnId=",0,"station ID = mac address of the mbed");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fRun=",0,"run number");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fSeq=",0,"sequence number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnStatusUpdate */
static void G__setup_memvarTSnStatusUpdate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdate));
   { TSnStatusUpdate *p; p=(TSnStatusUpdate*)0x1000; if (p) { }
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fMacAdr=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TString),-1,-1,4,"fConfLabel=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fRun=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp),-1,-1,4,"fTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fWvLoseLSB=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fWvLoseMSB=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fWvBaseline=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fSeq=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThmRate=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEvtRate=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFreeMB=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fWDreset=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdatecLcLTObsoletePars),-1,-1,4,"fObs=",0,"status back compat layer");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fHasObs=",0,"if back compat vars set");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnStatusUpdate::TObsoletePars */
static void G__setup_memvarTSnStatusUpdatecLcLTObsoletePars(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdatecLcLTObsoletePars));
   { TSnStatusUpdate::TObsoletePars *p; p=(TSnStatusUpdate::TObsoletePars*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fNfiles)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"fNfiles=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fTotKB)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fTotKB=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* NSnCRCUtils */
static void G__setup_memvarNSnCRCUtils(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_NSnCRCUtils));
   {
   G__memvar_setup((void*)(&NSnCRCUtils::crc_tabxfer_normal),104,0,1,-1,G__defined_typename("UInt_t"),-1,1,"crc_tabxfer_normal[256]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnPowerReading */
static void G__setup_memvarTSnPowerReading(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReading));
   { TSnPowerReading *p; p=(TSnPowerReading*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"faveV1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"faveV2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"frmsV1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"frmsV2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp),-1,-1,4,"fTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReadingcLcLTObsoletePars),-1,-1,4,"fObs=",0,"pwr back compat layer");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fHasObs=",0,"if back compat vars set");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnPowerReading::TObsoletePars */
static void G__setup_memvarTSnPowerReadingcLcLTObsoletePars(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReadingcLcLTObsoletePars));
   { TSnPowerReading::TObsoletePars *p; p=(TSnPowerReading::TObsoletePars*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fVadc1)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"fVadc1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fVadc2)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"fVadc2=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnHeartbeat */
static void G__setup_memvarTSnHeartbeat(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnHeartbeat));
   { TSnHeartbeat *p; p=(TSnHeartbeat*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNum=",0,"heartbeat number");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp),-1,-1,4,"fTime=",0,"time of heartbeat");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnClockSetInfo */
static void G__setup_memvarTSnClockSetInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnClockSetInfo));
   { TSnClockSetInfo *p; p=(TSnClockSetInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp),-1,-1,4,"fPrevTime=",0,"mbed time before the clock was set");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp),-1,-1,4,"fSetTime=",0,"time the mbed clock was set to");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp),-1,-1,4,"fCurrTime=",0,"current time this clock info was built");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fUSsinceSet=",0,"us counter since the clock was set until fCurrTime (may have rolled over)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp),-1,-1,4,"fAbsCache=",0,"! cache the absolute event time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* NSnHashUtils */
static void G__setup_memvarNSnHashUtils(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_NSnHashUtils));
   {
   }
   G__tag_memvar_reset();
}


   /* TSnWindData */
static void G__setup_memvarTSnWindData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnWindData));
   { TSnWindData *p; p=(TSnWindData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fWind=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp),-1,-1,4,"fTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"bSB=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__evdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__evdat() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTSnCompressor(void) {
   /* TSnCompressor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnCompressor));
   G__memfunc_setup("TSnCompressor",1346,G__G__evdat_168_0_1, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnCompressor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__evdat_168_0_2, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnCompressor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__evdat_168_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCompressor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__evdat_168_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnCompressor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__evdat_168_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnCompressor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__evdat_168_0_6, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__evdat_168_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__evdat_168_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__evdat_168_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__evdat_168_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCompressor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__evdat_168_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCompressor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__evdat_168_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCompressor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__evdat_168_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCompressor::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnCompressor", 1346, G__G__evdat_168_0_14, (int) ('i'), G__get_linked_tagnum(&G__G__evdatLN_TSnCompressor), -1, 0, 1, 1, 1, 0, "u 'TSnCompressor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnCompressor", 1472, G__G__evdat_168_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__evdat_168_0_16, (int) ('u'), G__get_linked_tagnum(&G__G__evdatLN_TSnCompressor), -1, 1, 1, 1, 1, 0, "u 'TSnCompressor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnTrgInfo(void) {
   /* TSnTrgInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfo));
   G__memfunc_setup("TSnTrgInfo",974,G__G__evdat_186_0_1, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfo), -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 '0' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__G__evdat_186_0_2, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintBits",927,G__G__evdat_186_0_3, 121, -1, -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 10 - endLine", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBitsAsString",1501,G__G__evdat_186_0_4, 117, G__get_linked_tagnum(&G__G__evdatLN_TString), -1, 0, 1, 3, 1, 0, "r - 'UShort_t' 10 - b", (char*)NULL, (void*) G__func2void( (TString (*)(const UShort_t))(&TSnTrgInfo::GetBitsAsString) ), 0);
   G__memfunc_setup("GetBitsAsString",1501,G__G__evdat_186_0_5, 117, G__get_linked_tagnum(&G__G__evdatLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrgBits",991,G__G__evdat_186_0_6, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTrig",594,G__G__evdat_186_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "r - 'UShort_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTrig",594,G__G__evdat_186_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"r - 'UShort_t' 10 - testBits r - 'UShort_t' 10 - trigBits", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const UShort_t, const UShort_t))(&TSnTrgInfo::IsTrig) ), 0);
   G__memfunc_setup("IsThermal",905,G__G__evdat_186_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsForced",783,G__G__evdat_186_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAdcToMBFlagged",1472,G__G__evdat_186_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrgBits",1003,G__G__evdat_186_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnableTrig",989,G__G__evdat_186_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i 'TSnTrgInfo::ETrgBit_t' - 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ToggleTrig",1016,G__G__evdat_186_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i 'TSnTrgInfo::ETrgBit_t' - 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisableTrig",1098,G__G__evdat_186_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i 'TSnTrgInfo::ETrgBit_t' - 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__evdat_186_0_16, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnTrgInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__evdat_186_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnTrgInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__evdat_186_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnTrgInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__evdat_186_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnTrgInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__evdat_186_0_20, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__evdat_186_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__evdat_186_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__evdat_186_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__evdat_186_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnTrgInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__evdat_186_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnTrgInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__evdat_186_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnTrgInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__evdat_186_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnTrgInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnTrgInfo", 974, G__G__evdat_186_0_28, (int) ('i'), G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfo), -1, 0, 1, 1, 1, 0, "u 'TSnTrgInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnTrgInfo", 1100, G__G__evdat_186_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__evdat_186_0_30, (int) ('u'), G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfo), -1, 1, 1, 1, 1, 0, "u 'TSnTrgInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnEventHeader(void) {
   /* TSnEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnEventHeader));
   G__memfunc_setup("TSnEventHeader",1376,G__G__evdat_188_0_1, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUnixTime",1107,G__G__evdat_188_0_3, 108, -1, G__defined_typename("time_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__G__evdat_188_0_4, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__G__evdat_188_0_5, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvtNum",895,G__G__evdat_188_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrgNum",893,G__G__evdat_188_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDTms",664,G__G__evdat_188_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrgInfo",985,G__G__evdat_188_0_9, 117, G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfo), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsThermal",905,G__G__evdat_188_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsForced",783,G__G__evdat_188_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAdcToMBFlagged",1472,G__G__evdat_188_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__evdat_188_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TTimeStamp' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__evdat_188_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"h - 'UInt_t' 10 - tloc g - 'Bool_t' 10 'kTRUE' isUTC "
"i - 'Int_t' 10 '0' secOffset g - 'Bool_t' 10 'kFALSE' dosDate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvtNum",907,G__G__evdat_188_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrgNum",905,G__G__evdat_188_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDTms",676,G__G__evdat_188_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrgInfo",997,G__G__evdat_188_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TSnTrgInfo' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrgInfo",997,G__G__evdat_188_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__evdat_188_0_20, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__evdat_188_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__evdat_188_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__evdat_188_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__evdat_188_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__evdat_188_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__evdat_188_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__evdat_188_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__evdat_188_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnEventHeader", 1376, G__G__evdat_188_0_32, (int) ('i'), G__get_linked_tagnum(&G__G__evdatLN_TSnEventHeader), -1, 0, 1, 1, 1, 0, "u 'TSnEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnEventHeader", 1502, G__G__evdat_188_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__evdat_188_0_34, (int) ('u'), G__get_linked_tagnum(&G__G__evdatLN_TSnEventHeader), -1, 1, 1, 1, 1, 0, "u 'TSnEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncNSnConstants(void) {
   /* NSnConstants */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_NSnConstants));
   G__memfunc_setup("WrapSampleNum<UChar_t>",2124,G__G__evdat_189_0_1, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "b - - 1 - s", (char*)NULL, (void*) G__func2void( (Int_t (*)(unsigned char&))(&NSnConstants::WrapSampleNum<UChar_t>) ), 0);
   G__memfunc_setup("WrapSampleNum<Short_t>",2185,G__G__evdat_189_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "s - - 1 - s", (char*)NULL, (void*) G__func2void( (Int_t (*)(short&))(&NSnConstants::WrapSampleNum<Short_t>) ), 0);
   G__memfunc_setup("WrapSampleNum<UShort_t>",2270,G__G__evdat_189_0_3, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "r - - 1 - s", (char*)NULL, (void*) G__func2void( (Int_t (*)(unsigned short&))(&NSnConstants::WrapSampleNum<UShort_t>) ), 0);
   G__memfunc_setup("WrapSampleNum<Int_t>",1956,G__G__evdat_189_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - - 1 - s", (char*)NULL, (void*) G__func2void( (Int_t (*)(int&))(&NSnConstants::WrapSampleNum<Int_t>) ), 0);
   G__memfunc_setup("WrapSampleNum<UInt_t>",2041,G__G__evdat_189_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "h - - 1 - s", (char*)NULL, (void*) G__func2void( (Int_t (*)(unsigned int&))(&NSnConstants::WrapSampleNum<UInt_t>) ), 0);
   G__memfunc_setup("WrapSampleNum<Long64_t>",2163,G__G__evdat_189_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "n - - 1 - s", (char*)NULL, (void*) G__func2void( (Int_t (*)(long long&))(&NSnConstants::WrapSampleNum<Long64_t>) ), 0);
   G__memfunc_setup("WrapSampleNum<ULong64_t>",2248,G__G__evdat_189_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "m - - 1 - s", (char*)NULL, (void*) G__func2void( (Int_t (*)(unsigned long long&))(&NSnConstants::WrapSampleNum<ULong64_t>) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnRawWaveform(void) {
   /* TSnRawWaveform */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnRawWaveform));
   G__memfunc_setup("GetWvData",871,(G__InterfaceMethod) NULL, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 4, 0, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnRawWaveform",1414,G__G__evdat_191_0_2, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnRawWaveform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUncheckedIndex",1698,G__G__evdat_191_0_4, 114, -1, G__defined_typename("UShort_t"), 0, 2, 3, 1, 0, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - smp", (char*)NULL, (void*) G__func2void( (UShort_t (*)(const UChar_t, const UChar_t))(&TSnRawWaveform::GetUncheckedIndex) ), 0);
   G__memfunc_setup("GetIndexOf",973,G__G__evdat_191_0_5, 114, -1, G__defined_typename("UShort_t"), 0, 2, 3, 1, 0, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - smp", (char*)NULL, (void*) G__func2void( (UShort_t (*)(const UChar_t, const UChar_t))(&TSnRawWaveform::GetIndexOf) ), 0);
   G__memfunc_setup("GetStationCRC",1242,G__G__evdat_191_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCRC",504,G__G__evdat_191_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWvData",871,G__G__evdat_191_0_8, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWvData",871,G__G__evdat_191_0_9, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 9, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWvData",871,G__G__evdat_191_0_10, 114, -1, G__defined_typename("UShort_t"), 0, 2, 1, 1, 8, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - smp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStationCRC",1254,G__G__evdat_191_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWvData",883,G__G__evdat_191_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "R - 'UShort_t' 10 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWvData",883,G__G__evdat_191_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 10 - ch R - 'UShort_t' 10 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWvData",883,G__G__evdat_191_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - smp "
"r - 'UShort_t' 10 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCRC",587,G__G__evdat_191_0_15, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__evdat_191_0_16, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnRawWaveform::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__evdat_191_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRawWaveform::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__evdat_191_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnRawWaveform::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__evdat_191_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnRawWaveform::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__evdat_191_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__evdat_191_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRawWaveform::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__evdat_191_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnRawWaveform::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__evdat_191_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnRawWaveform::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__evdat_191_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnRawWaveform::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnRawWaveform", 1414, G__G__evdat_191_0_28, (int) ('i'), G__get_linked_tagnum(&G__G__evdatLN_TSnRawWaveform), -1, 0, 1, 1, 1, 0, "u 'TSnRawWaveform' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnRawWaveform", 1540, G__G__evdat_191_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__evdat_191_0_30, (int) ('u'), G__get_linked_tagnum(&G__G__evdatLN_TSnRawWaveform), -1, 1, 1, 1, 1, 0, "u 'TSnRawWaveform' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnEvent(void) {
   /* TSnEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnEvent));
   G__memfunc_setup("TSnEvent",791,G__G__evdat_194_0_1, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHeader",873,G__G__evdat_194_0_3, 117, G__get_linked_tagnum(&G__G__evdatLN_TSnEventHeader), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHeader",873,G__G__evdat_194_0_4, 117, G__get_linked_tagnum(&G__G__evdatLN_TSnEventHeader), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__G__evdat_194_0_5, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvtNum",895,G__G__evdat_194_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrgNum",893,G__G__evdat_194_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDTms",664,G__G__evdat_194_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrgInfo",985,G__G__evdat_194_0_9, 117, G__get_linked_tagnum(&G__G__evdatLN_TSnTrgInfo), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawWaveform",1425,G__G__evdat_194_0_10, 117, G__get_linked_tagnum(&G__G__evdatLN_TSnRawWaveform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawWaveform",1425,G__G__evdat_194_0_11, 117, G__get_linked_tagnum(&G__G__evdatLN_TSnRawWaveform), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStationCRC",1242,G__G__evdat_194_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCRC",504,G__G__evdat_194_0_13, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWvData",871,G__G__evdat_194_0_14, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWvData",871,G__G__evdat_194_0_15, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 9, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWvData",871,G__G__evdat_194_0_16, 114, -1, G__defined_typename("UShort_t"), 0, 2, 1, 1, 8, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - smp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsThermal",905,G__G__evdat_194_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsForced",783,G__G__evdat_194_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetHeader",885,G__G__evdat_194_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TSnEventHeader' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__evdat_194_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TTimeStamp' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__evdat_194_0_22, 121, -1, -1, 0, 4, 1, 1, 0, 
"h - 'UInt_t' 10 - tloc g - 'Bool_t' 10 'kTRUE' isUTC "
"i - 'Int_t' 10 '0' secOffset g - 'Bool_t' 10 'kFALSE' dosDate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvtNum",907,G__G__evdat_194_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrgNum",905,G__G__evdat_194_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDTms",676,G__G__evdat_194_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrgInfo",997,G__G__evdat_194_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TSnTrgInfo' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrgInfo",997,G__G__evdat_194_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawWaveform",1437,G__G__evdat_194_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TSnRawWaveform' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStationCRC",1254,G__G__evdat_194_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWvData",883,G__G__evdat_194_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "R - 'UShort_t' 10 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWvData",883,G__G__evdat_194_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 10 - ch R - 'UShort_t' 10 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWvData",883,G__G__evdat_194_0_32, 121, -1, -1, 0, 3, 1, 1, 0, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - smp "
"r - 'UShort_t' 10 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCRC",587,G__G__evdat_194_0_33, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__evdat_194_0_34, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__evdat_194_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__evdat_194_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__evdat_194_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__evdat_194_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__evdat_194_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__evdat_194_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__evdat_194_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__evdat_194_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnEvent", 791, G__G__evdat_194_0_46, (int) ('i'), G__get_linked_tagnum(&G__G__evdatLN_TSnEvent), -1, 0, 1, 1, 1, 0, "u 'TSnEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnEvent", 917, G__G__evdat_194_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__evdat_194_0_48, (int) ('u'), G__get_linked_tagnum(&G__G__evdatLN_TSnEvent), -1, 1, 1, 1, 1, 0, "u 'TSnEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnEventMetadata(void) {
   /* TSnEventMetadata */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnEventMetadata));
   G__memfunc_setup("TSnEventMetadata",1592,G__G__evdat_195_0_1, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnEventMetadata), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnEventMetadata",1592,G__G__evdat_195_0_2, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnEventMetadata), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - stnid h - 'UInt_t' 10 - run "
"r - 'UShort_t' 10 - seq", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEqual",692,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStationId",1199,G__G__evdat_195_0_5, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNum",901,G__G__evdat_195_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeqNum",889,G__G__evdat_195_0_7, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStationId",1211,G__G__evdat_195_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunNum",913,G__G__evdat_195_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSeqNum",901,G__G__evdat_195_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__evdat_195_0_11, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnEventMetadata::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__evdat_195_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEventMetadata::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__evdat_195_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnEventMetadata::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__evdat_195_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnEventMetadata::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__evdat_195_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__evdat_195_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEventMetadata::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__evdat_195_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEventMetadata::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__evdat_195_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnEventMetadata::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__evdat_195_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnEventMetadata::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnEventMetadata", 1592, G__G__evdat_195_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__evdatLN_TSnEventMetadata), -1, 0, 1, 1, 1, 0, "u 'TSnEventMetadata' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnEventMetadata", 1718, G__G__evdat_195_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__evdat_195_0_25, (int) ('u'), G__get_linked_tagnum(&G__G__evdatLN_TSnEventMetadata), -1, 1, 1, 1, 1, 0, "u 'TSnEventMetadata' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnStatusUpdate(void) {
   /* TSnStatusUpdate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdate));
   G__memfunc_setup("GetObsPars",986,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdatecLcLTObsoletePars), -1, 1, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnStatusUpdate",1532,G__G__evdat_196_0_2, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdate), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMacAddress",1271,G__G__evdat_196_0_4, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMacAdrAsStr",1333,G__G__evdat_196_0_5, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConfLabelLen",1445,G__G__evdat_196_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConfLabel",1158,G__G__evdat_196_0_7, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConfLabelStr",1471,G__G__evdat_196_0_8, 117, G__get_linked_tagnum(&G__G__evdatLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNum",901,G__G__evdat_196_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusTime",1331,G__G__evdat_196_0_10, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWvLoseLSB",1121,G__G__evdat_196_0_11, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWvLoseMSB",1122,G__G__evdat_196_0_12, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWvBaseline",1296,G__G__evdat_196_0_13, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeqNum",889,G__G__evdat_196_0_14, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThmRate",981,G__G__evdat_196_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvtRate",987,G__G__evdat_196_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFreeMB",817,G__G__evdat_196_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWDReset",958,G__G__evdat_196_0_18, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DidWatchdogReset",1605,G__G__evdat_196_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMacAddress",1283,G__G__evdat_196_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConfLabel",1170,G__G__evdat_196_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunNum",913,G__G__evdat_196_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatusTime",1343,G__G__evdat_196_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TTimeStamp' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatusTime",1343,G__G__evdat_196_0_24, 121, -1, -1, 0, 4, 1, 1, 0, 
"h - 'UInt_t' 10 - tloc g - 'Bool_t' 10 'kTRUE' isUTC "
"i - 'Int_t' 10 '0' secOffset g - 'Bool_t' 10 'kFALSE' dosDate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWvLoseLSB",1133,G__G__evdat_196_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 10 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWvLoseMSB",1134,G__G__evdat_196_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWvBaseline",1308,G__G__evdat_196_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSeqNum",901,G__G__evdat_196_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThmRate",993,G__G__evdat_196_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvtRate",999,G__G__evdat_196_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFreeMB",829,G__G__evdat_196_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWDReset",970,G__G__evdat_196_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 10 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HasObsParams",1188,G__G__evdat_196_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObsNfiles",1189,G__G__evdat_196_0_35, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObsTotKB",1032,G__G__evdat_196_0_36, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetObsNfiles",1201,G__G__evdat_196_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetObsTotKB",1044,G__G__evdat_196_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__evdat_196_0_39, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnStatusUpdate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__evdat_196_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnStatusUpdate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__evdat_196_0_41, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnStatusUpdate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__evdat_196_0_42, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnStatusUpdate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__evdat_196_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__evdat_196_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnStatusUpdate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__evdat_196_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnStatusUpdate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__evdat_196_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnStatusUpdate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__evdat_196_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnStatusUpdate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnStatusUpdate", 1532, G__G__evdat_196_0_51, (int) ('i'), G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdate), -1, 0, 1, 1, 1, 0, "u 'TSnStatusUpdate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnStatusUpdate", 1658, G__G__evdat_196_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__evdat_196_0_53, (int) ('u'), G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdate), -1, 1, 1, 1, 1, 0, "u 'TSnStatusUpdate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnStatusUpdatecLcLTObsoletePars(void) {
   /* TSnStatusUpdate::TObsoletePars */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdatecLcLTObsoletePars));
   G__memfunc_setup("TObsoletePars",1319,G__G__evdat_197_0_1, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdatecLcLTObsoletePars), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__evdat_197_0_2, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnStatusUpdate::TObsoletePars::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__evdat_197_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnStatusUpdate::TObsoletePars::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__evdat_197_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnStatusUpdate::TObsoletePars::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__evdat_197_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnStatusUpdate::TObsoletePars::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__evdat_197_0_6, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__evdat_197_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__evdat_197_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__evdat_197_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__evdat_197_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnStatusUpdate::TObsoletePars::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__evdat_197_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnStatusUpdate::TObsoletePars::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__evdat_197_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnStatusUpdate::TObsoletePars::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__evdat_197_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnStatusUpdate::TObsoletePars::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TObsoletePars", 1319, G__G__evdat_197_0_14, (int) ('i'), G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdatecLcLTObsoletePars), -1, 0, 1, 1, 1, 0, "u 'TSnStatusUpdate::TObsoletePars' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TObsoletePars", 1445, G__G__evdat_197_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__evdat_197_0_16, (int) ('u'), G__get_linked_tagnum(&G__G__evdatLN_TSnStatusUpdatecLcLTObsoletePars), -1, 1, 1, 1, 1, 0, "u 'TSnStatusUpdate::TObsoletePars' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncNSnCRCUtils(void) {
   /* NSnCRCUtils */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_NSnCRCUtils));
   G__memfunc_setup("update_crc32_normal",1895,G__G__evdat_198_0_1, 104, -1, G__defined_typename("UInt_t"), 0, 3, 1, 1, 0, 
"H - 'UInt_t' 10 - table h - 'UInt_t' 0 - crc "
"b - 'UChar_t' 10 - c", (char*)NULL, (void*) G__func2void( (UInt_t (*)(const UInt_t*, UInt_t, const UChar_t))(&NSnCRCUtils::update_crc32_normal) ), 0);
   G__memfunc_setup("update_crc32_xfer",1683,G__G__evdat_198_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - crc b - 'UChar_t' 10 - c", (char*)NULL, (void*) G__func2void( (UInt_t (*)(UInt_t, const UChar_t))(&NSnCRCUtils::update_crc32_xfer) ), 0);
   G__memfunc_setup("GetCRC32for",932,G__G__evdat_198_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "E - - 0 - inf", (char*)NULL, (void*) G__func2void( (UInt_t (*)(FILE*))(&NSnCRCUtils::GetCRC32for) ), 0);
   G__memfunc_setup("GetCRC32for",932,G__G__evdat_198_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - infn", (char*)NULL, (void*) G__func2void( (UInt_t (*)(const Char_t*))(&NSnCRCUtils::GetCRC32for) ), 0);
   G__memfunc_setup("GetCRC32for<Char_t>",1647,G__G__evdat_198_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 0, 
"C - - 10 - data h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(const char*, const UInt_t))(&NSnCRCUtils::GetCRC32for<Char_t>) ), 0);
   G__memfunc_setup("GetCRC32for<UChar_t>",1732,G__G__evdat_198_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 0, 
"B - - 10 - data h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(const unsigned char*, const UInt_t))(&NSnCRCUtils::GetCRC32for<UChar_t>) ), 0);
   G__memfunc_setup("GetCRC32for<Short_t>",1793,G__G__evdat_198_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 0, 
"S - - 10 - data h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(const short*, const UInt_t))(&NSnCRCUtils::GetCRC32for<Short_t>) ), 0);
   G__memfunc_setup("GetCRC32for<UShort_t>",1878,G__G__evdat_198_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 0, 
"R - - 10 - data h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(const unsigned short*, const UInt_t))(&NSnCRCUtils::GetCRC32for<UShort_t>) ), 0);
   G__memfunc_setup("GetCRC32for<Int_t>",1564,G__G__evdat_198_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 0, 
"I - - 10 - data h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(const int*, const UInt_t))(&NSnCRCUtils::GetCRC32for<Int_t>) ), 0);
   G__memfunc_setup("GetCRC32for<UInt_t>",1649,G__G__evdat_198_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 0, 
"H - - 10 - data h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(const unsigned int*, const UInt_t))(&NSnCRCUtils::GetCRC32for<UInt_t>) ), 0);
   G__memfunc_setup("GetCRC32for<Long64_t>",1771,G__G__evdat_198_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 0, 
"N - - 10 - data h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(const long long*, const UInt_t))(&NSnCRCUtils::GetCRC32for<Long64_t>) ), 0);
   G__memfunc_setup("GetCRC32for<ULong64_t>",1856,G__G__evdat_198_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 0, 
"M - - 10 - data h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(const unsigned long long*, const UInt_t))(&NSnCRCUtils::GetCRC32for<ULong64_t>) ), 0);
   G__memfunc_setup("GetUpdatedCRC32for<Char_t>",2358,G__G__evdat_198_0_13, 104, -1, G__defined_typename("UInt_t"), 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - crc C - - 10 - data "
"h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(UInt_t, const char*, const UInt_t))(&NSnCRCUtils::GetUpdatedCRC32for<Char_t>) ), 0);
   G__memfunc_setup("GetUpdatedCRC32for<UChar_t>",2443,G__G__evdat_198_0_14, 104, -1, G__defined_typename("UInt_t"), 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - crc B - - 10 - data "
"h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(UInt_t, const unsigned char*, const UInt_t))(&NSnCRCUtils::GetUpdatedCRC32for<UChar_t>) ), 0);
   G__memfunc_setup("GetUpdatedCRC32for<Short_t>",2504,G__G__evdat_198_0_15, 104, -1, G__defined_typename("UInt_t"), 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - crc S - - 10 - data "
"h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(UInt_t, const short*, const UInt_t))(&NSnCRCUtils::GetUpdatedCRC32for<Short_t>) ), 0);
   G__memfunc_setup("GetUpdatedCRC32for<UShort_t>",2589,G__G__evdat_198_0_16, 104, -1, G__defined_typename("UInt_t"), 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - crc R - - 10 - data "
"h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(UInt_t, const unsigned short*, const UInt_t))(&NSnCRCUtils::GetUpdatedCRC32for<UShort_t>) ), 0);
   G__memfunc_setup("GetUpdatedCRC32for<Int_t>",2275,G__G__evdat_198_0_17, 104, -1, G__defined_typename("UInt_t"), 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - crc I - - 10 - data "
"h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(UInt_t, const int*, const UInt_t))(&NSnCRCUtils::GetUpdatedCRC32for<Int_t>) ), 0);
   G__memfunc_setup("GetUpdatedCRC32for<UInt_t>",2360,G__G__evdat_198_0_18, 104, -1, G__defined_typename("UInt_t"), 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - crc H - - 10 - data "
"h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(UInt_t, const unsigned int*, const UInt_t))(&NSnCRCUtils::GetUpdatedCRC32for<UInt_t>) ), 0);
   G__memfunc_setup("GetUpdatedCRC32for<Long64_t>",2482,G__G__evdat_198_0_19, 104, -1, G__defined_typename("UInt_t"), 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - crc N - - 10 - data "
"h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(UInt_t, const long long*, const UInt_t))(&NSnCRCUtils::GetUpdatedCRC32for<Long64_t>) ), 0);
   G__memfunc_setup("GetUpdatedCRC32for<ULong64_t>",2567,G__G__evdat_198_0_20, 104, -1, G__defined_typename("UInt_t"), 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - crc M - - 10 - data "
"h - 'UInt_t' 10 - len", (char*)NULL, (void*) G__func2void( (UInt_t (*)(UInt_t, const unsigned long long*, const UInt_t))(&NSnCRCUtils::GetUpdatedCRC32for<ULong64_t>) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnPowerReading(void) {
   /* TSnPowerReading */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReading));
   G__memfunc_setup("GetObsPars",986,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReadingcLcLTObsoletePars), -1, 1, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnPowerReading",1500,G__G__evdat_199_0_2, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReading), -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 10 '0' av1 f - 'Float_t' 10 '0' av2 "
"f - 'Float_t' 10 '0' rm1 f - 'Float_t' 10 '0' rm2 "
"U 'TTimeStamp' - 10 '0' time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAveV1",707,G__G__evdat_199_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAveV2",708,G__G__evdat_199_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRmsV1",729,G__G__evdat_199_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRmsV2",730,G__G__evdat_199_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__G__evdat_199_0_8, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__G__evdat_199_0_9, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__G__evdat_199_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalVolt",981,G__G__evdat_199_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "f - 'Float_t' 10 '6.0649e-4' vgain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalCurr",972,G__G__evdat_199_0_12, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 10 '1.112' cped f - 'Float_t' 10 '-2.6828e-5' cgain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAveV1",719,G__G__evdat_199_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAveV2",720,G__G__evdat_199_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRmsV1",741,G__G__evdat_199_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRmsV2",742,G__G__evdat_199_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__evdat_199_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TTimeStamp' - 11 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__evdat_199_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__evdat_199_0_19, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 10 - av1 f - 'Float_t' 10 - av2 "
"f - 'Float_t' 10 - rm1 f - 'Float_t' 10 - rm2 "
"u 'TTimeStamp' - 11 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__evdat_199_0_20, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 10 - av1 f - 'Float_t' 10 - av2 "
"f - 'Float_t' 10 - rm1 f - 'Float_t' 10 - rm2 "
"h - 'UInt_t' 11 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HasObsParams",1188,G__G__evdat_199_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObsVadc1",1011,G__G__evdat_199_0_23, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObsVadc2",1012,G__G__evdat_199_0_24, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetObsVadc1",1023,G__G__evdat_199_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetObsVadc2",1024,G__G__evdat_199_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__evdat_199_0_27, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnPowerReading::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__evdat_199_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPowerReading::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__evdat_199_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnPowerReading::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__evdat_199_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnPowerReading::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__evdat_199_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__evdat_199_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPowerReading::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__evdat_199_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPowerReading::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__evdat_199_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPowerReading::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__evdat_199_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPowerReading::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnPowerReading", 1500, G__G__evdat_199_0_39, (int) ('i'), G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReading), -1, 0, 1, 1, 1, 0, "u 'TSnPowerReading' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnPowerReading", 1626, G__G__evdat_199_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__evdat_199_0_41, (int) ('u'), G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReading), -1, 1, 1, 1, 1, 0, "u 'TSnPowerReading' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnPowerReadingcLcLTObsoletePars(void) {
   /* TSnPowerReading::TObsoletePars */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReadingcLcLTObsoletePars));
   G__memfunc_setup("TObsoletePars",1319,G__G__evdat_200_0_1, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReadingcLcLTObsoletePars), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__evdat_200_0_2, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnPowerReading::TObsoletePars::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__evdat_200_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPowerReading::TObsoletePars::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__evdat_200_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnPowerReading::TObsoletePars::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__evdat_200_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnPowerReading::TObsoletePars::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__evdat_200_0_6, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__evdat_200_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__evdat_200_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__evdat_200_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__evdat_200_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPowerReading::TObsoletePars::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__evdat_200_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPowerReading::TObsoletePars::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__evdat_200_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPowerReading::TObsoletePars::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__evdat_200_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPowerReading::TObsoletePars::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TObsoletePars", 1319, G__G__evdat_200_0_14, (int) ('i'), G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReadingcLcLTObsoletePars), -1, 0, 1, 1, 1, 0, "u 'TSnPowerReading::TObsoletePars' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TObsoletePars", 1445, G__G__evdat_200_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__evdat_200_0_16, (int) ('u'), G__get_linked_tagnum(&G__G__evdatLN_TSnPowerReadingcLcLTObsoletePars), -1, 1, 1, 1, 1, 0, "u 'TSnPowerReading::TObsoletePars' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnHeartbeat(void) {
   /* TSnHeartbeat */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnHeartbeat));
   G__memfunc_setup("TSnHeartbeat",1189,G__G__evdat_201_0_1, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnHeartbeat), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnHeartbeat",1189,G__G__evdat_201_0_2, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnHeartbeat), -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 10 - n u 'TTimeStamp' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNum",592,G__G__evdat_201_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__G__evdat_201_0_4, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__G__evdat_201_0_5, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUnixTime",1107,G__G__evdat_201_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNum",604,G__G__evdat_201_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__evdat_201_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TTimeStamp' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUnixTime",1119,G__G__evdat_201_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__evdat_201_0_10, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnHeartbeat::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__evdat_201_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnHeartbeat::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__evdat_201_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnHeartbeat::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__evdat_201_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnHeartbeat::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__evdat_201_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__evdat_201_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnHeartbeat::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__evdat_201_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnHeartbeat::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__evdat_201_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnHeartbeat::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__evdat_201_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnHeartbeat::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnHeartbeat", 1189, G__G__evdat_201_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__evdatLN_TSnHeartbeat), -1, 0, 1, 1, 1, 0, "u 'TSnHeartbeat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnHeartbeat", 1315, G__G__evdat_201_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__evdat_201_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__evdatLN_TSnHeartbeat), -1, 1, 1, 1, 1, 0, "u 'TSnHeartbeat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnClockSetInfo(void) {
   /* TSnClockSetInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnClockSetInfo));
   G__memfunc_setup("TSnClockSetInfo",1465,G__G__evdat_202_0_1, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnClockSetInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnClockSetInfo",1465,G__G__evdat_202_0_2, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnClockSetInfo), -1, 0, 1, 1, 1, 0, "u 'TSnClockSetInfo' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__evdat_202_0_3, 117, G__get_linked_tagnum(&G__G__evdatLN_TSnClockSetInfo), -1, 1, 1, 1, 1, 0, "u 'TSnClockSetInfo' - 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Swap",411,G__G__evdat_202_0_4, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TSnClockSetInfo' - 1 - a u 'TSnClockSetInfo' - 1 - b", (char*)NULL, (void*) G__func2void( (void (*)(TSnClockSetInfo&, TSnClockSetInfo&))(&TSnClockSetInfo::Swap) ), 0);
   G__memfunc_setup("ClearAbsCache",1233,G__G__evdat_202_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrevTime",1100,G__G__evdat_202_0_8, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSetTime",987,G__G__evdat_202_0_9, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrTime",1099,G__G__evdat_202_0_10, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUSsinceSet",1286,G__G__evdat_202_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUSsinceSetU",1371,G__G__evdat_202_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcAbsCurrTime",1460,G__G__evdat_202_0_13, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcAbsTime",1048,G__G__evdat_202_0_14, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 0, 3, 3, 1, 0, 
"u 'TTimeStamp' - 11 - ref u 'TTimeStamp' - 11 - cur "
"h - 'UInt_t' 10 - dtus", (char*)NULL, (void*) G__func2void( (TTimeStamp (*)(const TTimeStamp&, const TTimeStamp&, const UInt_t))(&TSnClockSetInfo::CalcAbsTime) ), 0);
   G__memfunc_setup("CalcAbsTime",1048,G__G__evdat_202_0_15, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 0, 2, 3, 1, 0, 
"u 'TTimeStamp' - 11 - ref u 'TSnEventHeader' - 11 - hdr", (char*)NULL, (void*) G__func2void( (TTimeStamp (*)(const TTimeStamp&, const TSnEventHeader&))(&TSnClockSetInfo::CalcAbsTime) ), 0);
   G__memfunc_setup("CalcAbsTime",1048,G__G__evdat_202_0_16, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 0, 2, 3, 1, 0, 
"u 'TSnClockSetInfo' - 11 - ref u 'TSnEventHeader' - 11 - hdr", (char*)NULL, (void*) G__func2void( (TTimeStamp (*)(const TSnClockSetInfo&, const TSnEventHeader&))(&TSnClockSetInfo::CalcAbsTime) ), 0);
   G__memfunc_setup("SetPrevTime",1112,G__G__evdat_202_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TTimeStamp' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSetTime",999,G__G__evdat_202_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TTimeStamp' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrTime",1111,G__G__evdat_202_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TTimeStamp' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUSsinceSet",1298,G__G__evdat_202_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__evdat_202_0_21, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnClockSetInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__evdat_202_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnClockSetInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__evdat_202_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnClockSetInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__evdat_202_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnClockSetInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__evdat_202_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__evdat_202_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnClockSetInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__evdat_202_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnClockSetInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__evdat_202_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnClockSetInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__evdat_202_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnClockSetInfo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnClockSetInfo", 1591, G__G__evdat_202_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncNSnHashUtils(void) {
   /* NSnHashUtils */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_NSnHashUtils));
   G__memfunc_setup("HashCombine",1089,G__G__evdat_203_0_1, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'ULong_t' 1 - hash k - 'ULong_t' 11 - newHash", (char*)NULL, (void*) G__func2void( (void (*)(ULong_t&, const ULong_t&))(&NSnHashUtils::HashCombine) ), 0);
   G__memfunc_setup("HashCombine",1089,G__G__evdat_203_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'ULong_t' 1 - hash u 'TObject' - 11 - obj", (char*)NULL, (void*) G__func2void( (void (*)(ULong_t&, const TObject&))(&NSnHashUtils::HashCombine) ), 0);
   G__memfunc_setup("HashCombine",1089,G__G__evdat_203_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'ULong_t' 1 - hash u 'TString' - 11 - str", (char*)NULL, (void*) G__func2void( (void (*)(ULong_t&, const TString&))(&NSnHashUtils::HashCombine) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnWindData(void) {
   /* TSnWindData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__evdatLN_TSnWindData));
   G__memfunc_setup("TSnWindData",1057,G__G__evdat_204_0_1, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnWindData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnWindData",1057,G__G__evdat_204_0_2, 105, G__get_linked_tagnum(&G__G__evdatLN_TSnWindData), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 10 - w u 'TTimeStamp' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWind",690,G__G__evdat_204_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__G__evdat_204_0_4, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__G__evdat_204_0_5, 117, G__get_linked_tagnum(&G__G__evdatLN_TTimeStamp), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUnixTime",1107,G__G__evdat_204_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWind",702,G__G__evdat_204_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__evdat_204_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TTimeStamp' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUnixTime",1119,G__G__evdat_204_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSB",449,G__G__evdat_204_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - sb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__evdat_204_0_11, 85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnWindData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__evdat_204_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnWindData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__evdat_204_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnWindData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__evdat_204_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnWindData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__evdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__evdat_204_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__evdat_204_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnWindData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__evdat_204_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnWindData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__evdat_204_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnWindData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__evdat_204_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnWindData::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnWindData", 1057, G__G__evdat_204_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__evdatLN_TSnWindData), -1, 0, 1, 1, 1, 0, "u 'TSnWindData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnWindData", 1183, G__G__evdat_204_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__evdat_204_0_25, (int) ('u'), G__get_linked_tagnum(&G__G__evdatLN_TSnWindData), -1, 1, 1, 1, 1, 0, "u 'TSnWindData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__evdat() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__evdat() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__evdat() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__evdatLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TSnCompressor = { "TSnCompressor" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TTimeStamp = { "TTimeStamp" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TSnTrgInfo = { "TSnTrgInfo" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TSnTrgInfocLcLETrgBit_t = { "TSnTrgInfo::ETrgBit_t" , 101 , -1 };
G__linked_taginfo G__G__evdatLN_TSnEventHeader = { "TSnEventHeader" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_NSnConstants = { "NSnConstants" , 110 , -1 };
G__linked_taginfo G__G__evdatLN_TSnRawWaveform = { "TSnRawWaveform" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TSnEvent = { "TSnEvent" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TSnEventMetadata = { "TSnEventMetadata" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TSnStatusUpdate = { "TSnStatusUpdate" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TSnStatusUpdatecLcLTObsoletePars = { "TSnStatusUpdate::TObsoletePars" , 115 , -1 };
G__linked_taginfo G__G__evdatLN_NSnCRCUtils = { "NSnCRCUtils" , 110 , -1 };
G__linked_taginfo G__G__evdatLN_TSnPowerReading = { "TSnPowerReading" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TSnPowerReadingcLcLTObsoletePars = { "TSnPowerReading::TObsoletePars" , 115 , -1 };
G__linked_taginfo G__G__evdatLN_TSnHeartbeat = { "TSnHeartbeat" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_TSnClockSetInfo = { "TSnClockSetInfo" , 99 , -1 };
G__linked_taginfo G__G__evdatLN_NSnHashUtils = { "NSnHashUtils" , 110 , -1 };
G__linked_taginfo G__G__evdatLN_TSnWindData = { "TSnWindData" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__evdat() {
  G__G__evdatLN_TClass.tagnum = -1 ;
  G__G__evdatLN_TBuffer.tagnum = -1 ;
  G__G__evdatLN_TMemberInspector.tagnum = -1 ;
  G__G__evdatLN_TObject.tagnum = -1 ;
  G__G__evdatLN_TString.tagnum = -1 ;
  G__G__evdatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__evdatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__evdatLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__evdatLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__evdatLN_TSnCompressor.tagnum = -1 ;
  G__G__evdatLN_TTimeStamp.tagnum = -1 ;
  G__G__evdatLN_TSnTrgInfo.tagnum = -1 ;
  G__G__evdatLN_TSnTrgInfocLcLETrgBit_t.tagnum = -1 ;
  G__G__evdatLN_TSnEventHeader.tagnum = -1 ;
  G__G__evdatLN_NSnConstants.tagnum = -1 ;
  G__G__evdatLN_TSnRawWaveform.tagnum = -1 ;
  G__G__evdatLN_TSnEvent.tagnum = -1 ;
  G__G__evdatLN_TSnEventMetadata.tagnum = -1 ;
  G__G__evdatLN_TSnStatusUpdate.tagnum = -1 ;
  G__G__evdatLN_TSnStatusUpdatecLcLTObsoletePars.tagnum = -1 ;
  G__G__evdatLN_NSnCRCUtils.tagnum = -1 ;
  G__G__evdatLN_TSnPowerReading.tagnum = -1 ;
  G__G__evdatLN_TSnPowerReadingcLcLTObsoletePars.tagnum = -1 ;
  G__G__evdatLN_TSnHeartbeat.tagnum = -1 ;
  G__G__evdatLN_TSnClockSetInfo.tagnum = -1 ;
  G__G__evdatLN_NSnHashUtils.tagnum = -1 ;
  G__G__evdatLN_TSnWindData.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__evdat() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__evdatLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__evdatLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__evdatLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__evdatLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__evdatLN_TString);
   G__get_linked_tagnum_fwd(&G__G__evdatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__evdatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__evdatLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__evdatLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnCompressor),sizeof(TSnCompressor),-1,263424,"compression routines",G__setup_memvarTSnCompressor,G__setup_memfuncTSnCompressor);
   G__get_linked_tagnum_fwd(&G__G__evdatLN_TTimeStamp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnTrgInfo),sizeof(TSnTrgInfo),-1,263424,"trigger bits and masks",G__setup_memvarTSnTrgInfo,G__setup_memfuncTSnTrgInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnTrgInfocLcLETrgBit_t),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnEventHeader),sizeof(TSnEventHeader),-1,292096,"store event number, time, etc",G__setup_memvarTSnEventHeader,G__setup_memfuncTSnEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_NSnConstants),0,-1,0,(char*)NULL,G__setup_memvarNSnConstants,G__setup_memfuncNSnConstants);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnRawWaveform),sizeof(TSnRawWaveform),-1,292096,"raw waveform sample data",G__setup_memvarTSnRawWaveform,G__setup_memfuncTSnRawWaveform);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnEvent),sizeof(TSnEvent),-1,292096,"an event - this container class is used only for convenience by the station I/O software",G__setup_memvarTSnEvent,G__setup_memfuncTSnEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnEventMetadata),sizeof(TSnEventMetadata),-1,324864,"stores (redundant) event meta info for easy access in data trees",G__setup_memvarTSnEventMetadata,G__setup_memfuncTSnEventMetadata);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnStatusUpdate),sizeof(TSnStatusUpdate),-1,292096,"a status update",G__setup_memvarTSnStatusUpdate,G__setup_memfuncTSnStatusUpdate);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnStatusUpdatecLcLTObsoletePars),sizeof(TSnStatusUpdate::TObsoletePars),-1,263424,"status back compat layer",G__setup_memvarTSnStatusUpdatecLcLTObsoletePars,G__setup_memfuncTSnStatusUpdatecLcLTObsoletePars);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_NSnCRCUtils),0,-1,262144,(char*)NULL,G__setup_memvarNSnCRCUtils,G__setup_memfuncNSnCRCUtils);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnPowerReading),sizeof(TSnPowerReading),-1,292096,"store power reading from station motherboard",G__setup_memvarTSnPowerReading,G__setup_memfuncTSnPowerReading);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnPowerReadingcLcLTObsoletePars),sizeof(TSnPowerReading::TObsoletePars),-1,263424,"pwr back compat layer",G__setup_memvarTSnPowerReadingcLcLTObsoletePars,G__setup_memfuncTSnPowerReadingcLcLTObsoletePars);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnHeartbeat),sizeof(TSnHeartbeat),-1,324864,"store a heartbeat signal",G__setup_memvarTSnHeartbeat,G__setup_memfuncTSnHeartbeat);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnClockSetInfo),sizeof(TSnClockSetInfo),-1,294656,"store info about a clock setting",G__setup_memvarTSnClockSetInfo,G__setup_memfuncTSnClockSetInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_NSnHashUtils),0,-1,0,(char*)NULL,G__setup_memvarNSnHashUtils,G__setup_memfuncNSnHashUtils);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__evdatLN_TSnWindData),sizeof(TSnWindData),-1,324864,(char*)NULL,G__setup_memvarTSnWindData,G__setup_memfuncTSnWindData);
}
extern "C" void G__cpp_setupG__evdat(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__evdat()");
  G__set_cpp_environmentG__evdat();
  G__cpp_setup_tagtableG__evdat();

  G__cpp_setup_inheritanceG__evdat();

  G__cpp_setup_typetableG__evdat();

  G__cpp_setup_memvarG__evdat();

  G__cpp_setup_memfuncG__evdat();
  G__cpp_setup_globalG__evdat();
  G__cpp_setup_funcG__evdat();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__evdat();
  return;
}
class G__cpp_setup_initG__evdat {
  public:
    G__cpp_setup_initG__evdat() { G__add_setup_func("G__evdat",(G__incsetup)(&G__cpp_setupG__evdat)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__evdat() { G__remove_setup_func("G__evdat"); }
};
G__cpp_setup_initG__evdat G__cpp_setup_initializerG__evdat;

