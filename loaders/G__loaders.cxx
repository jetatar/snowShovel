//
// File generated by /data/users/jtatar/Software/root/bin/rootcint at Tue Mar 25 17:56:44 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME loadersdIG__loaders
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__loaders.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TSnLinkedTreeBranchLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TSnLinkedTreeBranchLoader(void *p);
   static void deleteArray_TSnLinkedTreeBranchLoader(void *p);
   static void destruct_TSnLinkedTreeBranchLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnLinkedTreeBranchLoader*)
   {
      ::TSnLinkedTreeBranchLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnLinkedTreeBranchLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnLinkedTreeBranchLoader", ::TSnLinkedTreeBranchLoader::Class_Version(), "./loaders/TSnLinkedTreeBranchLoader.h", 14,
                  typeid(::TSnLinkedTreeBranchLoader), DefineBehavior(ptr, ptr),
                  &::TSnLinkedTreeBranchLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnLinkedTreeBranchLoader) );
      instance.SetDelete(&delete_TSnLinkedTreeBranchLoader);
      instance.SetDeleteArray(&deleteArray_TSnLinkedTreeBranchLoader);
      instance.SetDestructor(&destruct_TSnLinkedTreeBranchLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnLinkedTreeBranchLoader*)
   {
      return GenerateInitInstanceLocal((::TSnLinkedTreeBranchLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnLinkedTreeBranchLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnMetadataLinkBranchLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnMetadataLinkBranchLoader(void *p = 0);
   static void *newArray_TSnMetadataLinkBranchLoader(Long_t size, void *p);
   static void delete_TSnMetadataLinkBranchLoader(void *p);
   static void deleteArray_TSnMetadataLinkBranchLoader(void *p);
   static void destruct_TSnMetadataLinkBranchLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnMetadataLinkBranchLoader*)
   {
      ::TSnMetadataLinkBranchLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnMetadataLinkBranchLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnMetadataLinkBranchLoader", ::TSnMetadataLinkBranchLoader::Class_Version(), "./loaders/TSnMetadataLinkBranchLoader.h", 7,
                  typeid(::TSnMetadataLinkBranchLoader), DefineBehavior(ptr, ptr),
                  &::TSnMetadataLinkBranchLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnMetadataLinkBranchLoader) );
      instance.SetNew(&new_TSnMetadataLinkBranchLoader);
      instance.SetNewArray(&newArray_TSnMetadataLinkBranchLoader);
      instance.SetDelete(&delete_TSnMetadataLinkBranchLoader);
      instance.SetDeleteArray(&deleteArray_TSnMetadataLinkBranchLoader);
      instance.SetDestructor(&destruct_TSnMetadataLinkBranchLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnMetadataLinkBranchLoader*)
   {
      return GenerateInitInstanceLocal((::TSnMetadataLinkBranchLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnMetadataLinkBranchLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnTimeLinkBranchLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TSnTimeLinkBranchLoader(void *p);
   static void deleteArray_TSnTimeLinkBranchLoader(void *p);
   static void destruct_TSnTimeLinkBranchLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnTimeLinkBranchLoader*)
   {
      ::TSnTimeLinkBranchLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnTimeLinkBranchLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnTimeLinkBranchLoader", ::TSnTimeLinkBranchLoader::Class_Version(), "./loaders/TSnTimeLinkBranchLoader.h", 9,
                  typeid(::TSnTimeLinkBranchLoader), DefineBehavior(ptr, ptr),
                  &::TSnTimeLinkBranchLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnTimeLinkBranchLoader) );
      instance.SetDelete(&delete_TSnTimeLinkBranchLoader);
      instance.SetDeleteArray(&deleteArray_TSnTimeLinkBranchLoader);
      instance.SetDestructor(&destruct_TSnTimeLinkBranchLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnTimeLinkBranchLoader*)
   {
      return GenerateInitInstanceLocal((::TSnTimeLinkBranchLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnTimeLinkBranchLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnConfigTreeLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnConfigTreeLoader(void *p = 0);
   static void *newArray_TSnConfigTreeLoader(Long_t size, void *p);
   static void delete_TSnConfigTreeLoader(void *p);
   static void deleteArray_TSnConfigTreeLoader(void *p);
   static void destruct_TSnConfigTreeLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnConfigTreeLoader*)
   {
      ::TSnConfigTreeLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnConfigTreeLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnConfigTreeLoader", ::TSnConfigTreeLoader::Class_Version(), "./loaders/TSnConfigTreeLoader.h", 7,
                  typeid(::TSnConfigTreeLoader), DefineBehavior(ptr, ptr),
                  &::TSnConfigTreeLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnConfigTreeLoader) );
      instance.SetNew(&new_TSnConfigTreeLoader);
      instance.SetNewArray(&newArray_TSnConfigTreeLoader);
      instance.SetDelete(&delete_TSnConfigTreeLoader);
      instance.SetDeleteArray(&deleteArray_TSnConfigTreeLoader);
      instance.SetDestructor(&destruct_TSnConfigTreeLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnConfigTreeLoader*)
   {
      return GenerateInitInstanceLocal((::TSnConfigTreeLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnConfigTreeLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnVoltageTreeLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnVoltageTreeLoader(void *p = 0);
   static void *newArray_TSnVoltageTreeLoader(Long_t size, void *p);
   static void delete_TSnVoltageTreeLoader(void *p);
   static void deleteArray_TSnVoltageTreeLoader(void *p);
   static void destruct_TSnVoltageTreeLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnVoltageTreeLoader*)
   {
      ::TSnVoltageTreeLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnVoltageTreeLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnVoltageTreeLoader", ::TSnVoltageTreeLoader::Class_Version(), "./loaders/TSnVoltageTreeLoader.h", 9,
                  typeid(::TSnVoltageTreeLoader), DefineBehavior(ptr, ptr),
                  &::TSnVoltageTreeLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnVoltageTreeLoader) );
      instance.SetNew(&new_TSnVoltageTreeLoader);
      instance.SetNewArray(&newArray_TSnVoltageTreeLoader);
      instance.SetDelete(&delete_TSnVoltageTreeLoader);
      instance.SetDeleteArray(&deleteArray_TSnVoltageTreeLoader);
      instance.SetDestructor(&destruct_TSnVoltageTreeLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnVoltageTreeLoader*)
   {
      return GenerateInitInstanceLocal((::TSnVoltageTreeLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnVoltageTreeLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnHeartbeatTreeLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnHeartbeatTreeLoader(void *p = 0);
   static void *newArray_TSnHeartbeatTreeLoader(Long_t size, void *p);
   static void delete_TSnHeartbeatTreeLoader(void *p);
   static void deleteArray_TSnHeartbeatTreeLoader(void *p);
   static void destruct_TSnHeartbeatTreeLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnHeartbeatTreeLoader*)
   {
      ::TSnHeartbeatTreeLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnHeartbeatTreeLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnHeartbeatTreeLoader", ::TSnHeartbeatTreeLoader::Class_Version(), "./loaders/TSnHeartbeatTreeLoader.h", 9,
                  typeid(::TSnHeartbeatTreeLoader), DefineBehavior(ptr, ptr),
                  &::TSnHeartbeatTreeLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnHeartbeatTreeLoader) );
      instance.SetNew(&new_TSnHeartbeatTreeLoader);
      instance.SetNewArray(&newArray_TSnHeartbeatTreeLoader);
      instance.SetDelete(&delete_TSnHeartbeatTreeLoader);
      instance.SetDeleteArray(&deleteArray_TSnHeartbeatTreeLoader);
      instance.SetDestructor(&destruct_TSnHeartbeatTreeLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnHeartbeatTreeLoader*)
   {
      return GenerateInitInstanceLocal((::TSnHeartbeatTreeLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnHeartbeatTreeLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnVoltageBranchLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnVoltageBranchLoader(void *p = 0);
   static void *newArray_TSnVoltageBranchLoader(Long_t size, void *p);
   static void delete_TSnVoltageBranchLoader(void *p);
   static void deleteArray_TSnVoltageBranchLoader(void *p);
   static void destruct_TSnVoltageBranchLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnVoltageBranchLoader*)
   {
      ::TSnVoltageBranchLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnVoltageBranchLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnVoltageBranchLoader", ::TSnVoltageBranchLoader::Class_Version(), "./loaders/TSnVoltageBranchLoader.h", 8,
                  typeid(::TSnVoltageBranchLoader), DefineBehavior(ptr, ptr),
                  &::TSnVoltageBranchLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnVoltageBranchLoader) );
      instance.SetNew(&new_TSnVoltageBranchLoader);
      instance.SetNewArray(&newArray_TSnVoltageBranchLoader);
      instance.SetDelete(&delete_TSnVoltageBranchLoader);
      instance.SetDeleteArray(&deleteArray_TSnVoltageBranchLoader);
      instance.SetDestructor(&destruct_TSnVoltageBranchLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnVoltageBranchLoader*)
   {
      return GenerateInitInstanceLocal((::TSnVoltageBranchLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnVoltageBranchLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnHeartbeatBranchLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnHeartbeatBranchLoader(void *p = 0);
   static void *newArray_TSnHeartbeatBranchLoader(Long_t size, void *p);
   static void delete_TSnHeartbeatBranchLoader(void *p);
   static void deleteArray_TSnHeartbeatBranchLoader(void *p);
   static void destruct_TSnHeartbeatBranchLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnHeartbeatBranchLoader*)
   {
      ::TSnHeartbeatBranchLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnHeartbeatBranchLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnHeartbeatBranchLoader", ::TSnHeartbeatBranchLoader::Class_Version(), "./loaders/TSnHeartbeatBranchLoader.h", 8,
                  typeid(::TSnHeartbeatBranchLoader), DefineBehavior(ptr, ptr),
                  &::TSnHeartbeatBranchLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnHeartbeatBranchLoader) );
      instance.SetNew(&new_TSnHeartbeatBranchLoader);
      instance.SetNewArray(&newArray_TSnHeartbeatBranchLoader);
      instance.SetDelete(&delete_TSnHeartbeatBranchLoader);
      instance.SetDeleteArray(&deleteArray_TSnHeartbeatBranchLoader);
      instance.SetDestructor(&destruct_TSnHeartbeatBranchLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnHeartbeatBranchLoader*)
   {
      return GenerateInitInstanceLocal((::TSnHeartbeatBranchLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnHeartbeatBranchLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnAltTreeLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TSnAltTreeLoader(void *p);
   static void deleteArray_TSnAltTreeLoader(void *p);
   static void destruct_TSnAltTreeLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnAltTreeLoader*)
   {
      ::TSnAltTreeLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnAltTreeLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnAltTreeLoader", ::TSnAltTreeLoader::Class_Version(), "./loaders/TSnAltTreeLoader.h", 10,
                  typeid(::TSnAltTreeLoader), DefineBehavior(ptr, ptr),
                  &::TSnAltTreeLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnAltTreeLoader) );
      instance.SetDelete(&delete_TSnAltTreeLoader);
      instance.SetDeleteArray(&deleteArray_TSnAltTreeLoader);
      instance.SetDestructor(&destruct_TSnAltTreeLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnAltTreeLoader*)
   {
      return GenerateInitInstanceLocal((::TSnAltTreeLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnAltTreeLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnAltTreeBranchLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnAltTreeBranchLoader(void *p = 0);
   static void *newArray_TSnAltTreeBranchLoader(Long_t size, void *p);
   static void delete_TSnAltTreeBranchLoader(void *p);
   static void deleteArray_TSnAltTreeBranchLoader(void *p);
   static void destruct_TSnAltTreeBranchLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnAltTreeBranchLoader*)
   {
      ::TSnAltTreeBranchLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnAltTreeBranchLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnAltTreeBranchLoader", ::TSnAltTreeBranchLoader::Class_Version(), "./loaders/TSnAltTreeBranchLoader.h", 7,
                  typeid(::TSnAltTreeBranchLoader), DefineBehavior(ptr, ptr),
                  &::TSnAltTreeBranchLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnAltTreeBranchLoader) );
      instance.SetNew(&new_TSnAltTreeBranchLoader);
      instance.SetNewArray(&newArray_TSnAltTreeBranchLoader);
      instance.SetDelete(&delete_TSnAltTreeBranchLoader);
      instance.SetDeleteArray(&deleteArray_TSnAltTreeBranchLoader);
      instance.SetDestructor(&destruct_TSnAltTreeBranchLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnAltTreeBranchLoader*)
   {
      return GenerateInitInstanceLocal((::TSnAltTreeBranchLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnAltTreeBranchLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnAltTreeRandomLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnAltTreeRandomLoader(void *p = 0);
   static void *newArray_TSnAltTreeRandomLoader(Long_t size, void *p);
   static void delete_TSnAltTreeRandomLoader(void *p);
   static void deleteArray_TSnAltTreeRandomLoader(void *p);
   static void destruct_TSnAltTreeRandomLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnAltTreeRandomLoader*)
   {
      ::TSnAltTreeRandomLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnAltTreeRandomLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnAltTreeRandomLoader", ::TSnAltTreeRandomLoader::Class_Version(), "./loaders/TSnAltTreeRandomLoader.h", 10,
                  typeid(::TSnAltTreeRandomLoader), DefineBehavior(ptr, ptr),
                  &::TSnAltTreeRandomLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnAltTreeRandomLoader) );
      instance.SetNew(&new_TSnAltTreeRandomLoader);
      instance.SetNewArray(&newArray_TSnAltTreeRandomLoader);
      instance.SetDelete(&delete_TSnAltTreeRandomLoader);
      instance.SetDeleteArray(&deleteArray_TSnAltTreeRandomLoader);
      instance.SetDestructor(&destruct_TSnAltTreeRandomLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnAltTreeRandomLoader*)
   {
      return GenerateInitInstanceLocal((::TSnAltTreeRandomLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnAltTreeRandomLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnAltTreeCyclicLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnAltTreeCyclicLoader(void *p = 0);
   static void *newArray_TSnAltTreeCyclicLoader(Long_t size, void *p);
   static void delete_TSnAltTreeCyclicLoader(void *p);
   static void deleteArray_TSnAltTreeCyclicLoader(void *p);
   static void destruct_TSnAltTreeCyclicLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnAltTreeCyclicLoader*)
   {
      ::TSnAltTreeCyclicLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnAltTreeCyclicLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnAltTreeCyclicLoader", ::TSnAltTreeCyclicLoader::Class_Version(), "./loaders/TSnAltTreeCyclicLoader.h", 9,
                  typeid(::TSnAltTreeCyclicLoader), DefineBehavior(ptr, ptr),
                  &::TSnAltTreeCyclicLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnAltTreeCyclicLoader) );
      instance.SetNew(&new_TSnAltTreeCyclicLoader);
      instance.SetNewArray(&newArray_TSnAltTreeCyclicLoader);
      instance.SetDelete(&delete_TSnAltTreeCyclicLoader);
      instance.SetDeleteArray(&deleteArray_TSnAltTreeCyclicLoader);
      instance.SetDestructor(&destruct_TSnAltTreeCyclicLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnAltTreeCyclicLoader*)
   {
      return GenerateInitInstanceLocal((::TSnAltTreeCyclicLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnAltTreeCyclicLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnAltTreeShuffleLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnAltTreeShuffleLoader(void *p = 0);
   static void *newArray_TSnAltTreeShuffleLoader(Long_t size, void *p);
   static void delete_TSnAltTreeShuffleLoader(void *p);
   static void deleteArray_TSnAltTreeShuffleLoader(void *p);
   static void destruct_TSnAltTreeShuffleLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnAltTreeShuffleLoader*)
   {
      ::TSnAltTreeShuffleLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnAltTreeShuffleLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnAltTreeShuffleLoader", ::TSnAltTreeShuffleLoader::Class_Version(), "./loaders/TSnAltTreeShuffleLoader.h", 11,
                  typeid(::TSnAltTreeShuffleLoader), DefineBehavior(ptr, ptr),
                  &::TSnAltTreeShuffleLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnAltTreeShuffleLoader) );
      instance.SetNew(&new_TSnAltTreeShuffleLoader);
      instance.SetNewArray(&newArray_TSnAltTreeShuffleLoader);
      instance.SetDelete(&delete_TSnAltTreeShuffleLoader);
      instance.SetDeleteArray(&deleteArray_TSnAltTreeShuffleLoader);
      instance.SetDestructor(&destruct_TSnAltTreeShuffleLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnAltTreeShuffleLoader*)
   {
      return GenerateInitInstanceLocal((::TSnAltTreeShuffleLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnAltTreeShuffleLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnAltTreeSingleEntryLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnAltTreeSingleEntryLoader(void *p = 0);
   static void *newArray_TSnAltTreeSingleEntryLoader(Long_t size, void *p);
   static void delete_TSnAltTreeSingleEntryLoader(void *p);
   static void deleteArray_TSnAltTreeSingleEntryLoader(void *p);
   static void destruct_TSnAltTreeSingleEntryLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnAltTreeSingleEntryLoader*)
   {
      ::TSnAltTreeSingleEntryLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnAltTreeSingleEntryLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnAltTreeSingleEntryLoader", ::TSnAltTreeSingleEntryLoader::Class_Version(), "./loaders/TSnAltTreeSingleEntryLoader.h", 6,
                  typeid(::TSnAltTreeSingleEntryLoader), DefineBehavior(ptr, ptr),
                  &::TSnAltTreeSingleEntryLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnAltTreeSingleEntryLoader) );
      instance.SetNew(&new_TSnAltTreeSingleEntryLoader);
      instance.SetNewArray(&newArray_TSnAltTreeSingleEntryLoader);
      instance.SetDelete(&delete_TSnAltTreeSingleEntryLoader);
      instance.SetDeleteArray(&deleteArray_TSnAltTreeSingleEntryLoader);
      instance.SetDestructor(&destruct_TSnAltTreeSingleEntryLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnAltTreeSingleEntryLoader*)
   {
      return GenerateInitInstanceLocal((::TSnAltTreeSingleEntryLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnAltTreeSingleEntryLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnLoadFromFileMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnLoadFromFileMod(void *p = 0);
   static void *newArray_TSnLoadFromFileMod(Long_t size, void *p);
   static void delete_TSnLoadFromFileMod(void *p);
   static void deleteArray_TSnLoadFromFileMod(void *p);
   static void destruct_TSnLoadFromFileMod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnLoadFromFileMod*)
   {
      ::TSnLoadFromFileMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnLoadFromFileMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnLoadFromFileMod", ::TSnLoadFromFileMod::Class_Version(), "./loaders/TSnLoadFromFileMod.h", 8,
                  typeid(::TSnLoadFromFileMod), DefineBehavior(ptr, ptr),
                  &::TSnLoadFromFileMod::Dictionary, isa_proxy, 4,
                  sizeof(::TSnLoadFromFileMod) );
      instance.SetNew(&new_TSnLoadFromFileMod);
      instance.SetNewArray(&newArray_TSnLoadFromFileMod);
      instance.SetDelete(&delete_TSnLoadFromFileMod);
      instance.SetDeleteArray(&deleteArray_TSnLoadFromFileMod);
      instance.SetDestructor(&destruct_TSnLoadFromFileMod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnLoadFromFileMod*)
   {
      return GenerateInitInstanceLocal((::TSnLoadFromFileMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnLoadFromFileMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnWindTreeLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnWindTreeLoader(void *p = 0);
   static void *newArray_TSnWindTreeLoader(Long_t size, void *p);
   static void delete_TSnWindTreeLoader(void *p);
   static void deleteArray_TSnWindTreeLoader(void *p);
   static void destruct_TSnWindTreeLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnWindTreeLoader*)
   {
      ::TSnWindTreeLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnWindTreeLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnWindTreeLoader", ::TSnWindTreeLoader::Class_Version(), "./loaders/TSnWindTreeLoader.h", 13,
                  typeid(::TSnWindTreeLoader), DefineBehavior(ptr, ptr),
                  &::TSnWindTreeLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnWindTreeLoader) );
      instance.SetNew(&new_TSnWindTreeLoader);
      instance.SetNewArray(&newArray_TSnWindTreeLoader);
      instance.SetDelete(&delete_TSnWindTreeLoader);
      instance.SetDeleteArray(&deleteArray_TSnWindTreeLoader);
      instance.SetDestructor(&destruct_TSnWindTreeLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnWindTreeLoader*)
   {
      return GenerateInitInstanceLocal((::TSnWindTreeLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnWindTreeLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnWindBranchLoader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnWindBranchLoader(void *p = 0);
   static void *newArray_TSnWindBranchLoader(Long_t size, void *p);
   static void delete_TSnWindBranchLoader(void *p);
   static void deleteArray_TSnWindBranchLoader(void *p);
   static void destruct_TSnWindBranchLoader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnWindBranchLoader*)
   {
      ::TSnWindBranchLoader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnWindBranchLoader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnWindBranchLoader", ::TSnWindBranchLoader::Class_Version(), "./loaders/TSnWindBranchLoader.h", 9,
                  typeid(::TSnWindBranchLoader), DefineBehavior(ptr, ptr),
                  &::TSnWindBranchLoader::Dictionary, isa_proxy, 4,
                  sizeof(::TSnWindBranchLoader) );
      instance.SetNew(&new_TSnWindBranchLoader);
      instance.SetNewArray(&newArray_TSnWindBranchLoader);
      instance.SetDelete(&delete_TSnWindBranchLoader);
      instance.SetDeleteArray(&deleteArray_TSnWindBranchLoader);
      instance.SetDestructor(&destruct_TSnWindBranchLoader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnWindBranchLoader*)
   {
      return GenerateInitInstanceLocal((::TSnWindBranchLoader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnWindBranchLoader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TSnLinkedTreeBranchLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnLinkedTreeBranchLoader::Class_Name()
{
   return "TSnLinkedTreeBranchLoader";
}

//______________________________________________________________________________
const char *TSnLinkedTreeBranchLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnLinkedTreeBranchLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnLinkedTreeBranchLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnLinkedTreeBranchLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnLinkedTreeBranchLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnLinkedTreeBranchLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnLinkedTreeBranchLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnLinkedTreeBranchLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnMetadataLinkBranchLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnMetadataLinkBranchLoader::Class_Name()
{
   return "TSnMetadataLinkBranchLoader";
}

//______________________________________________________________________________
const char *TSnMetadataLinkBranchLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnMetadataLinkBranchLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnMetadataLinkBranchLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnMetadataLinkBranchLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnMetadataLinkBranchLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnMetadataLinkBranchLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnMetadataLinkBranchLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnMetadataLinkBranchLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnTimeLinkBranchLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnTimeLinkBranchLoader::Class_Name()
{
   return "TSnTimeLinkBranchLoader";
}

//______________________________________________________________________________
const char *TSnTimeLinkBranchLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnTimeLinkBranchLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnTimeLinkBranchLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnTimeLinkBranchLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnTimeLinkBranchLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnTimeLinkBranchLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnTimeLinkBranchLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnTimeLinkBranchLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnConfigTreeLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnConfigTreeLoader::Class_Name()
{
   return "TSnConfigTreeLoader";
}

//______________________________________________________________________________
const char *TSnConfigTreeLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnConfigTreeLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnConfigTreeLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnConfigTreeLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnConfigTreeLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnConfigTreeLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnConfigTreeLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnConfigTreeLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnVoltageTreeLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnVoltageTreeLoader::Class_Name()
{
   return "TSnVoltageTreeLoader";
}

//______________________________________________________________________________
const char *TSnVoltageTreeLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnVoltageTreeLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnVoltageTreeLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnVoltageTreeLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnVoltageTreeLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnVoltageTreeLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnVoltageTreeLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnVoltageTreeLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnHeartbeatTreeLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnHeartbeatTreeLoader::Class_Name()
{
   return "TSnHeartbeatTreeLoader";
}

//______________________________________________________________________________
const char *TSnHeartbeatTreeLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnHeartbeatTreeLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnHeartbeatTreeLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnHeartbeatTreeLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnHeartbeatTreeLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnHeartbeatTreeLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnHeartbeatTreeLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnHeartbeatTreeLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnVoltageBranchLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnVoltageBranchLoader::Class_Name()
{
   return "TSnVoltageBranchLoader";
}

//______________________________________________________________________________
const char *TSnVoltageBranchLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnVoltageBranchLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnVoltageBranchLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnVoltageBranchLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnVoltageBranchLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnVoltageBranchLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnVoltageBranchLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnVoltageBranchLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnHeartbeatBranchLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnHeartbeatBranchLoader::Class_Name()
{
   return "TSnHeartbeatBranchLoader";
}

//______________________________________________________________________________
const char *TSnHeartbeatBranchLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnHeartbeatBranchLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnHeartbeatBranchLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnHeartbeatBranchLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnHeartbeatBranchLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnHeartbeatBranchLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnHeartbeatBranchLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnHeartbeatBranchLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnAltTreeLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnAltTreeLoader::Class_Name()
{
   return "TSnAltTreeLoader";
}

//______________________________________________________________________________
const char *TSnAltTreeLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnAltTreeLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnAltTreeLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnAltTreeLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnAltTreeBranchLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnAltTreeBranchLoader::Class_Name()
{
   return "TSnAltTreeBranchLoader";
}

//______________________________________________________________________________
const char *TSnAltTreeBranchLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeBranchLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnAltTreeBranchLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeBranchLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnAltTreeBranchLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeBranchLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnAltTreeBranchLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeBranchLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnAltTreeRandomLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnAltTreeRandomLoader::Class_Name()
{
   return "TSnAltTreeRandomLoader";
}

//______________________________________________________________________________
const char *TSnAltTreeRandomLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeRandomLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnAltTreeRandomLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeRandomLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnAltTreeRandomLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeRandomLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnAltTreeRandomLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeRandomLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnAltTreeCyclicLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnAltTreeCyclicLoader::Class_Name()
{
   return "TSnAltTreeCyclicLoader";
}

//______________________________________________________________________________
const char *TSnAltTreeCyclicLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeCyclicLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnAltTreeCyclicLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeCyclicLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnAltTreeCyclicLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeCyclicLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnAltTreeCyclicLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeCyclicLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnAltTreeShuffleLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnAltTreeShuffleLoader::Class_Name()
{
   return "TSnAltTreeShuffleLoader";
}

//______________________________________________________________________________
const char *TSnAltTreeShuffleLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeShuffleLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnAltTreeShuffleLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeShuffleLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnAltTreeShuffleLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeShuffleLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnAltTreeShuffleLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeShuffleLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnAltTreeSingleEntryLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnAltTreeSingleEntryLoader::Class_Name()
{
   return "TSnAltTreeSingleEntryLoader";
}

//______________________________________________________________________________
const char *TSnAltTreeSingleEntryLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeSingleEntryLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnAltTreeSingleEntryLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeSingleEntryLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnAltTreeSingleEntryLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeSingleEntryLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnAltTreeSingleEntryLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnAltTreeSingleEntryLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnLoadFromFileMod::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnLoadFromFileMod::Class_Name()
{
   return "TSnLoadFromFileMod";
}

//______________________________________________________________________________
const char *TSnLoadFromFileMod::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnLoadFromFileMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnLoadFromFileMod::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnLoadFromFileMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnLoadFromFileMod::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnLoadFromFileMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnLoadFromFileMod::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnLoadFromFileMod*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnWindTreeLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnWindTreeLoader::Class_Name()
{
   return "TSnWindTreeLoader";
}

//______________________________________________________________________________
const char *TSnWindTreeLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnWindTreeLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnWindTreeLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnWindTreeLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnWindTreeLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnWindTreeLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnWindTreeLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnWindTreeLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnWindBranchLoader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnWindBranchLoader::Class_Name()
{
   return "TSnWindBranchLoader";
}

//______________________________________________________________________________
const char *TSnWindBranchLoader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnWindBranchLoader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnWindBranchLoader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnWindBranchLoader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnWindBranchLoader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnWindBranchLoader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnWindBranchLoader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnWindBranchLoader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TSnLinkedTreeBranchLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnLinkedTreeBranchLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnLinkedTreeBranchLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnLinkedTreeBranchLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnLinkedTreeBranchLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnLinkedTreeBranchLoader.
      TClass *R__cl = ::TSnLinkedTreeBranchLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMainBr", &fMainBr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMyTree", &fMyTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMyBr", &fMyBr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLinkedTreeName", &fLinkedTreeName);
      R__insp.InspectMember(fLinkedTreeName, "fLinkedTreeName.");
      TAMTreeBranchLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TSnLinkedTreeBranchLoader(void *p) {
      delete ((::TSnLinkedTreeBranchLoader*)p);
   }
   static void deleteArray_TSnLinkedTreeBranchLoader(void *p) {
      delete [] ((::TSnLinkedTreeBranchLoader*)p);
   }
   static void destruct_TSnLinkedTreeBranchLoader(void *p) {
      typedef ::TSnLinkedTreeBranchLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnLinkedTreeBranchLoader

//______________________________________________________________________________
void TSnMetadataLinkBranchLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnMetadataLinkBranchLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnMetadataLinkBranchLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnMetadataLinkBranchLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnMetadataLinkBranchLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnMetadataLinkBranchLoader.
      TClass *R__cl = ::TSnMetadataLinkBranchLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMeta", &fMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMyMeta", &fMyMeta);
      TSnLinkedTreeBranchLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnMetadataLinkBranchLoader(void *p) {
      return  p ? new(p) ::TSnMetadataLinkBranchLoader : new ::TSnMetadataLinkBranchLoader;
   }
   static void *newArray_TSnMetadataLinkBranchLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnMetadataLinkBranchLoader[nElements] : new ::TSnMetadataLinkBranchLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnMetadataLinkBranchLoader(void *p) {
      delete ((::TSnMetadataLinkBranchLoader*)p);
   }
   static void deleteArray_TSnMetadataLinkBranchLoader(void *p) {
      delete [] ((::TSnMetadataLinkBranchLoader*)p);
   }
   static void destruct_TSnMetadataLinkBranchLoader(void *p) {
      typedef ::TSnMetadataLinkBranchLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnMetadataLinkBranchLoader

//______________________________________________________________________________
void TSnTimeLinkBranchLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnTimeLinkBranchLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnTimeLinkBranchLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnTimeLinkBranchLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnTimeLinkBranchLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnTimeLinkBranchLoader.
      TClass *R__cl = ::TSnTimeLinkBranchLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMyBrNm", &fMyBrNm);
      R__insp.InspectMember(fMyBrNm, "fMyBrNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMainBrNm", &fMainBrNm);
      R__insp.InspectMember(fMainBrNm, "fMainBrNm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeth", &fMeth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMainCache", &fMainCache);
      TSnLinkedTreeBranchLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TSnTimeLinkBranchLoader(void *p) {
      delete ((::TSnTimeLinkBranchLoader*)p);
   }
   static void deleteArray_TSnTimeLinkBranchLoader(void *p) {
      delete [] ((::TSnTimeLinkBranchLoader*)p);
   }
   static void destruct_TSnTimeLinkBranchLoader(void *p) {
      typedef ::TSnTimeLinkBranchLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnTimeLinkBranchLoader

//______________________________________________________________________________
void TSnConfigTreeLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnConfigTreeLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnConfigTreeLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnConfigTreeLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnConfigTreeLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnConfigTreeLoader.
      TClass *R__cl = ::TSnConfigTreeLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      TAMVirtualLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnConfigTreeLoader(void *p) {
      return  p ? new(p) ::TSnConfigTreeLoader : new ::TSnConfigTreeLoader;
   }
   static void *newArray_TSnConfigTreeLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnConfigTreeLoader[nElements] : new ::TSnConfigTreeLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnConfigTreeLoader(void *p) {
      delete ((::TSnConfigTreeLoader*)p);
   }
   static void deleteArray_TSnConfigTreeLoader(void *p) {
      delete [] ((::TSnConfigTreeLoader*)p);
   }
   static void destruct_TSnConfigTreeLoader(void *p) {
      typedef ::TSnConfigTreeLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnConfigTreeLoader

//______________________________________________________________________________
void TSnVoltageTreeLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnVoltageTreeLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnVoltageTreeLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnVoltageTreeLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnVoltageTreeLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnVoltageTreeLoader.
      TClass *R__cl = ::TSnVoltageTreeLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeth", &fMeth);
      TAMVirtualLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnVoltageTreeLoader(void *p) {
      return  p ? new(p) ::TSnVoltageTreeLoader : new ::TSnVoltageTreeLoader;
   }
   static void *newArray_TSnVoltageTreeLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnVoltageTreeLoader[nElements] : new ::TSnVoltageTreeLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnVoltageTreeLoader(void *p) {
      delete ((::TSnVoltageTreeLoader*)p);
   }
   static void deleteArray_TSnVoltageTreeLoader(void *p) {
      delete [] ((::TSnVoltageTreeLoader*)p);
   }
   static void destruct_TSnVoltageTreeLoader(void *p) {
      typedef ::TSnVoltageTreeLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnVoltageTreeLoader

//______________________________________________________________________________
void TSnHeartbeatTreeLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnHeartbeatTreeLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnHeartbeatTreeLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnHeartbeatTreeLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnHeartbeatTreeLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnHeartbeatTreeLoader.
      TClass *R__cl = ::TSnHeartbeatTreeLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeth", &fMeth);
      TAMVirtualLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnHeartbeatTreeLoader(void *p) {
      return  p ? new(p) ::TSnHeartbeatTreeLoader : new ::TSnHeartbeatTreeLoader;
   }
   static void *newArray_TSnHeartbeatTreeLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnHeartbeatTreeLoader[nElements] : new ::TSnHeartbeatTreeLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnHeartbeatTreeLoader(void *p) {
      delete ((::TSnHeartbeatTreeLoader*)p);
   }
   static void deleteArray_TSnHeartbeatTreeLoader(void *p) {
      delete [] ((::TSnHeartbeatTreeLoader*)p);
   }
   static void destruct_TSnHeartbeatTreeLoader(void *p) {
      typedef ::TSnHeartbeatTreeLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnHeartbeatTreeLoader

//______________________________________________________________________________
void TSnVoltageBranchLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnVoltageBranchLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnVoltageBranchLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnVoltageBranchLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnVoltageBranchLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnVoltageBranchLoader.
      TClass *R__cl = ::TSnVoltageBranchLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPwr", &fPwr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      TSnTimeLinkBranchLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnVoltageBranchLoader(void *p) {
      return  p ? new(p) ::TSnVoltageBranchLoader : new ::TSnVoltageBranchLoader;
   }
   static void *newArray_TSnVoltageBranchLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnVoltageBranchLoader[nElements] : new ::TSnVoltageBranchLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnVoltageBranchLoader(void *p) {
      delete ((::TSnVoltageBranchLoader*)p);
   }
   static void deleteArray_TSnVoltageBranchLoader(void *p) {
      delete [] ((::TSnVoltageBranchLoader*)p);
   }
   static void destruct_TSnVoltageBranchLoader(void *p) {
      typedef ::TSnVoltageBranchLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnVoltageBranchLoader

//______________________________________________________________________________
void TSnHeartbeatBranchLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnHeartbeatBranchLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnHeartbeatBranchLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnHeartbeatBranchLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnHeartbeatBranchLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnHeartbeatBranchLoader.
      TClass *R__cl = ::TSnHeartbeatBranchLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHtbt", &fHtbt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      TSnTimeLinkBranchLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnHeartbeatBranchLoader(void *p) {
      return  p ? new(p) ::TSnHeartbeatBranchLoader : new ::TSnHeartbeatBranchLoader;
   }
   static void *newArray_TSnHeartbeatBranchLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnHeartbeatBranchLoader[nElements] : new ::TSnHeartbeatBranchLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnHeartbeatBranchLoader(void *p) {
      delete ((::TSnHeartbeatBranchLoader*)p);
   }
   static void deleteArray_TSnHeartbeatBranchLoader(void *p) {
      delete [] ((::TSnHeartbeatBranchLoader*)p);
   }
   static void destruct_TSnHeartbeatBranchLoader(void *p) {
      typedef ::TSnHeartbeatBranchLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnHeartbeatBranchLoader

//______________________________________________________________________________
void TSnAltTreeLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnAltTreeLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnAltTreeLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnAltTreeLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnAltTreeLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnAltTreeLoader.
      TClass *R__cl = ::TSnAltTreeLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAltTreeTag", &fAltTreeTag);
      R__insp.InspectMember(fAltTreeTag, "fAltTreeTag.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAltTree", &fAltTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEntryList", &fEntryList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAltEntries", &fAltEntries);
      TAMVirtualLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TSnAltTreeLoader(void *p) {
      delete ((::TSnAltTreeLoader*)p);
   }
   static void deleteArray_TSnAltTreeLoader(void *p) {
      delete [] ((::TSnAltTreeLoader*)p);
   }
   static void destruct_TSnAltTreeLoader(void *p) {
      typedef ::TSnAltTreeLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnAltTreeLoader

//______________________________________________________________________________
void TSnAltTreeBranchLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnAltTreeBranchLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnAltTreeBranchLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnAltTreeBranchLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnAltTreeBranchLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnAltTreeBranchLoader.
      TClass *R__cl = ::TSnAltTreeBranchLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAltLoader", &fAltLoader);
      TAMTreeBranchLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnAltTreeBranchLoader(void *p) {
      return  p ? new(p) ::TSnAltTreeBranchLoader : new ::TSnAltTreeBranchLoader;
   }
   static void *newArray_TSnAltTreeBranchLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnAltTreeBranchLoader[nElements] : new ::TSnAltTreeBranchLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnAltTreeBranchLoader(void *p) {
      delete ((::TSnAltTreeBranchLoader*)p);
   }
   static void deleteArray_TSnAltTreeBranchLoader(void *p) {
      delete [] ((::TSnAltTreeBranchLoader*)p);
   }
   static void destruct_TSnAltTreeBranchLoader(void *p) {
      typedef ::TSnAltTreeBranchLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnAltTreeBranchLoader

//______________________________________________________________________________
void TSnAltTreeRandomLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnAltTreeRandomLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnAltTreeRandomLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnAltTreeRandomLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnAltTreeRandomLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnAltTreeRandomLoader.
      TClass *R__cl = ::TSnAltTreeRandomLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSeed", &fSeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRand", &fRand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurEntry", &fCurEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRndEntry", &fRndEntry);
      TSnAltTreeLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnAltTreeRandomLoader(void *p) {
      return  p ? new(p) ::TSnAltTreeRandomLoader : new ::TSnAltTreeRandomLoader;
   }
   static void *newArray_TSnAltTreeRandomLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnAltTreeRandomLoader[nElements] : new ::TSnAltTreeRandomLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnAltTreeRandomLoader(void *p) {
      delete ((::TSnAltTreeRandomLoader*)p);
   }
   static void deleteArray_TSnAltTreeRandomLoader(void *p) {
      delete [] ((::TSnAltTreeRandomLoader*)p);
   }
   static void destruct_TSnAltTreeRandomLoader(void *p) {
      typedef ::TSnAltTreeRandomLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnAltTreeRandomLoader

//______________________________________________________________________________
void TSnAltTreeCyclicLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnAltTreeCyclicLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnAltTreeCyclicLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnAltTreeCyclicLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnAltTreeCyclicLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnAltTreeCyclicLoader.
      TClass *R__cl = ::TSnAltTreeCyclicLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirst", &fFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumAlt", &fNumAlt);
      TSnAltTreeLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnAltTreeCyclicLoader(void *p) {
      return  p ? new(p) ::TSnAltTreeCyclicLoader : new ::TSnAltTreeCyclicLoader;
   }
   static void *newArray_TSnAltTreeCyclicLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnAltTreeCyclicLoader[nElements] : new ::TSnAltTreeCyclicLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnAltTreeCyclicLoader(void *p) {
      delete ((::TSnAltTreeCyclicLoader*)p);
   }
   static void deleteArray_TSnAltTreeCyclicLoader(void *p) {
      delete [] ((::TSnAltTreeCyclicLoader*)p);
   }
   static void destruct_TSnAltTreeCyclicLoader(void *p) {
      typedef ::TSnAltTreeCyclicLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnAltTreeCyclicLoader

//______________________________________________________________________________
void TSnAltTreeShuffleLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnAltTreeShuffleLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnAltTreeShuffleLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnAltTreeShuffleLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnAltTreeShuffleLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnAltTreeShuffleLoader.
      TClass *R__cl = ::TSnAltTreeShuffleLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEntList", (void*)&fEntList);
      R__insp.InspectMember("vector<unsigned int,allocator<unsigned int> >", (void*)&fEntList, "fEntList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMakeList", &fMakeList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurEntry", &fCurEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShfEntry", &fShfEntry);
      TSnAltTreeLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnAltTreeShuffleLoader(void *p) {
      return  p ? new(p) ::TSnAltTreeShuffleLoader : new ::TSnAltTreeShuffleLoader;
   }
   static void *newArray_TSnAltTreeShuffleLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnAltTreeShuffleLoader[nElements] : new ::TSnAltTreeShuffleLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnAltTreeShuffleLoader(void *p) {
      delete ((::TSnAltTreeShuffleLoader*)p);
   }
   static void deleteArray_TSnAltTreeShuffleLoader(void *p) {
      delete [] ((::TSnAltTreeShuffleLoader*)p);
   }
   static void destruct_TSnAltTreeShuffleLoader(void *p) {
      typedef ::TSnAltTreeShuffleLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnAltTreeShuffleLoader

//______________________________________________________________________________
void TSnAltTreeSingleEntryLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnAltTreeSingleEntryLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnAltTreeSingleEntryLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnAltTreeSingleEntryLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnAltTreeSingleEntryLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnAltTreeSingleEntryLoader.
      TClass *R__cl = ::TSnAltTreeSingleEntryLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAltEntry", &fAltEntry);
      TSnAltTreeLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnAltTreeSingleEntryLoader(void *p) {
      return  p ? new(p) ::TSnAltTreeSingleEntryLoader : new ::TSnAltTreeSingleEntryLoader;
   }
   static void *newArray_TSnAltTreeSingleEntryLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnAltTreeSingleEntryLoader[nElements] : new ::TSnAltTreeSingleEntryLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnAltTreeSingleEntryLoader(void *p) {
      delete ((::TSnAltTreeSingleEntryLoader*)p);
   }
   static void deleteArray_TSnAltTreeSingleEntryLoader(void *p) {
      delete [] ((::TSnAltTreeSingleEntryLoader*)p);
   }
   static void destruct_TSnAltTreeSingleEntryLoader(void *p) {
      typedef ::TSnAltTreeSingleEntryLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnAltTreeSingleEntryLoader

//______________________________________________________________________________
void TSnLoadFromFileMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnLoadFromFileMod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnLoadFromFileMod::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnLoadFromFileMod::Class(),this);
   }
}

//______________________________________________________________________________
void TSnLoadFromFileMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnLoadFromFileMod.
      TClass *R__cl = ::TSnLoadFromFileMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFilen", &fFilen);
      R__insp.InspectMember(fFilen, "fFilen.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fObjnm", &fObjnm);
      R__insp.InspectMember(fObjnm, "fObjnm.");
      TAModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnLoadFromFileMod(void *p) {
      return  p ? new(p) ::TSnLoadFromFileMod : new ::TSnLoadFromFileMod;
   }
   static void *newArray_TSnLoadFromFileMod(Long_t nElements, void *p) {
      return p ? new(p) ::TSnLoadFromFileMod[nElements] : new ::TSnLoadFromFileMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnLoadFromFileMod(void *p) {
      delete ((::TSnLoadFromFileMod*)p);
   }
   static void deleteArray_TSnLoadFromFileMod(void *p) {
      delete [] ((::TSnLoadFromFileMod*)p);
   }
   static void destruct_TSnLoadFromFileMod(void *p) {
      typedef ::TSnLoadFromFileMod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnLoadFromFileMod

//______________________________________________________________________________
void TSnWindTreeLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnWindTreeLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnWindTreeLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnWindTreeLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnWindTreeLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnWindTreeLoader.
      TClass *R__cl = ::TSnWindTreeLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeth", &fMeth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTName", &fTName);
      R__insp.InspectMember(fTName, "fTName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBrName", &fBrName);
      R__insp.InspectMember(fBrName, "fBrName.");
      TAMVirtualLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnWindTreeLoader(void *p) {
      return  p ? new(p) ::TSnWindTreeLoader : new ::TSnWindTreeLoader;
   }
   static void *newArray_TSnWindTreeLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnWindTreeLoader[nElements] : new ::TSnWindTreeLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnWindTreeLoader(void *p) {
      delete ((::TSnWindTreeLoader*)p);
   }
   static void deleteArray_TSnWindTreeLoader(void *p) {
      delete [] ((::TSnWindTreeLoader*)p);
   }
   static void destruct_TSnWindTreeLoader(void *p) {
      typedef ::TSnWindTreeLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnWindTreeLoader

//______________________________________________________________________________
void TSnWindBranchLoader::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnWindBranchLoader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnWindBranchLoader::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnWindBranchLoader::Class(),this);
   }
}

//______________________________________________________________________________
void TSnWindBranchLoader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnWindBranchLoader.
      TClass *R__cl = ::TSnWindBranchLoader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWnd", &fWnd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHdr", &fHdr);
      TSnTimeLinkBranchLoader::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnWindBranchLoader(void *p) {
      return  p ? new(p) ::TSnWindBranchLoader : new ::TSnWindBranchLoader;
   }
   static void *newArray_TSnWindBranchLoader(Long_t nElements, void *p) {
      return p ? new(p) ::TSnWindBranchLoader[nElements] : new ::TSnWindBranchLoader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnWindBranchLoader(void *p) {
      delete ((::TSnWindBranchLoader*)p);
   }
   static void deleteArray_TSnWindBranchLoader(void *p) {
      delete [] ((::TSnWindBranchLoader*)p);
   }
   static void destruct_TSnWindBranchLoader(void *p) {
      typedef ::TSnWindBranchLoader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnWindBranchLoader

namespace ROOT {
   void vectorlEunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPintgR_Dictionary();
   static void *new_vectorlEunsignedsPintgR(void *p = 0);
   static void *newArray_vectorlEunsignedsPintgR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPintgR(void *p);
   static void deleteArray_vectorlEunsignedsPintgR(void *p);
   static void destruct_vectorlEunsignedsPintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned int>*)
   {
      vector<unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned int>", -2, "vector.dll", 0,
                  typeid(vector<unsigned int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned int>) );
      instance.SetNew(&new_vectorlEunsignedsPintgR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPintgR);
      instance.SetDelete(&delete_vectorlEunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPintgR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned int> : new vector<unsigned int>;
   }
   static void *newArray_vectorlEunsignedsPintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned int>[nElements] : new vector<unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPintgR(void *p) {
      delete ((vector<unsigned int>*)p);
   }
   static void deleteArray_vectorlEunsignedsPintgR(void *p) {
      delete [] ((vector<unsigned int>*)p);
   }
   static void destruct_vectorlEunsignedsPintgR(void *p) {
      typedef vector<unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned int>

/********************************************************
* loaders/G__loaders.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__loaders();

extern "C" void G__set_cpp_environmentG__loaders() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("loaders/TSnLinkedTreeBranchLoader.h");
  G__add_compiledheader("loaders/TSnMetadataLinkBranchLoader.h");
  G__add_compiledheader("loaders/TSnTimeLinkBranchLoader.h");
  G__add_compiledheader("loaders/TSnConfigTreeLoader.h");
  G__add_compiledheader("loaders/TSnVoltageTreeLoader.h");
  G__add_compiledheader("loaders/TSnHeartbeatTreeLoader.h");
  G__add_compiledheader("loaders/TSnVoltageBranchLoader.h");
  G__add_compiledheader("loaders/TSnHeartbeatBranchLoader.h");
  G__add_compiledheader("loaders/TSnAltTreeLoader.h");
  G__add_compiledheader("loaders/TSnAltTreeBranchLoader.h");
  G__add_compiledheader("loaders/TSnAltTreeRandomLoader.h");
  G__add_compiledheader("loaders/TSnAltTreeCyclicLoader.h");
  G__add_compiledheader("loaders/TSnAltTreeShuffleLoader.h");
  G__add_compiledheader("loaders/TSnAltTreeSingleEntryLoader.h");
  G__add_compiledheader("loaders/TSnLoadFromFileMod.h");
  G__add_compiledheader("loaders/TSnWindTreeLoader.h");
  G__add_compiledheader("loaders/TSnWindBranchLoader.h");
  G__cpp_reset_tagtableG__loaders();
}
#include <new>
extern "C" int G__cpp_dllrevG__loaders() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TSnLinkedTreeBranchLoader */
static int G__G__loaders_484_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnLinkedTreeBranchLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_484_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnLinkedTreeBranchLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_484_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnLinkedTreeBranchLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_484_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnLinkedTreeBranchLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_484_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnLinkedTreeBranchLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_484_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnLinkedTreeBranchLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_484_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnLinkedTreeBranchLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_484_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnLinkedTreeBranchLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_484_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnLinkedTreeBranchLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnLinkedTreeBranchLoader G__TTSnLinkedTreeBranchLoader;
static int G__G__loaders_484_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnLinkedTreeBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnLinkedTreeBranchLoader*) (soff+(sizeof(TSnLinkedTreeBranchLoader)*i)))->~G__TTSnLinkedTreeBranchLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnLinkedTreeBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnLinkedTreeBranchLoader*) (soff))->~G__TTSnLinkedTreeBranchLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnMetadataLinkBranchLoader */
static int G__G__loaders_486_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnMetadataLinkBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnMetadataLinkBranchLoader[n];
     } else {
       p = new((void*) gvp) TSnMetadataLinkBranchLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnMetadataLinkBranchLoader;
     } else {
       p = new((void*) gvp) TSnMetadataLinkBranchLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnMetadataLinkBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_486_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnMetadataLinkBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnMetadataLinkBranchLoader((TAMBranchInfo*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TSnMetadataLinkBranchLoader((TAMBranchInfo*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnMetadataLinkBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_486_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnMetadataLinkBranchLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_486_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnMetadataLinkBranchLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_486_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnMetadataLinkBranchLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_486_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnMetadataLinkBranchLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_486_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnMetadataLinkBranchLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_486_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnMetadataLinkBranchLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_486_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnMetadataLinkBranchLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_486_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnMetadataLinkBranchLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_486_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnMetadataLinkBranchLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_486_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnMetadataLinkBranchLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnMetadataLinkBranchLoader(*(TSnMetadataLinkBranchLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnMetadataLinkBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnMetadataLinkBranchLoader G__TTSnMetadataLinkBranchLoader;
static int G__G__loaders_486_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnMetadataLinkBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnMetadataLinkBranchLoader*) (soff+(sizeof(TSnMetadataLinkBranchLoader)*i)))->~G__TTSnMetadataLinkBranchLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnMetadataLinkBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnMetadataLinkBranchLoader*) (soff))->~G__TTSnMetadataLinkBranchLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnTimeLinkBranchLoader */
static int G__G__loaders_488_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnTimeLinkBranchLoader*) G__getstructoffset())->GetMyTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnTimeLinkBranchLoader*) G__getstructoffset())->GetMainTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnTimeLinkBranchLoader*) G__getstructoffset())->SetPointerToMyLinkData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnTimeLinkBranchLoader*) G__getstructoffset())->SetPointerToMainLinkData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSnTimeLinkBranchLoader*) G__getstructoffset())->BuildIndexOn((TTree*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSnTimeLinkBranchLoader*) G__getstructoffset())->GetMethod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnTimeLinkBranchLoader*) G__getstructoffset())->SetMethod(*(TSnTimeLinkBranchLoader::EMethod_t*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnTimeLinkBranchLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnTimeLinkBranchLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnTimeLinkBranchLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnTimeLinkBranchLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnTimeLinkBranchLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnTimeLinkBranchLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnTimeLinkBranchLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnTimeLinkBranchLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_488_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnTimeLinkBranchLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnTimeLinkBranchLoader G__TTSnTimeLinkBranchLoader;
static int G__G__loaders_488_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnTimeLinkBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnTimeLinkBranchLoader*) (soff+(sizeof(TSnTimeLinkBranchLoader)*i)))->~G__TTSnTimeLinkBranchLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnTimeLinkBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnTimeLinkBranchLoader*) (soff))->~G__TTSnTimeLinkBranchLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnConfigTreeLoader */
static int G__G__loaders_491_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnConfigTreeLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnConfigTreeLoader[n];
     } else {
       p = new((void*) gvp) TSnConfigTreeLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnConfigTreeLoader;
     } else {
       p = new((void*) gvp) TSnConfigTreeLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnConfigTreeLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_491_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnConfigTreeLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_491_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnConfigTreeLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_491_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnConfigTreeLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_491_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnConfigTreeLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_491_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnConfigTreeLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_491_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnConfigTreeLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_491_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnConfigTreeLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_491_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnConfigTreeLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_491_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnConfigTreeLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_491_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnConfigTreeLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnConfigTreeLoader(*(TSnConfigTreeLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnConfigTreeLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnConfigTreeLoader G__TTSnConfigTreeLoader;
static int G__G__loaders_491_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnConfigTreeLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnConfigTreeLoader*) (soff+(sizeof(TSnConfigTreeLoader)*i)))->~G__TTSnConfigTreeLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnConfigTreeLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnConfigTreeLoader*) (soff))->~G__TTSnConfigTreeLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__loaders_491_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnConfigTreeLoader* dest = (TSnConfigTreeLoader*) G__getstructoffset();
   *dest = *(TSnConfigTreeLoader*) libp->para[0].ref;
   const TSnConfigTreeLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnVoltageTreeLoader */
static int G__G__loaders_492_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnVoltageTreeLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnVoltageTreeLoader[n];
     } else {
       p = new((void*) gvp) TSnVoltageTreeLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnVoltageTreeLoader;
     } else {
       p = new((void*) gvp) TSnVoltageTreeLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageTreeLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_492_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnVoltageTreeLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnVoltageTreeLoader((const TSnTimeLinkBranchLoader::EMethod_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSnVoltageTreeLoader((const TSnTimeLinkBranchLoader::EMethod_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageTreeLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_492_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnVoltageTreeLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_492_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnVoltageTreeLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_492_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnVoltageTreeLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_492_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnVoltageTreeLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_492_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnVoltageTreeLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_492_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnVoltageTreeLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_492_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnVoltageTreeLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_492_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnVoltageTreeLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_492_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnVoltageTreeLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_492_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnVoltageTreeLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnVoltageTreeLoader(*(TSnVoltageTreeLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageTreeLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnVoltageTreeLoader G__TTSnVoltageTreeLoader;
static int G__G__loaders_492_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnVoltageTreeLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnVoltageTreeLoader*) (soff+(sizeof(TSnVoltageTreeLoader)*i)))->~G__TTSnVoltageTreeLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnVoltageTreeLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnVoltageTreeLoader*) (soff))->~G__TTSnVoltageTreeLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__loaders_492_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnVoltageTreeLoader* dest = (TSnVoltageTreeLoader*) G__getstructoffset();
   *dest = *(TSnVoltageTreeLoader*) libp->para[0].ref;
   const TSnVoltageTreeLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnHeartbeatTreeLoader */
static int G__G__loaders_493_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnHeartbeatTreeLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnHeartbeatTreeLoader[n];
     } else {
       p = new((void*) gvp) TSnHeartbeatTreeLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnHeartbeatTreeLoader;
     } else {
       p = new((void*) gvp) TSnHeartbeatTreeLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatTreeLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_493_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnHeartbeatTreeLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnHeartbeatTreeLoader((const TSnTimeLinkBranchLoader::EMethod_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSnHeartbeatTreeLoader((const TSnTimeLinkBranchLoader::EMethod_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatTreeLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_493_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnHeartbeatTreeLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_493_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnHeartbeatTreeLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_493_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnHeartbeatTreeLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_493_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnHeartbeatTreeLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_493_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnHeartbeatTreeLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_493_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnHeartbeatTreeLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_493_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnHeartbeatTreeLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_493_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnHeartbeatTreeLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_493_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnHeartbeatTreeLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_493_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnHeartbeatTreeLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnHeartbeatTreeLoader(*(TSnHeartbeatTreeLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatTreeLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnHeartbeatTreeLoader G__TTSnHeartbeatTreeLoader;
static int G__G__loaders_493_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnHeartbeatTreeLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnHeartbeatTreeLoader*) (soff+(sizeof(TSnHeartbeatTreeLoader)*i)))->~G__TTSnHeartbeatTreeLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnHeartbeatTreeLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnHeartbeatTreeLoader*) (soff))->~G__TTSnHeartbeatTreeLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__loaders_493_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnHeartbeatTreeLoader* dest = (TSnHeartbeatTreeLoader*) G__getstructoffset();
   *dest = *(TSnHeartbeatTreeLoader*) libp->para[0].ref;
   const TSnHeartbeatTreeLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnVoltageBranchLoader */
static int G__G__loaders_500_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnVoltageBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnVoltageBranchLoader[n];
     } else {
       p = new((void*) gvp) TSnVoltageBranchLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnVoltageBranchLoader;
     } else {
       p = new((void*) gvp) TSnVoltageBranchLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_500_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnVoltageBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnVoltageBranchLoader(
(TAMBranchInfo*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const TSnTimeLinkBranchLoader::EMethod_t) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) TSnVoltageBranchLoader(
(TAMBranchInfo*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const TSnTimeLinkBranchLoader::EMethod_t) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_500_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnVoltageBranchLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_500_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnVoltageBranchLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_500_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnVoltageBranchLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_500_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnVoltageBranchLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_500_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnVoltageBranchLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_500_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnVoltageBranchLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_500_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnVoltageBranchLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_500_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnVoltageBranchLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_500_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnVoltageBranchLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_500_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnVoltageBranchLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnVoltageBranchLoader(*(TSnVoltageBranchLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnVoltageBranchLoader G__TTSnVoltageBranchLoader;
static int G__G__loaders_500_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnVoltageBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnVoltageBranchLoader*) (soff+(sizeof(TSnVoltageBranchLoader)*i)))->~G__TTSnVoltageBranchLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnVoltageBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnVoltageBranchLoader*) (soff))->~G__TTSnVoltageBranchLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnHeartbeatBranchLoader */
static int G__G__loaders_502_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnHeartbeatBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnHeartbeatBranchLoader[n];
     } else {
       p = new((void*) gvp) TSnHeartbeatBranchLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnHeartbeatBranchLoader;
     } else {
       p = new((void*) gvp) TSnHeartbeatBranchLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_502_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnHeartbeatBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnHeartbeatBranchLoader(
(TAMBranchInfo*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const TSnTimeLinkBranchLoader::EMethod_t) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) TSnHeartbeatBranchLoader(
(TAMBranchInfo*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const TSnTimeLinkBranchLoader::EMethod_t) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_502_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnHeartbeatBranchLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_502_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnHeartbeatBranchLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_502_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnHeartbeatBranchLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_502_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnHeartbeatBranchLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_502_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnHeartbeatBranchLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_502_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnHeartbeatBranchLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_502_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnHeartbeatBranchLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_502_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnHeartbeatBranchLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_502_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnHeartbeatBranchLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_502_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnHeartbeatBranchLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnHeartbeatBranchLoader(*(TSnHeartbeatBranchLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnHeartbeatBranchLoader G__TTSnHeartbeatBranchLoader;
static int G__G__loaders_502_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnHeartbeatBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnHeartbeatBranchLoader*) (soff+(sizeof(TSnHeartbeatBranchLoader)*i)))->~G__TTSnHeartbeatBranchLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnHeartbeatBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnHeartbeatBranchLoader*) (soff))->~G__TTSnHeartbeatBranchLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnAltTreeLoader */
static int G__G__loaders_504_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((TSnAltTreeLoader*) G__getstructoffset())->GetAltEntryFor((const Long64_t) G__Longlong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnAltTreeLoader*) G__getstructoffset())->GetAltTreeTagStr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TSnAltTreeLoader*) G__getstructoffset())->GetAltTreeTag();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnAltTreeLoader*) G__getstructoffset())->GetAltTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnAltTreeLoader*) G__getstructoffset())->GetAltTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnAltTreeLoader*) G__getstructoffset())->GetEntryList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnAltTreeLoader*) G__getstructoffset())->GetEntryList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const TSnAltTreeLoader*) G__getstructoffset())->GetAltTreeEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const TSnAltTreeLoader*) G__getstructoffset())->GetNumAltEntriesSlow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnAltTreeLoader*) G__getstructoffset())->SetAltTreeTag((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnAltTreeLoader*) G__getstructoffset())->SetAltTree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnAltTreeLoader*) G__getstructoffset())->SetEntryList((TEntryList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((TSnAltTreeLoader*) G__getstructoffset())->GetEntryNumberFor((const Long64_t) G__Longlong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnAltTreeLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnAltTreeLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnAltTreeLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnAltTreeLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnAltTreeLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_504_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnAltTreeLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnAltTreeLoader G__TTSnAltTreeLoader;
static int G__G__loaders_504_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnAltTreeLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnAltTreeLoader*) (soff+(sizeof(TSnAltTreeLoader)*i)))->~G__TTSnAltTreeLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnAltTreeLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnAltTreeLoader*) (soff))->~G__TTSnAltTreeLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__loaders_504_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeLoader* dest = (TSnAltTreeLoader*) G__getstructoffset();
   *dest = *(TSnAltTreeLoader*) libp->para[0].ref;
   const TSnAltTreeLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnAltTreeBranchLoader */
static int G__G__loaders_505_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeBranchLoader[n];
     } else {
       p = new((void*) gvp) TSnAltTreeBranchLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeBranchLoader;
     } else {
       p = new((void*) gvp) TSnAltTreeBranchLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_505_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnAltTreeBranchLoader((TAMBranchInfo*) G__int(libp->para[0]), (TSnAltTreeLoader*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TSnAltTreeBranchLoader((TAMBranchInfo*) G__int(libp->para[0]), (TSnAltTreeLoader*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_505_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnAltTreeBranchLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_505_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeBranchLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_505_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnAltTreeBranchLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_505_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnAltTreeBranchLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_505_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnAltTreeBranchLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_505_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeBranchLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_505_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnAltTreeBranchLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_505_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeBranchLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_505_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnAltTreeBranchLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_505_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnAltTreeBranchLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnAltTreeBranchLoader(*(TSnAltTreeBranchLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnAltTreeBranchLoader G__TTSnAltTreeBranchLoader;
static int G__G__loaders_505_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnAltTreeBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnAltTreeBranchLoader*) (soff+(sizeof(TSnAltTreeBranchLoader)*i)))->~G__TTSnAltTreeBranchLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnAltTreeBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnAltTreeBranchLoader*) (soff))->~G__TTSnAltTreeBranchLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnAltTreeRandomLoader */
static int G__G__loaders_507_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeRandomLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeRandomLoader[n];
     } else {
       p = new((void*) gvp) TSnAltTreeRandomLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeRandomLoader;
     } else {
       p = new((void*) gvp) TSnAltTreeRandomLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeRandomLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_507_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeRandomLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeRandomLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]), (TEntryList*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TSnAltTreeRandomLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]), (TEntryList*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeRandomLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnAltTreeRandomLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeRandomLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_507_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TSnAltTreeRandomLoader*) G__getstructoffset())->GetRandSeed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_507_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnAltTreeRandomLoader*) G__getstructoffset())->SetRandSeed((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_507_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnAltTreeRandomLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_507_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeRandomLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_507_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnAltTreeRandomLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_507_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnAltTreeRandomLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_507_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnAltTreeRandomLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_507_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeRandomLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_507_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnAltTreeRandomLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_507_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeRandomLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_507_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnAltTreeRandomLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_507_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnAltTreeRandomLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnAltTreeRandomLoader(*(TSnAltTreeRandomLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeRandomLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnAltTreeRandomLoader G__TTSnAltTreeRandomLoader;
static int G__G__loaders_507_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnAltTreeRandomLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnAltTreeRandomLoader*) (soff+(sizeof(TSnAltTreeRandomLoader)*i)))->~G__TTSnAltTreeRandomLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnAltTreeRandomLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnAltTreeRandomLoader*) (soff))->~G__TTSnAltTreeRandomLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__loaders_507_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeRandomLoader* dest = (TSnAltTreeRandomLoader*) G__getstructoffset();
   *dest = *(TSnAltTreeRandomLoader*) libp->para[0].ref;
   const TSnAltTreeRandomLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnAltTreeCyclicLoader */
static int G__G__loaders_508_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeCyclicLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeCyclicLoader[n];
     } else {
       p = new((void*) gvp) TSnAltTreeCyclicLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeCyclicLoader;
     } else {
       p = new((void*) gvp) TSnAltTreeCyclicLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeCyclicLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeCyclicLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeCyclicLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (TEntryList*) G__int(libp->para[2]), (const Long64_t) G__Longlong(libp->para[3])
, (const Long64_t) G__Longlong(libp->para[4]));
     } else {
       p = new((void*) gvp) TSnAltTreeCyclicLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (TEntryList*) G__int(libp->para[2]), (const Long64_t) G__Longlong(libp->para[3])
, (const Long64_t) G__Longlong(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeCyclicLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (TEntryList*) G__int(libp->para[2]), (const Long64_t) G__Longlong(libp->para[3]));
     } else {
       p = new((void*) gvp) TSnAltTreeCyclicLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (TEntryList*) G__int(libp->para[2]), (const Long64_t) G__Longlong(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeCyclicLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (TEntryList*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnAltTreeCyclicLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (TEntryList*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeCyclicLoader((const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnAltTreeCyclicLoader((const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeCyclicLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const TSnAltTreeCyclicLoader*) G__getstructoffset())->GetBeginEntry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const TSnAltTreeCyclicLoader*) G__getstructoffset())->GetNumAltEntriesToUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnAltTreeCyclicLoader*) G__getstructoffset())->SetBeginEntry((const Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnAltTreeCyclicLoader*) G__getstructoffset())->SetNumAltEntriesToUse((const Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnAltTreeCyclicLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeCyclicLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnAltTreeCyclicLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnAltTreeCyclicLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnAltTreeCyclicLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeCyclicLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnAltTreeCyclicLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeCyclicLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_508_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnAltTreeCyclicLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_508_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnAltTreeCyclicLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnAltTreeCyclicLoader(*(TSnAltTreeCyclicLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeCyclicLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnAltTreeCyclicLoader G__TTSnAltTreeCyclicLoader;
static int G__G__loaders_508_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnAltTreeCyclicLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnAltTreeCyclicLoader*) (soff+(sizeof(TSnAltTreeCyclicLoader)*i)))->~G__TTSnAltTreeCyclicLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnAltTreeCyclicLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnAltTreeCyclicLoader*) (soff))->~G__TTSnAltTreeCyclicLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__loaders_508_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeCyclicLoader* dest = (TSnAltTreeCyclicLoader*) G__getstructoffset();
   *dest = *(TSnAltTreeCyclicLoader*) libp->para[0].ref;
   const TSnAltTreeCyclicLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnAltTreeShuffleLoader */
static int G__G__loaders_509_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeShuffleLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeShuffleLoader[n];
     } else {
       p = new((void*) gvp) TSnAltTreeShuffleLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeShuffleLoader;
     } else {
       p = new((void*) gvp) TSnAltTreeShuffleLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_509_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeShuffleLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeShuffleLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (TEntryList*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnAltTreeShuffleLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (TEntryList*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeShuffleLoader((const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnAltTreeShuffleLoader((const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_509_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<unsigned int,allocator<unsigned int> >& obj = ((const TSnAltTreeShuffleLoader*) G__getstructoffset())->GetAvailEntryList();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_509_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnAltTreeShuffleLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_509_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeShuffleLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_509_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnAltTreeShuffleLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_509_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnAltTreeShuffleLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_509_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnAltTreeShuffleLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_509_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeShuffleLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_509_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnAltTreeShuffleLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_509_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeShuffleLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_509_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnAltTreeShuffleLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_509_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnAltTreeShuffleLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnAltTreeShuffleLoader(*(TSnAltTreeShuffleLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnAltTreeShuffleLoader G__TTSnAltTreeShuffleLoader;
static int G__G__loaders_509_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnAltTreeShuffleLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnAltTreeShuffleLoader*) (soff+(sizeof(TSnAltTreeShuffleLoader)*i)))->~G__TTSnAltTreeShuffleLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnAltTreeShuffleLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnAltTreeShuffleLoader*) (soff))->~G__TTSnAltTreeShuffleLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__loaders_509_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeShuffleLoader* dest = (TSnAltTreeShuffleLoader*) G__getstructoffset();
   *dest = *(TSnAltTreeShuffleLoader*) libp->para[0].ref;
   const TSnAltTreeShuffleLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnAltTreeSingleEntryLoader */
static int G__G__loaders_510_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeSingleEntryLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeSingleEntryLoader[n];
     } else {
       p = new((void*) gvp) TSnAltTreeSingleEntryLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeSingleEntryLoader;
     } else {
       p = new((void*) gvp) TSnAltTreeSingleEntryLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeSingleEntryLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_510_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeSingleEntryLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeSingleEntryLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (const Long64_t) G__Longlong(libp->para[2]), (TEntryList*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TSnAltTreeSingleEntryLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (const Long64_t) G__Longlong(libp->para[2]), (TEntryList*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnAltTreeSingleEntryLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (const Long64_t) G__Longlong(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnAltTreeSingleEntryLoader(
(const Char_t*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (const Long64_t) G__Longlong(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeSingleEntryLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_510_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const TSnAltTreeSingleEntryLoader*) G__getstructoffset())->GetAltTreeEntryNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_510_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnAltTreeSingleEntryLoader*) G__getstructoffset())->SetAltTreeEntryNum((const Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_510_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnAltTreeSingleEntryLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_510_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeSingleEntryLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_510_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnAltTreeSingleEntryLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_510_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnAltTreeSingleEntryLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_510_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnAltTreeSingleEntryLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_510_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeSingleEntryLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_510_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnAltTreeSingleEntryLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_510_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnAltTreeSingleEntryLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_510_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnAltTreeSingleEntryLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_510_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnAltTreeSingleEntryLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnAltTreeSingleEntryLoader(*(TSnAltTreeSingleEntryLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeSingleEntryLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnAltTreeSingleEntryLoader G__TTSnAltTreeSingleEntryLoader;
static int G__G__loaders_510_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnAltTreeSingleEntryLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnAltTreeSingleEntryLoader*) (soff+(sizeof(TSnAltTreeSingleEntryLoader)*i)))->~G__TTSnAltTreeSingleEntryLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnAltTreeSingleEntryLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnAltTreeSingleEntryLoader*) (soff))->~G__TTSnAltTreeSingleEntryLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__loaders_510_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnAltTreeSingleEntryLoader* dest = (TSnAltTreeSingleEntryLoader*) G__getstructoffset();
   *dest = *(TSnAltTreeSingleEntryLoader*) libp->para[0].ref;
   const TSnAltTreeSingleEntryLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnLoadFromFileMod */
static int G__G__loaders_533_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnLoadFromFileMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnLoadFromFileMod[n];
     } else {
       p = new((void*) gvp) TSnLoadFromFileMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnLoadFromFileMod;
     } else {
       p = new((void*) gvp) TSnLoadFromFileMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnLoadFromFileMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnLoadFromFileMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TSnLoadFromFileMod(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnLoadFromFileMod*) G__getstructoffset())->GetFilename());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnLoadFromFileMod*) G__getstructoffset())->GetObjName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnLoadFromFileMod*) G__getstructoffset())->SetFilename((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnLoadFromFileMod*) G__getstructoffset())->SetObjName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnLoadFromFileMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnLoadFromFileMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnLoadFromFileMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnLoadFromFileMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnLoadFromFileMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnLoadFromFileMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnLoadFromFileMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnLoadFromFileMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_533_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnLoadFromFileMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_533_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnLoadFromFileMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnLoadFromFileMod(*(TSnLoadFromFileMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnLoadFromFileMod G__TTSnLoadFromFileMod;
static int G__G__loaders_533_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnLoadFromFileMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnLoadFromFileMod*) (soff+(sizeof(TSnLoadFromFileMod)*i)))->~G__TTSnLoadFromFileMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnLoadFromFileMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnLoadFromFileMod*) (soff))->~G__TTSnLoadFromFileMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__loaders_533_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnLoadFromFileMod* dest = (TSnLoadFromFileMod*) G__getstructoffset();
   *dest = *(TSnLoadFromFileMod*) libp->para[0].ref;
   const TSnLoadFromFileMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnWindTreeLoader */
static int G__G__loaders_534_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnWindTreeLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnWindTreeLoader[n];
     } else {
       p = new((void*) gvp) TSnWindTreeLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnWindTreeLoader;
     } else {
       p = new((void*) gvp) TSnWindTreeLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnWindTreeLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnWindTreeLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnWindTreeLoader(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const TSnTimeLinkBranchLoader::EMethod_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TSnWindTreeLoader(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const TSnTimeLinkBranchLoader::EMethod_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnWindTreeLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnWindTreeLoader*) G__getstructoffset())->GetTreeName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSnWindTreeLoader*) G__getstructoffset())->GetBrName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnWindTreeLoader*) G__getstructoffset())->SetTreeName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnWindTreeLoader*) G__getstructoffset())->SetBrName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnWindTreeLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnWindTreeLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnWindTreeLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnWindTreeLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnWindTreeLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnWindTreeLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnWindTreeLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnWindTreeLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_534_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnWindTreeLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_534_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnWindTreeLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnWindTreeLoader(*(TSnWindTreeLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnWindTreeLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnWindTreeLoader G__TTSnWindTreeLoader;
static int G__G__loaders_534_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnWindTreeLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnWindTreeLoader*) (soff+(sizeof(TSnWindTreeLoader)*i)))->~G__TTSnWindTreeLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnWindTreeLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnWindTreeLoader*) (soff))->~G__TTSnWindTreeLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__loaders_534_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnWindTreeLoader* dest = (TSnWindTreeLoader*) G__getstructoffset();
   *dest = *(TSnWindTreeLoader*) libp->para[0].ref;
   const TSnWindTreeLoader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnWindBranchLoader */
static int G__G__loaders_536_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnWindBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnWindBranchLoader[n];
     } else {
       p = new((void*) gvp) TSnWindBranchLoader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnWindBranchLoader;
     } else {
       p = new((void*) gvp) TSnWindBranchLoader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_536_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnWindBranchLoader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnWindBranchLoader(
(TAMBranchInfo*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const TSnTimeLinkBranchLoader::EMethod_t) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) TSnWindBranchLoader(
(TAMBranchInfo*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (const TSnTimeLinkBranchLoader::EMethod_t) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_536_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnWindBranchLoader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_536_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnWindBranchLoader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_536_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnWindBranchLoader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_536_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnWindBranchLoader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_536_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnWindBranchLoader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_536_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnWindBranchLoader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_536_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnWindBranchLoader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_536_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnWindBranchLoader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__loaders_536_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnWindBranchLoader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__loaders_536_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnWindBranchLoader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnWindBranchLoader(*(TSnWindBranchLoader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnWindBranchLoader G__TTSnWindBranchLoader;
static int G__G__loaders_536_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnWindBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnWindBranchLoader*) (soff+(sizeof(TSnWindBranchLoader)*i)))->~G__TTSnWindBranchLoader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnWindBranchLoader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnWindBranchLoader*) (soff))->~G__TTSnWindBranchLoader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TSnLinkedTreeBranchLoader */

/* TSnMetadataLinkBranchLoader */

/* TSnTimeLinkBranchLoader */

/* TSnConfigTreeLoader */

/* TSnVoltageTreeLoader */

/* TSnHeartbeatTreeLoader */

/* TSnVoltageBranchLoader */

/* TSnHeartbeatBranchLoader */

/* TSnAltTreeLoader */

/* TSnAltTreeBranchLoader */

/* TSnAltTreeRandomLoader */

/* TSnAltTreeCyclicLoader */

/* TSnAltTreeShuffleLoader */

/* TSnAltTreeSingleEntryLoader */

/* TSnLoadFromFileMod */

/* TSnWindTreeLoader */

/* TSnWindBranchLoader */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__loaders {
 public:
  G__Sizep2memfuncG__loaders(): p(&G__Sizep2memfuncG__loaders::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__loaders::*p)();
};

size_t G__get_sizep2memfuncG__loaders()
{
  G__Sizep2memfuncG__loaders a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__loaders() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnLinkedTreeBranchLoader))) {
     TSnLinkedTreeBranchLoader *G__Lderived;
     G__Lderived=(TSnLinkedTreeBranchLoader*)0x1000;
     {
       TAMTreeBranchLoader *G__Lpbase=(TAMTreeBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnLinkedTreeBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMTreeBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAMVirtualBranchLoader *G__Lpbase=(TAMVirtualBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnLinkedTreeBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnLinkedTreeBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnMetadataLinkBranchLoader))) {
     TSnMetadataLinkBranchLoader *G__Lderived;
     G__Lderived=(TSnMetadataLinkBranchLoader*)0x1000;
     {
       TSnLinkedTreeBranchLoader *G__Lpbase=(TSnLinkedTreeBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnMetadataLinkBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TSnLinkedTreeBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAMTreeBranchLoader *G__Lpbase=(TAMTreeBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnMetadataLinkBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMTreeBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAMVirtualBranchLoader *G__Lpbase=(TAMVirtualBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnMetadataLinkBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnMetadataLinkBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoader))) {
     TSnTimeLinkBranchLoader *G__Lderived;
     G__Lderived=(TSnTimeLinkBranchLoader*)0x1000;
     {
       TSnLinkedTreeBranchLoader *G__Lpbase=(TSnLinkedTreeBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TSnLinkedTreeBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAMTreeBranchLoader *G__Lpbase=(TAMTreeBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMTreeBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAMVirtualBranchLoader *G__Lpbase=(TAMVirtualBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnConfigTreeLoader))) {
     TSnConfigTreeLoader *G__Lderived;
     G__Lderived=(TSnConfigTreeLoader*)0x1000;
     {
       TAMVirtualLoader *G__Lpbase=(TAMVirtualLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnConfigTreeLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnConfigTreeLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageTreeLoader))) {
     TSnVoltageTreeLoader *G__Lderived;
     G__Lderived=(TSnVoltageTreeLoader*)0x1000;
     {
       TAMVirtualLoader *G__Lpbase=(TAMVirtualLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageTreeLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageTreeLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatTreeLoader))) {
     TSnHeartbeatTreeLoader *G__Lderived;
     G__Lderived=(TSnHeartbeatTreeLoader*)0x1000;
     {
       TAMVirtualLoader *G__Lpbase=(TAMVirtualLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatTreeLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatTreeLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader))) {
     TSnVoltageBranchLoader *G__Lderived;
     G__Lderived=(TSnVoltageBranchLoader*)0x1000;
     {
       TSnTimeLinkBranchLoader *G__Lpbase=(TSnTimeLinkBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSnLinkedTreeBranchLoader *G__Lpbase=(TSnLinkedTreeBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TSnLinkedTreeBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAMTreeBranchLoader *G__Lpbase=(TAMTreeBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMTreeBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAMVirtualBranchLoader *G__Lpbase=(TAMVirtualBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader))) {
     TSnHeartbeatBranchLoader *G__Lderived;
     G__Lderived=(TSnHeartbeatBranchLoader*)0x1000;
     {
       TSnTimeLinkBranchLoader *G__Lpbase=(TSnTimeLinkBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSnLinkedTreeBranchLoader *G__Lpbase=(TSnLinkedTreeBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TSnLinkedTreeBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAMTreeBranchLoader *G__Lpbase=(TAMTreeBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMTreeBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAMVirtualBranchLoader *G__Lpbase=(TAMVirtualBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeLoader))) {
     TSnAltTreeLoader *G__Lderived;
     G__Lderived=(TSnAltTreeLoader*)0x1000;
     {
       TAMVirtualLoader *G__Lpbase=(TAMVirtualLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeBranchLoader))) {
     TSnAltTreeBranchLoader *G__Lderived;
     G__Lderived=(TSnAltTreeBranchLoader*)0x1000;
     {
       TAMTreeBranchLoader *G__Lpbase=(TAMTreeBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMTreeBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAMVirtualBranchLoader *G__Lpbase=(TAMVirtualBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeRandomLoader))) {
     TSnAltTreeRandomLoader *G__Lderived;
     G__Lderived=(TSnAltTreeRandomLoader*)0x1000;
     {
       TSnAltTreeLoader *G__Lpbase=(TSnAltTreeLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeRandomLoader),G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAMVirtualLoader *G__Lpbase=(TAMVirtualLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeRandomLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeRandomLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeCyclicLoader))) {
     TSnAltTreeCyclicLoader *G__Lderived;
     G__Lderived=(TSnAltTreeCyclicLoader*)0x1000;
     {
       TSnAltTreeLoader *G__Lpbase=(TSnAltTreeLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeCyclicLoader),G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAMVirtualLoader *G__Lpbase=(TAMVirtualLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeCyclicLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeCyclicLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader))) {
     TSnAltTreeShuffleLoader *G__Lderived;
     G__Lderived=(TSnAltTreeShuffleLoader*)0x1000;
     {
       TSnAltTreeLoader *G__Lpbase=(TSnAltTreeLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader),G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAMVirtualLoader *G__Lpbase=(TAMVirtualLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeSingleEntryLoader))) {
     TSnAltTreeSingleEntryLoader *G__Lderived;
     G__Lderived=(TSnAltTreeSingleEntryLoader*)0x1000;
     {
       TSnAltTreeLoader *G__Lpbase=(TSnAltTreeLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeSingleEntryLoader),G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAMVirtualLoader *G__Lpbase=(TAMVirtualLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeSingleEntryLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeSingleEntryLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod))) {
     TSnLoadFromFileMod *G__Lderived;
     G__Lderived=(TSnLoadFromFileMod*)0x1000;
     {
       TAModule *G__Lpbase=(TAModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod),G__get_linked_tagnum(&G__G__loadersLN_TAModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod),G__get_linked_tagnum(&G__G__loadersLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod),G__get_linked_tagnum(&G__G__loadersLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnWindTreeLoader))) {
     TSnWindTreeLoader *G__Lderived;
     G__Lderived=(TSnWindTreeLoader*)0x1000;
     {
       TAMVirtualLoader *G__Lpbase=(TAMVirtualLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnWindTreeLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnWindTreeLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader))) {
     TSnWindBranchLoader *G__Lderived;
     G__Lderived=(TSnWindBranchLoader*)0x1000;
     {
       TSnTimeLinkBranchLoader *G__Lpbase=(TSnTimeLinkBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSnLinkedTreeBranchLoader *G__Lpbase=(TSnLinkedTreeBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TSnLinkedTreeBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAMTreeBranchLoader *G__Lpbase=(TAMTreeBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMTreeBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAMVirtualBranchLoader *G__Lpbase=(TAMVirtualBranchLoader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualBranchLoader),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader),G__get_linked_tagnum(&G__G__loadersLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__loaders() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__loadersLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__loadersLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__loadersLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__loadersLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__loadersLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__loadersLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__loadersLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__loadersLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__loadersLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__loadersLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__loadersLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__loadersLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__loadersLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__loadersLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__loadersLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__G__loadersLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__loadersLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__loadersLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__G__loadersLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<BranchPtr_t*>",117,G__get_linked_tagnum(&G__G__loadersLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__loadersLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__loadersLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__loadersLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__loadersLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TAMBranchInfo::BranchPtr_t*>",117,G__get_linked_tagnum(&G__G__loadersLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Entry_t",104,-1,0,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Entry_t>",117,G__get_linked_tagnum(&G__G__loadersLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TIterator*>",117,G__get_linked_tagnum(&G__G__loadersLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__loadersLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__loadersLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__loadersLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__loadersLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TSnLinkedTreeBranchLoader */
static void G__setup_memvarTSnLinkedTreeBranchLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnLinkedTreeBranchLoader));
   { TSnLinkedTreeBranchLoader *p; p=(TSnLinkedTreeBranchLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TBranch),-1,-1,4,"fMainBr=",0,"! the main branch with linking data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TTree),-1,-1,4,"fMyTree=",0,"! the linked tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TBranch),-1,-1,4,"fMyBr=",0,"! the linking branch in the linked tree");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__loadersLN_TString),-1,-1,4,"fLinkedTreeName=",0,"name of the linked tree with the desired data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnMetadataLinkBranchLoader */
static void G__setup_memvarTSnMetadataLinkBranchLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnMetadataLinkBranchLoader));
   { TSnMetadataLinkBranchLoader *p; p=(TSnMetadataLinkBranchLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TSnEventMetadata),-1,-1,4,"fMeta=",0,"! the meta data in the main tree to match");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TSnEventMetadata),-1,-1,4,"fMyMeta=",0,"! the meta data my tree to match");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnTimeLinkBranchLoader */
static void G__setup_memvarTSnTimeLinkBranchLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoader));
   { TSnTimeLinkBranchLoader *p; p=(TSnTimeLinkBranchLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoadercLcLEMethod_t),-1,-2,1,G__FastAllocString(4096).Format("kPriorClosest=%lldLL",(long long)TSnTimeLinkBranchLoader::kPriorClosest).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoadercLcLEMethod_t),-1,-2,1,G__FastAllocString(4096).Format("kAbsoluteClosest=%lldLL",(long long)TSnTimeLinkBranchLoader::kAbsoluteClosest).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__loadersLN_TString),-1,-1,4,"fMyBrNm=",0,"the time branch in the linked tree");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__loadersLN_TString),-1,-1,4,"fMainBrNm=",0,"the time branch in the main tree");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoadercLcLEMethod_t),-1,-1,4,"fMeth=",0,"the method used to match times (default: kAbsoluteClosest)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TTimeStamp),-1,-1,4,"fMainCache=",0,"! the previously used main timestamp ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnConfigTreeLoader */
static void G__setup_memvarTSnConfigTreeLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnConfigTreeLoader));
   { TSnConfigTreeLoader *p; p=(TSnConfigTreeLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnVoltageTreeLoader */
static void G__setup_memvarTSnVoltageTreeLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageTreeLoader));
   { TSnVoltageTreeLoader *p; p=(TSnVoltageTreeLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoadercLcLEMethod_t),-1,-1,4,"fMeth=",0,"the time linking method (default: absolute closest in time)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnHeartbeatTreeLoader */
static void G__setup_memvarTSnHeartbeatTreeLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatTreeLoader));
   { TSnHeartbeatTreeLoader *p; p=(TSnHeartbeatTreeLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoadercLcLEMethod_t),-1,-1,4,"fMeth=",0,"the time linking method (default: absolute closest in time)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnVoltageBranchLoader */
static void G__setup_memvarTSnVoltageBranchLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader));
   { TSnVoltageBranchLoader *p; p=(TSnVoltageBranchLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TSnPowerReading),-1,-1,4,"fPwr=",0,"! my power reading");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TSnEventHeader),-1,-1,4,"fHdr=",0,"! main event header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnHeartbeatBranchLoader */
static void G__setup_memvarTSnHeartbeatBranchLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader));
   { TSnHeartbeatBranchLoader *p; p=(TSnHeartbeatBranchLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeat),-1,-1,4,"fHtbt=",0,"! my heartbeat");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TSnEventHeader),-1,-1,4,"fHdr=",0,"! main event header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnAltTreeLoader */
static void G__setup_memvarTSnAltTreeLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeLoader));
   { TSnAltTreeLoader *p; p=(TSnAltTreeLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__loadersLN_TString),-1,-1,4,"fAltTreeTag=",0,"tag prefix for branches that should be loaded via this loader");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TTree),-1,-1,4,"fAltTree=",0,"the alternate tree to load from");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TEntryList),-1,-1,4,"fEntryList=",0,"an entry list (to apply event selection to alternate tree). not owned. (default: 0 - no selection)");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fAltEntries=",0,"cache the num entries in alt tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnAltTreeBranchLoader */
static void G__setup_memvarTSnAltTreeBranchLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeBranchLoader));
   { TSnAltTreeBranchLoader *p; p=(TSnAltTreeBranchLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeLoader),-1,-1,4,"fAltLoader=",0,"the alt tree loader");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnAltTreeRandomLoader */
static void G__setup_memvarTSnAltTreeRandomLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeRandomLoader));
   { TSnAltTreeRandomLoader *p; p=(TSnAltTreeRandomLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fSeed=",0,"the random number seed to start from");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TRandom3),-1,-1,4,"fRand=",0,"random number generator. owned.");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fCurEntry=",0,"cache of the current entry");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fRndEntry=",0,"cache of the current random entry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnAltTreeCyclicLoader */
static void G__setup_memvarTSnAltTreeCyclicLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeCyclicLoader));
   { TSnAltTreeCyclicLoader *p; p=(TSnAltTreeCyclicLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fFirst=",0,"the first alt tree entry to try to load (default: 0)");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fNumAlt=",0,"number of events to use from the alternate tree (i.e. use events fFirst to (fFirst+fNumAlt-1) ) (default: number of events in alternate tree)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnAltTreeShuffleLoader */
static void G__setup_memvarTSnAltTreeShuffleLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader));
   { TSnAltTreeShuffleLoader *p; p=(TSnAltTreeShuffleLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,110,0,1,-1,G__defined_typename("Long64_t"),-2,1,G__FastAllocString(4096).Format("kMaxEntries=%lldLL",(long long)TSnAltTreeShuffleLoader::kMaxEntries).data(),0,"max number of entries possible");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__loadersLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),-1,-1,4,"fEntList=",0,"list of possible entries");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fMakeList=",0,"whether the list needs to be made");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fCurEntry=",0,"cache the current entry");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fShfEntry=",0,"cache the shuffled entry in case it needs to be sent to more than one branch");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnAltTreeSingleEntryLoader */
static void G__setup_memvarTSnAltTreeSingleEntryLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeSingleEntryLoader));
   { TSnAltTreeSingleEntryLoader *p; p=(TSnAltTreeSingleEntryLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fAltEntry=",0,"the entry to load from the alternate tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnLoadFromFileMod */
static void G__setup_memvarTSnLoadFromFileMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod));
   { TSnLoadFromFileMod *p; p=(TSnLoadFromFileMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__loadersLN_TString),-1,-1,4,"fFilen=",0,"name of file with the object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__loadersLN_TString),-1,-1,4,"fObjnm=",0,"name of the object in the file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnWindTreeLoader */
static void G__setup_memvarTSnWindTreeLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnWindTreeLoader));
   { TSnWindTreeLoader *p; p=(TSnWindTreeLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoadercLcLEMethod_t),-1,-1,4,"fMeth=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__loadersLN_TString),-1,-1,4,"fTName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__loadersLN_TString),-1,-1,4,"fBrName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnWindBranchLoader */
static void G__setup_memvarTSnWindBranchLoader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader));
   { TSnWindBranchLoader *p; p=(TSnWindBranchLoader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TSnWindData),-1,-1,4,"fWnd=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TSnEventHeader),-1,-1,4,"fHdr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__loadersLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__loaders() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTSnLinkedTreeBranchLoader(void) {
   /* TSnLinkedTreeBranchLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnLinkedTreeBranchLoader));
   G__memfunc_setup("LoadEntryInBranch",1687,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"U 'TBranch' - 0 - br n - 'Long64_t' 10 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadEntryInMain",1486,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "n - 'Long64_t' 10 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadMyEntry",1112,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "n - 'Long64_t' 10 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadRequestedEntry",1860,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "n - 'Long64_t' 10 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMainBranch",1267,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__loadersLN_TBranch), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMainBranch",1267,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__loadersLN_TBranch), -1, 0, 0, 1, 2, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMyTree",886,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__loadersLN_TTree), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMyTree",886,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__loadersLN_TTree), -1, 0, 0, 1, 2, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMyBranch",1076,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__loadersLN_TBranch), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMyBranch",1076,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__loadersLN_TBranch), -1, 0, 0, 1, 2, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadMyTree",982,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__loadersLN_TTree), -1, 0, 1, 1, 2, 0, "U 'TTree' - 0 - mainTree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMyBranchName",1461,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__loadersLN_TString), -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("LoadMyBranch",1172,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__loadersLN_TBranch), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMainBranchName",1652,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__loadersLN_TString), -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("LoadBranchInMain",1546,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__loadersLN_TBranch), -1, 0, 1, 1, 2, 0, "U 'TTree' - 0 - mainTree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntry",818,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - mainEntry", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TTree' - 0 - mainTree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__loaders_484_0_20, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnLinkedTreeBranchLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_484_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnLinkedTreeBranchLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_484_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnLinkedTreeBranchLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_484_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnLinkedTreeBranchLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_484_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_484_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnLinkedTreeBranchLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_484_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnLinkedTreeBranchLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_484_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnLinkedTreeBranchLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_484_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnLinkedTreeBranchLoader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnLinkedTreeBranchLoader", 2591, G__G__loaders_484_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnMetadataLinkBranchLoader(void) {
   /* TSnMetadataLinkBranchLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnMetadataLinkBranchLoader));
   G__memfunc_setup("TSnMetadataLinkBranchLoader",2665,G__G__loaders_486_0_1, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnMetadataLinkBranchLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnMetadataLinkBranchLoader",2665,G__G__loaders_486_0_2, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnMetadataLinkBranchLoader), -1, 0, 2, 1, 1, 0, 
"U 'TAMBranchInfo' - 0 - binfo C - 'Char_t' 10 - linkedTreeName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMyBranchName",1461,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__loadersLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMainBranchName",1652,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__loadersLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntry",818,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - mainEntry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TTree' - 0 - mainTree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__loaders_486_0_7, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnMetadataLinkBranchLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_486_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnMetadataLinkBranchLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_486_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnMetadataLinkBranchLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_486_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnMetadataLinkBranchLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_486_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_486_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnMetadataLinkBranchLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_486_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnMetadataLinkBranchLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_486_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnMetadataLinkBranchLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_486_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnMetadataLinkBranchLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnMetadataLinkBranchLoader", 2665, G__G__loaders_486_0_19, (int) ('i'), 
G__get_linked_tagnum(&G__G__loadersLN_TSnMetadataLinkBranchLoader), -1, 0, 1, 1, 1, 0, "u 'TSnMetadataLinkBranchLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnMetadataLinkBranchLoader", 2791, G__G__loaders_486_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnTimeLinkBranchLoader(void) {
   /* TSnTimeLinkBranchLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoader));
   G__memfunc_setup("GetMyBranchName",1461,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__loadersLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMainBranchName",1652,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__loadersLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMyTime",885,G__G__loaders_488_0_5, 85, G__get_linked_tagnum(&G__G__loadersLN_TTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMainTime",1076,G__G__loaders_488_0_6, 85, G__get_linked_tagnum(&G__G__loadersLN_TTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetPointerToMyLinkData",2206,G__G__loaders_488_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetPointerToMainLinkData",2397,G__G__loaders_488_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BuildIndexOn",1189,G__G__loaders_488_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TTree' - 0 - mytree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMethod",897,G__G__loaders_488_0_10, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnTimeLinkBranchLoadercLcLEMethod_t), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMethod",909,G__G__loaders_488_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i 'TSnTimeLinkBranchLoader::EMethod_t' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntry",818,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - mainEntry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TTree' - 0 - mainTree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__loaders_488_0_14, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnTimeLinkBranchLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_488_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnTimeLinkBranchLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_488_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnTimeLinkBranchLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_488_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnTimeLinkBranchLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_488_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_488_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnTimeLinkBranchLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_488_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnTimeLinkBranchLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_488_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnTimeLinkBranchLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_488_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnTimeLinkBranchLoader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnTimeLinkBranchLoader", 2389, G__G__loaders_488_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnConfigTreeLoader(void) {
   /* TSnConfigTreeLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnConfigTreeLoader));
   G__memfunc_setup("TSnConfigTreeLoader",1874,G__G__loaders_491_0_1, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnConfigTreeLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateBranchLoader",1785,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualBranchLoader), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree U 'TAMBranchInfo' - 0 - brInfo", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__loaders_491_0_3, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnConfigTreeLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_491_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnConfigTreeLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_491_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnConfigTreeLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_491_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnConfigTreeLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_491_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_491_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnConfigTreeLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_491_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnConfigTreeLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_491_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnConfigTreeLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_491_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnConfigTreeLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnConfigTreeLoader", 1874, G__G__loaders_491_0_15, (int) ('i'), G__get_linked_tagnum(&G__G__loadersLN_TSnConfigTreeLoader), -1, 0, 1, 1, 1, 0, "u 'TSnConfigTreeLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnConfigTreeLoader", 2000, G__G__loaders_491_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__loaders_491_0_17, (int) ('u'), G__get_linked_tagnum(&G__G__loadersLN_TSnConfigTreeLoader), -1, 1, 1, 1, 1, 0, "u 'TSnConfigTreeLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnVoltageTreeLoader(void) {
   /* TSnVoltageTreeLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageTreeLoader));
   G__memfunc_setup("TSnVoltageTreeLoader",1998,G__G__loaders_492_0_1, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageTreeLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnVoltageTreeLoader",1998,G__G__loaders_492_0_2, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageTreeLoader), -1, 0, 1, 1, 1, 0, "i 'TSnTimeLinkBranchLoader::EMethod_t' - 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateBranchLoader",1785,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualBranchLoader), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree U 'TAMBranchInfo' - 0 - brInfo", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__loaders_492_0_4, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnVoltageTreeLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_492_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnVoltageTreeLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_492_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnVoltageTreeLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_492_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnVoltageTreeLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_492_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_492_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnVoltageTreeLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_492_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnVoltageTreeLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_492_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnVoltageTreeLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_492_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnVoltageTreeLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnVoltageTreeLoader", 1998, G__G__loaders_492_0_16, (int) ('i'), G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageTreeLoader), -1, 0, 1, 1, 1, 0, "u 'TSnVoltageTreeLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnVoltageTreeLoader", 2124, G__G__loaders_492_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__loaders_492_0_18, (int) ('u'), G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageTreeLoader), -1, 1, 1, 1, 1, 0, "u 'TSnVoltageTreeLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnHeartbeatTreeLoader(void) {
   /* TSnHeartbeatTreeLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatTreeLoader));
   G__memfunc_setup("TSnHeartbeatTreeLoader",2188,G__G__loaders_493_0_1, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatTreeLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnHeartbeatTreeLoader",2188,G__G__loaders_493_0_2, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatTreeLoader), -1, 0, 1, 1, 1, 0, "i 'TSnTimeLinkBranchLoader::EMethod_t' - 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateBranchLoader",1785,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualBranchLoader), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree U 'TAMBranchInfo' - 0 - brInfo", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__loaders_493_0_4, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnHeartbeatTreeLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_493_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnHeartbeatTreeLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_493_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnHeartbeatTreeLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_493_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnHeartbeatTreeLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_493_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_493_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnHeartbeatTreeLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_493_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnHeartbeatTreeLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_493_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnHeartbeatTreeLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_493_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnHeartbeatTreeLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnHeartbeatTreeLoader", 2188, G__G__loaders_493_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatTreeLoader), -1, 0, 1, 1, 1, 0, "u 'TSnHeartbeatTreeLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnHeartbeatTreeLoader", 2314, G__G__loaders_493_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__loaders_493_0_18, (int) ('u'), G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatTreeLoader), -1, 1, 1, 1, 1, 0, "u 'TSnHeartbeatTreeLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnVoltageBranchLoader(void) {
   /* TSnVoltageBranchLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader));
   G__memfunc_setup("TSnVoltageBranchLoader",2188,G__G__loaders_500_0_1, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnVoltageBranchLoader",2188,G__G__loaders_500_0_2, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader), -1, 0, 5, 1, 1, 0, 
"U 'TAMBranchInfo' - 0 - binfo C - 'Char_t' 10 - linkedTreeName "
"C - 'Char_t' 10 - linkedTimeBranchName C - 'Char_t' 10 - mainTimeBranchName "
"i 'TSnTimeLinkBranchLoader::EMethod_t' - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMyTime",885,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMainTime",1076,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPointerToMyLinkData",2206,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPointerToMainLinkData",2397,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__loaders_500_0_7, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnVoltageBranchLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_500_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnVoltageBranchLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_500_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnVoltageBranchLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_500_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnVoltageBranchLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_500_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_500_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnVoltageBranchLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_500_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnVoltageBranchLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_500_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnVoltageBranchLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_500_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnVoltageBranchLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnVoltageBranchLoader", 2188, G__G__loaders_500_0_19, (int) ('i'), 
G__get_linked_tagnum(&G__G__loadersLN_TSnVoltageBranchLoader), -1, 0, 1, 1, 1, 0, "u 'TSnVoltageBranchLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnVoltageBranchLoader", 2314, G__G__loaders_500_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnHeartbeatBranchLoader(void) {
   /* TSnHeartbeatBranchLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader));
   G__memfunc_setup("TSnHeartbeatBranchLoader",2378,G__G__loaders_502_0_1, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnHeartbeatBranchLoader",2378,G__G__loaders_502_0_2, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader), -1, 0, 5, 1, 1, 0, 
"U 'TAMBranchInfo' - 0 - binfo C - 'Char_t' 10 - linkedTreeName "
"C - 'Char_t' 10 - linkedTimeBranchName C - 'Char_t' 10 - mainTimeBranchName "
"i 'TSnTimeLinkBranchLoader::EMethod_t' - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMyTime",885,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMainTime",1076,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPointerToMyLinkData",2206,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPointerToMainLinkData",2397,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__loaders_502_0_7, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnHeartbeatBranchLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_502_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnHeartbeatBranchLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_502_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnHeartbeatBranchLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_502_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnHeartbeatBranchLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_502_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_502_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnHeartbeatBranchLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_502_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnHeartbeatBranchLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_502_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnHeartbeatBranchLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_502_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnHeartbeatBranchLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnHeartbeatBranchLoader", 2378, G__G__loaders_502_0_19, (int) ('i'), 
G__get_linked_tagnum(&G__G__loadersLN_TSnHeartbeatBranchLoader), -1, 0, 1, 1, 1, 0, "u 'TSnHeartbeatBranchLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnHeartbeatBranchLoader", 2504, G__G__loaders_502_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnAltTreeLoader(void) {
   /* TSnAltTreeLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeLoader));
   G__memfunc_setup("GetAltEntryFor",1402,G__G__loaders_504_0_3, 110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 10 - mainEntry", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetAltTreeTagStr",1574,G__G__loaders_504_0_4, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAltTreeTag",1261,G__G__loaders_504_0_5, 117, G__get_linked_tagnum(&G__G__loadersLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAltTree",977,G__G__loaders_504_0_6, 85, G__get_linked_tagnum(&G__G__loadersLN_TTree), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAltTree",977,G__G__loaders_504_0_7, 85, G__get_linked_tagnum(&G__G__loadersLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryList",1230,G__G__loaders_504_0_8, 85, G__get_linked_tagnum(&G__G__loadersLN_TEntryList), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryList",1230,G__G__loaders_504_0_9, 85, G__get_linked_tagnum(&G__G__loadersLN_TEntryList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAltTreeEntries",1707,G__G__loaders_504_0_10, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumAltEntriesSlow",2032,G__G__loaders_504_0_11, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAltTreeTag",1273,G__G__loaders_504_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAltTree",989,G__G__loaders_504_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEntryList",1242,G__G__loaders_504_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TEntryList' - 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryNumberFor",1730,G__G__loaders_504_0_15, 110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 10 - e", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateBranchLoader",1785,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualBranchLoader), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree U 'TAMBranchInfo' - 0 - brInfo", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__loaders_504_0_17, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnAltTreeLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_504_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_504_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnAltTreeLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_504_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnAltTreeLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_504_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_504_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_504_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnAltTreeLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_504_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_504_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnAltTreeLoader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnAltTreeLoader", 1691, G__G__loaders_504_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__loaders_504_0_30, (int) ('u'), G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeLoader), -1, 1, 1, 1, 1, 0, "u 'TSnAltTreeLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnAltTreeBranchLoader(void) {
   /* TSnAltTreeBranchLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeBranchLoader));
   G__memfunc_setup("TSnAltTreeBranchLoader",2155,G__G__loaders_505_0_1, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeBranchLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnAltTreeBranchLoader",2155,G__G__loaders_505_0_2, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeBranchLoader), -1, 0, 2, 1, 1, 0, 
"U 'TAMBranchInfo' - 0 - binfo U 'TSnAltTreeLoader' - 0 - ldr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntry",818,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - mainEntry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TTree' - 0 - mainTree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__loaders_505_0_5, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnAltTreeBranchLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_505_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeBranchLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_505_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnAltTreeBranchLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_505_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnAltTreeBranchLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_505_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_505_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeBranchLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_505_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnAltTreeBranchLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_505_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeBranchLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_505_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnAltTreeBranchLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnAltTreeBranchLoader", 2155, G__G__loaders_505_0_17, (int) ('i'), 
G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeBranchLoader), -1, 0, 1, 1, 1, 0, "u 'TSnAltTreeBranchLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnAltTreeBranchLoader", 2281, G__G__loaders_505_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnAltTreeRandomLoader(void) {
   /* TSnAltTreeRandomLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeRandomLoader));
   G__memfunc_setup("TSnAltTreeRandomLoader",2174,G__G__loaders_507_0_1, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeRandomLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnAltTreeRandomLoader",2174,G__G__loaders_507_0_2, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeRandomLoader), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 - altTreeTag U 'TTree' - 0 - altTree "
"h - 'UInt_t' 10 - seed U 'TEntryList' - 0 '0' el", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAltEntryFor",1402,(G__InterfaceMethod) NULL,110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 10 - mainEntry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRandSeed",1062,G__G__loaders_507_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRandSeed",1074,G__G__loaders_507_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__loaders_507_0_6, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnAltTreeRandomLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_507_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeRandomLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_507_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnAltTreeRandomLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_507_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnAltTreeRandomLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_507_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_507_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeRandomLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_507_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnAltTreeRandomLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_507_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeRandomLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_507_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnAltTreeRandomLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnAltTreeRandomLoader", 2174, G__G__loaders_507_0_18, (int) ('i'), 
G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeRandomLoader), -1, 0, 1, 1, 1, 0, "u 'TSnAltTreeRandomLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnAltTreeRandomLoader", 2300, G__G__loaders_507_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__loaders_507_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeRandomLoader), -1, 1, 1, 1, 1, 0, "u 'TSnAltTreeRandomLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnAltTreeCyclicLoader(void) {
   /* TSnAltTreeCyclicLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeCyclicLoader));
   G__memfunc_setup("TSnAltTreeCyclicLoader",2164,G__G__loaders_508_0_1, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeCyclicLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnAltTreeCyclicLoader",2164,G__G__loaders_508_0_2, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeCyclicLoader), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 - altTreeTag U 'TTree' - 0 - altTree "
"U 'TEntryList' - 0 '0' el n - 'Long64_t' 10 '0' first "
"n - 'Long64_t' 10 '-1' nalt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAltEntryFor",1402,(G__InterfaceMethod) NULL,110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 10 - mainEntry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBeginEntry",1303,G__G__loaders_508_0_4, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumAltEntriesToUse",2107,G__G__loaders_508_0_5, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeginEntry",1315,G__G__loaders_508_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumAltEntriesToUse",2119,G__G__loaders_508_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__loaders_508_0_8, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnAltTreeCyclicLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_508_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeCyclicLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_508_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnAltTreeCyclicLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_508_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnAltTreeCyclicLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_508_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_508_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeCyclicLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_508_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnAltTreeCyclicLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_508_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeCyclicLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_508_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnAltTreeCyclicLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnAltTreeCyclicLoader", 2164, G__G__loaders_508_0_20, (int) ('i'), 
G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeCyclicLoader), -1, 0, 1, 1, 1, 0, "u 'TSnAltTreeCyclicLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnAltTreeCyclicLoader", 2290, G__G__loaders_508_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__loaders_508_0_22, (int) ('u'), G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeCyclicLoader), -1, 1, 1, 1, 1, 0, "u 'TSnAltTreeCyclicLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnAltTreeShuffleLoader(void) {
   /* TSnAltTreeShuffleLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader));
   G__memfunc_setup("MakeList",794,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnAltTreeShuffleLoader",2282,G__G__loaders_509_0_2, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnAltTreeShuffleLoader",2282,G__G__loaders_509_0_3, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - altTreeTag U 'TTree' - 0 - altTree "
"U 'TEntryList' - 0 '0' el", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvailEntryList",1723,G__G__loaders_509_0_4, 117, G__get_linked_tagnum(&G__G__loadersLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAltEntryFor",1402,(G__InterfaceMethod) NULL,110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 10 - mainEntry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__loaders_509_0_6, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnAltTreeShuffleLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_509_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeShuffleLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_509_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnAltTreeShuffleLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_509_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnAltTreeShuffleLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_509_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_509_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeShuffleLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_509_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnAltTreeShuffleLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_509_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeShuffleLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_509_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnAltTreeShuffleLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnAltTreeShuffleLoader", 2282, G__G__loaders_509_0_18, (int) ('i'), 
G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader), -1, 0, 1, 1, 1, 0, "u 'TSnAltTreeShuffleLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnAltTreeShuffleLoader", 2408, G__G__loaders_509_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__loaders_509_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeShuffleLoader), -1, 1, 1, 1, 1, 0, "u 'TSnAltTreeShuffleLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnAltTreeSingleEntryLoader(void) {
   /* TSnAltTreeSingleEntryLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeSingleEntryLoader));
   G__memfunc_setup("TSnAltTreeSingleEntryLoader",2705,G__G__loaders_510_0_1, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeSingleEntryLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnAltTreeSingleEntryLoader",2705,G__G__loaders_510_0_2, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeSingleEntryLoader), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 - altTreeTag U 'TTree' - 0 - altTree "
"n - 'Long64_t' 10 - altEntry U 'TEntryList' - 0 '0' el", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAltEntryFor",1402,(G__InterfaceMethod) NULL,110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 10 - mainEntry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAltTreeEntryNum",1811,G__G__loaders_510_0_4, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAltTreeEntryNum",1823,G__G__loaders_510_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__loaders_510_0_6, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnAltTreeSingleEntryLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_510_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeSingleEntryLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_510_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnAltTreeSingleEntryLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_510_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnAltTreeSingleEntryLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_510_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_510_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeSingleEntryLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_510_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnAltTreeSingleEntryLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_510_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnAltTreeSingleEntryLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_510_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnAltTreeSingleEntryLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnAltTreeSingleEntryLoader", 2705, G__G__loaders_510_0_18, (int) ('i'), 
G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeSingleEntryLoader), -1, 0, 1, 1, 1, 0, "u 'TSnAltTreeSingleEntryLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnAltTreeSingleEntryLoader", 2831, G__G__loaders_510_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__loaders_510_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__loadersLN_TSnAltTreeSingleEntryLoader), -1, 1, 1, 1, 1, 0, "u 'TSnAltTreeSingleEntryLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnLoadFromFileMod(void) {
   /* TSnLoadFromFileMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod));
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnLoadFromFileMod",1737,G__G__loaders_533_0_3, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnLoadFromFileMod",1737,G__G__loaders_533_0_4, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - filename "
"C - 'Char_t' 10 - objnm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFilename",1089,G__G__loaders_533_0_5, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjName",956,G__G__loaders_533_0_6, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFilename",1101,G__G__loaders_533_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetObjName",968,G__G__loaders_533_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__loaders_533_0_9, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnLoadFromFileMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_533_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnLoadFromFileMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_533_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnLoadFromFileMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_533_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnLoadFromFileMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_533_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_533_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnLoadFromFileMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_533_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnLoadFromFileMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_533_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnLoadFromFileMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_533_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnLoadFromFileMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnLoadFromFileMod", 1737, G__G__loaders_533_0_21, (int) ('i'), G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod), -1, 0, 1, 1, 1, 0, "u 'TSnLoadFromFileMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnLoadFromFileMod", 1863, G__G__loaders_533_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__loaders_533_0_23, (int) ('u'), G__get_linked_tagnum(&G__G__loadersLN_TSnLoadFromFileMod), -1, 1, 1, 1, 1, 0, "u 'TSnLoadFromFileMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnWindTreeLoader(void) {
   /* TSnWindTreeLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnWindTreeLoader));
   G__memfunc_setup("TSnWindTreeLoader",1678,G__G__loaders_534_0_1, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnWindTreeLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnWindTreeLoader",1678,G__G__loaders_534_0_2, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnWindTreeLoader), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - tree C - 'Char_t' 10 - br "
"i 'TSnTimeLinkBranchLoader::EMethod_t' - 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateBranchLoader",1785,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TAMVirtualBranchLoader), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree U 'TAMBranchInfo' - 0 - brInfo", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTreeName",1073,G__G__loaders_534_0_4, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBrName",853,G__G__loaders_534_0_5, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTreeName",1085,G__G__loaders_534_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBrName",865,G__G__loaders_534_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - br", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__loaders_534_0_8, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnWindTreeLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_534_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnWindTreeLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_534_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnWindTreeLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_534_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnWindTreeLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_534_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_534_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnWindTreeLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_534_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnWindTreeLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_534_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnWindTreeLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_534_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnWindTreeLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnWindTreeLoader", 1678, G__G__loaders_534_0_20, (int) ('i'), G__get_linked_tagnum(&G__G__loadersLN_TSnWindTreeLoader), -1, 0, 1, 1, 1, 0, "u 'TSnWindTreeLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnWindTreeLoader", 1804, G__G__loaders_534_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__loaders_534_0_22, (int) ('u'), G__get_linked_tagnum(&G__G__loadersLN_TSnWindTreeLoader), -1, 1, 1, 1, 1, 0, "u 'TSnWindTreeLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnWindBranchLoader(void) {
   /* TSnWindBranchLoader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader));
   G__memfunc_setup("TSnWindBranchLoader",1868,G__G__loaders_536_0_1, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnWindBranchLoader",1868,G__G__loaders_536_0_2, 105, G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader), -1, 0, 5, 1, 1, 0, 
"U 'TAMBranchInfo' - 0 - binfo C - 'Char_t' 10 - linkedTreeName "
"C - 'Char_t' 10 - linkedTimeBranchName C - 'Char_t' 10 - mainTimeBranchName "
"i 'TSnTimeLinkBranchLoader::EMethod_t' - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMyTime",885,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMainTime",1076,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TTimeStamp), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPointerToMyLinkData",2206,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPointerToMainLinkData",2397,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__loaders_536_0_7, 85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnWindBranchLoader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__loaders_536_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnWindBranchLoader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__loaders_536_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnWindBranchLoader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__loaders_536_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnWindBranchLoader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__loadersLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__loaders_536_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__loaders_536_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnWindBranchLoader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__loaders_536_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnWindBranchLoader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__loaders_536_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnWindBranchLoader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__loaders_536_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnWindBranchLoader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnWindBranchLoader", 1868, G__G__loaders_536_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__loadersLN_TSnWindBranchLoader), -1, 0, 1, 1, 1, 0, "u 'TSnWindBranchLoader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnWindBranchLoader", 1994, G__G__loaders_536_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__loaders() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__loaders() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__loaders() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__loadersLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__loadersLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TAMVirtualBranchLoader = { "TAMVirtualBranchLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TAMBranchInfo = { "TAMBranchInfo" , 115 , -1 };
G__linked_taginfo G__G__loadersLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR = { "vector<TAMBranchInfo::BranchPtr_t*,allocator<TAMBranchInfo::BranchPtr_t*> >" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TAMBranchInfo::BranchPtr_t*,allocator<TAMBranchInfo::BranchPtr_t*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TAMTreeBranchLoader = { "TAMTreeBranchLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnLinkedTreeBranchLoader = { "TSnLinkedTreeBranchLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnEventMetadata = { "TSnEventMetadata" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnMetadataLinkBranchLoader = { "TSnMetadataLinkBranchLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TTimeStamp = { "TTimeStamp" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnTimeLinkBranchLoader = { "TSnTimeLinkBranchLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnTimeLinkBranchLoadercLcLEMethod_t = { "TSnTimeLinkBranchLoader::EMethod_t" , 101 , -1 };
G__linked_taginfo G__G__loadersLN_TAMVirtualLoader = { "TAMVirtualLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnConfigTreeLoader = { "TSnConfigTreeLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnVoltageTreeLoader = { "TSnVoltageTreeLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnHeartbeatTreeLoader = { "TSnHeartbeatTreeLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnPowerReading = { "TSnPowerReading" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnEventHeader = { "TSnEventHeader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnVoltageBranchLoader = { "TSnVoltageBranchLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnHeartbeat = { "TSnHeartbeat" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnHeartbeatBranchLoader = { "TSnHeartbeatBranchLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TEntryList = { "TEntryList" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnAltTreeLoader = { "TSnAltTreeLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnAltTreeBranchLoader = { "TSnAltTreeBranchLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TRandom3 = { "TRandom3" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnAltTreeRandomLoader = { "TSnAltTreeRandomLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnAltTreeCyclicLoader = { "TSnAltTreeCyclicLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnAltTreeShuffleLoader = { "TSnAltTreeShuffleLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnAltTreeSingleEntryLoader = { "TSnAltTreeSingleEntryLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TTask = { "TTask" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TAModule = { "TAModule" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR = { "vector<TIterator*,allocator<TIterator*> >" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TIterator*,allocator<TIterator*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnLoadFromFileMod = { "TSnLoadFromFileMod" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnWindTreeLoader = { "TSnWindTreeLoader" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnWindData = { "TSnWindData" , 99 , -1 };
G__linked_taginfo G__G__loadersLN_TSnWindBranchLoader = { "TSnWindBranchLoader" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__loaders() {
  G__G__loadersLN_TClass.tagnum = -1 ;
  G__G__loadersLN_TBuffer.tagnum = -1 ;
  G__G__loadersLN_TMemberInspector.tagnum = -1 ;
  G__G__loadersLN_TObject.tagnum = -1 ;
  G__G__loadersLN_TNamed.tagnum = -1 ;
  G__G__loadersLN_TString.tagnum = -1 ;
  G__G__loadersLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__G__loadersLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__loadersLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__loadersLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__loadersLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__loadersLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__loadersLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__loadersLN_TTree.tagnum = -1 ;
  G__G__loadersLN_TBranch.tagnum = -1 ;
  G__G__loadersLN_TAMVirtualBranchLoader.tagnum = -1 ;
  G__G__loadersLN_TAMBranchInfo.tagnum = -1 ;
  G__G__loadersLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR.tagnum = -1 ;
  G__G__loadersLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__loadersLN_TAMTreeBranchLoader.tagnum = -1 ;
  G__G__loadersLN_TSnLinkedTreeBranchLoader.tagnum = -1 ;
  G__G__loadersLN_TSnEventMetadata.tagnum = -1 ;
  G__G__loadersLN_TSnMetadataLinkBranchLoader.tagnum = -1 ;
  G__G__loadersLN_TTimeStamp.tagnum = -1 ;
  G__G__loadersLN_TSnTimeLinkBranchLoader.tagnum = -1 ;
  G__G__loadersLN_TSnTimeLinkBranchLoadercLcLEMethod_t.tagnum = -1 ;
  G__G__loadersLN_TAMVirtualLoader.tagnum = -1 ;
  G__G__loadersLN_TSnConfigTreeLoader.tagnum = -1 ;
  G__G__loadersLN_TSnVoltageTreeLoader.tagnum = -1 ;
  G__G__loadersLN_TSnHeartbeatTreeLoader.tagnum = -1 ;
  G__G__loadersLN_TSnPowerReading.tagnum = -1 ;
  G__G__loadersLN_TSnEventHeader.tagnum = -1 ;
  G__G__loadersLN_TSnVoltageBranchLoader.tagnum = -1 ;
  G__G__loadersLN_TSnHeartbeat.tagnum = -1 ;
  G__G__loadersLN_TSnHeartbeatBranchLoader.tagnum = -1 ;
  G__G__loadersLN_TEntryList.tagnum = -1 ;
  G__G__loadersLN_TSnAltTreeLoader.tagnum = -1 ;
  G__G__loadersLN_TSnAltTreeBranchLoader.tagnum = -1 ;
  G__G__loadersLN_TRandom3.tagnum = -1 ;
  G__G__loadersLN_TSnAltTreeRandomLoader.tagnum = -1 ;
  G__G__loadersLN_TSnAltTreeCyclicLoader.tagnum = -1 ;
  G__G__loadersLN_TSnAltTreeShuffleLoader.tagnum = -1 ;
  G__G__loadersLN_TSnAltTreeSingleEntryLoader.tagnum = -1 ;
  G__G__loadersLN_TTask.tagnum = -1 ;
  G__G__loadersLN_TAModule.tagnum = -1 ;
  G__G__loadersLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR.tagnum = -1 ;
  G__G__loadersLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__loadersLN_TSnLoadFromFileMod.tagnum = -1 ;
  G__G__loadersLN_TSnWindTreeLoader.tagnum = -1 ;
  G__G__loadersLN_TSnWindData.tagnum = -1 ;
  G__G__loadersLN_TSnWindBranchLoader.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__loaders() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TString);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TTree);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TBranch);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TAMVirtualBranchLoader);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TAMBranchInfo);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_vectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_reverse_iteratorlEvectorlETAMBranchInfocLcLBranchPtr_tmUcOallocatorlETAMBranchInfocLcLBranchPtr_tmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TAMTreeBranchLoader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnLinkedTreeBranchLoader),sizeof(TSnLinkedTreeBranchLoader),-1,324867,"abstract base class for branch loaders that want to load from a tree that is linked somehow with entries in the main tree",G__setup_memvarTSnLinkedTreeBranchLoader,G__setup_memfuncTSnLinkedTreeBranchLoader);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnEventMetadata);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnMetadataLinkBranchLoader),sizeof(TSnMetadataLinkBranchLoader),-1,324864,"match meta data from the main tree with meta data in the linked tree",G__setup_memvarTSnMetadataLinkBranchLoader,G__setup_memfuncTSnMetadataLinkBranchLoader);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TTimeStamp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnTimeLinkBranchLoader),sizeof(TSnTimeLinkBranchLoader),-1,324868,"base class for loaders that link via a TTimeStamp branch",G__setup_memvarTSnTimeLinkBranchLoader,G__setup_memfuncTSnTimeLinkBranchLoader);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnTimeLinkBranchLoadercLcLEMethod_t);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TAMVirtualLoader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnConfigTreeLoader),sizeof(TSnConfigTreeLoader),-1,292096,"use to load the Config tree while looping over the event tree",G__setup_memvarTSnConfigTreeLoader,G__setup_memfuncTSnConfigTreeLoader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnVoltageTreeLoader),sizeof(TSnVoltageTreeLoader),-1,324864,"use to load the Voltage tree while looping over the event tree",G__setup_memvarTSnVoltageTreeLoader,G__setup_memfuncTSnVoltageTreeLoader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnHeartbeatTreeLoader),sizeof(TSnHeartbeatTreeLoader),-1,324864,"use to load the Heartbeat tree while looping over the event tree",G__setup_memvarTSnHeartbeatTreeLoader,G__setup_memfuncTSnHeartbeatTreeLoader);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnPowerReading);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnVoltageBranchLoader),sizeof(TSnVoltageBranchLoader),-1,324864,"a time link branch loader that knows how to get the time from a TSnPowerReading",G__setup_memvarTSnVoltageBranchLoader,G__setup_memfuncTSnVoltageBranchLoader);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnHeartbeat);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnHeartbeatBranchLoader),sizeof(TSnHeartbeatBranchLoader),-1,324864,"a time link branch loader that knows how to get time from a heartbeat entry",G__setup_memvarTSnHeartbeatBranchLoader,G__setup_memfuncTSnHeartbeatBranchLoader);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TEntryList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnAltTreeLoader),sizeof(TSnAltTreeLoader),-1,324865,"ABC for alternate tree loaders",G__setup_memvarTSnAltTreeLoader,G__setup_memfuncTSnAltTreeLoader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnAltTreeBranchLoader),sizeof(TSnAltTreeBranchLoader),-1,324864,"load a random entry from a branch in an alternate tree",G__setup_memvarTSnAltTreeBranchLoader,G__setup_memfuncTSnAltTreeBranchLoader);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TRandom3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnAltTreeRandomLoader),sizeof(TSnAltTreeRandomLoader),-1,324864,"load a random entry from an alternate tree",G__setup_memvarTSnAltTreeRandomLoader,G__setup_memfuncTSnAltTreeRandomLoader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnAltTreeCyclicLoader),sizeof(TSnAltTreeCyclicLoader),-1,324864,"load entries from the other tree in order, cycling back through if the requests outnumber available entries",G__setup_memvarTSnAltTreeCyclicLoader,G__setup_memfuncTSnAltTreeCyclicLoader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnAltTreeShuffleLoader),sizeof(TSnAltTreeShuffleLoader),-1,324864,"load entries from a shuffled list of available entries",G__setup_memvarTSnAltTreeShuffleLoader,G__setup_memfuncTSnAltTreeShuffleLoader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnAltTreeSingleEntryLoader),sizeof(TSnAltTreeSingleEntryLoader),-1,323840,"load one entry (the same one) from the alternate tree for every entry of the main tree",G__setup_memvarTSnAltTreeSingleEntryLoader,G__setup_memfuncTSnAltTreeSingleEntryLoader);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TTask);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TAModule);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnLoadFromFileMod),sizeof(TSnLoadFromFileMod),-1,324864,"load an object from a file and publish it",G__setup_memvarTSnLoadFromFileMod,G__setup_memfuncTSnLoadFromFileMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnWindTreeLoader),sizeof(TSnWindTreeLoader),-1,324864,(char*)NULL,G__setup_memvarTSnWindTreeLoader,G__setup_memfuncTSnWindTreeLoader);
   G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnWindData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__loadersLN_TSnWindBranchLoader),sizeof(TSnWindBranchLoader),-1,324864,(char*)NULL,G__setup_memvarTSnWindBranchLoader,G__setup_memfuncTSnWindBranchLoader);
}
extern "C" void G__cpp_setupG__loaders(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__loaders()");
  G__set_cpp_environmentG__loaders();
  G__cpp_setup_tagtableG__loaders();

  G__cpp_setup_inheritanceG__loaders();

  G__cpp_setup_typetableG__loaders();

  G__cpp_setup_memvarG__loaders();

  G__cpp_setup_memfuncG__loaders();
  G__cpp_setup_globalG__loaders();
  G__cpp_setup_funcG__loaders();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__loaders();
  return;
}
class G__cpp_setup_initG__loaders {
  public:
    G__cpp_setup_initG__loaders() { G__add_setup_func("G__loaders",(G__incsetup)(&G__cpp_setupG__loaders)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__loaders() { G__remove_setup_func("G__loaders"); }
};
G__cpp_setup_initG__loaders G__cpp_setup_initializerG__loaders;

