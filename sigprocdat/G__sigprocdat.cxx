//
// File generated by /data/users/jtatar/Software/root/bin/rootcint at Wed Apr 30 16:57:15 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME sigprocdatdIG__sigprocdat
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__sigprocdat.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

#include "TBuffer.h"
#include "TVirtualObject.h"
#include <vector>
#include "TSchemaHelper.h"


// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TSnCalibObject_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TSnCalibObject(void *p);
   static void deleteArray_TSnCalibObject(void *p);
   static void destruct_TSnCalibObject(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnCalibObject*)
   {
      ::TSnCalibObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnCalibObject >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnCalibObject", ::TSnCalibObject::Class_Version(), "./sigprocdat/TSnCalibObject.h", 6,
                  typeid(::TSnCalibObject), DefineBehavior(ptr, ptr),
                  &::TSnCalibObject::Dictionary, isa_proxy, 4,
                  sizeof(::TSnCalibObject) );
      instance.SetDelete(&delete_TSnCalibObject);
      instance.SetDeleteArray(&deleteArray_TSnCalibObject);
      instance.SetDestructor(&destruct_TSnCalibObject);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnCalibObject*)
   {
      return GenerateInitInstanceLocal((::TSnCalibObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnCalibObject*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnCalibSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TSnCalibSet(void *p);
   static void deleteArray_TSnCalibSet(void *p);
   static void destruct_TSnCalibSet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnCalibSet*)
   {
      ::TSnCalibSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnCalibSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnCalibSet", ::TSnCalibSet::Class_Version(), "./sigprocdat/TSnCalibSet.h", 9,
                  typeid(::TSnCalibSet), DefineBehavior(ptr, ptr),
                  &::TSnCalibSet::Dictionary, isa_proxy, 4,
                  sizeof(::TSnCalibSet) );
      instance.SetDelete(&delete_TSnCalibSet);
      instance.SetDeleteArray(&deleteArray_TSnCalibSet);
      instance.SetDestructor(&destruct_TSnCalibSet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnCalibSet*)
   {
      return GenerateInitInstanceLocal((::TSnCalibSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnCalibSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnPerSampCalibSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnPerSampCalibSet(void *p = 0);
   static void *newArray_TSnPerSampCalibSet(Long_t size, void *p);
   static void delete_TSnPerSampCalibSet(void *p);
   static void deleteArray_TSnPerSampCalibSet(void *p);
   static void destruct_TSnPerSampCalibSet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnPerSampCalibSet*)
   {
      ::TSnPerSampCalibSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnPerSampCalibSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnPerSampCalibSet", ::TSnPerSampCalibSet::Class_Version(), "./sigprocdat/TSnPerSampCalibSet.h", 7,
                  typeid(::TSnPerSampCalibSet), DefineBehavior(ptr, ptr),
                  &::TSnPerSampCalibSet::Dictionary, isa_proxy, 4,
                  sizeof(::TSnPerSampCalibSet) );
      instance.SetNew(&new_TSnPerSampCalibSet);
      instance.SetNewArray(&newArray_TSnPerSampCalibSet);
      instance.SetDelete(&delete_TSnPerSampCalibSet);
      instance.SetDeleteArray(&deleteArray_TSnPerSampCalibSet);
      instance.SetDestructor(&destruct_TSnPerSampCalibSet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnPerSampCalibSet*)
   {
      return GenerateInitInstanceLocal((::TSnPerSampCalibSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnPerSampCalibSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnPerCardCalibSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnPerCardCalibSet(void *p = 0);
   static void *newArray_TSnPerCardCalibSet(Long_t size, void *p);
   static void delete_TSnPerCardCalibSet(void *p);
   static void deleteArray_TSnPerCardCalibSet(void *p);
   static void destruct_TSnPerCardCalibSet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnPerCardCalibSet*)
   {
      ::TSnPerCardCalibSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnPerCardCalibSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnPerCardCalibSet", ::TSnPerCardCalibSet::Class_Version(), "./sigprocdat/TSnPerCardCalibSet.h", 7,
                  typeid(::TSnPerCardCalibSet), DefineBehavior(ptr, ptr),
                  &::TSnPerCardCalibSet::Dictionary, isa_proxy, 4,
                  sizeof(::TSnPerCardCalibSet) );
      instance.SetNew(&new_TSnPerCardCalibSet);
      instance.SetNewArray(&newArray_TSnPerCardCalibSet);
      instance.SetDelete(&delete_TSnPerCardCalibSet);
      instance.SetDeleteArray(&deleteArray_TSnPerCardCalibSet);
      instance.SetDestructor(&destruct_TSnPerCardCalibSet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnPerCardCalibSet*)
   {
      return GenerateInitInstanceLocal((::TSnPerCardCalibSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnPerCardCalibSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnFPNCalibVal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnFPNCalibVal(void *p = 0);
   static void *newArray_TSnFPNCalibVal(Long_t size, void *p);
   static void delete_TSnFPNCalibVal(void *p);
   static void deleteArray_TSnFPNCalibVal(void *p);
   static void destruct_TSnFPNCalibVal(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnFPNCalibVal*)
   {
      ::TSnFPNCalibVal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnFPNCalibVal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnFPNCalibVal", ::TSnFPNCalibVal::Class_Version(), "./sigprocdat/TSnFPNCalibVal.h", 6,
                  typeid(::TSnFPNCalibVal), DefineBehavior(ptr, ptr),
                  &::TSnFPNCalibVal::Dictionary, isa_proxy, 4,
                  sizeof(::TSnFPNCalibVal) );
      instance.SetNew(&new_TSnFPNCalibVal);
      instance.SetNewArray(&newArray_TSnFPNCalibVal);
      instance.SetDelete(&delete_TSnFPNCalibVal);
      instance.SetDeleteArray(&deleteArray_TSnFPNCalibVal);
      instance.SetDestructor(&destruct_TSnFPNCalibVal);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnFPNCalibVal*)
   {
      return GenerateInitInstanceLocal((::TSnFPNCalibVal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnFPNCalibVal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnFPNCalibSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnFPNCalibSet(void *p = 0);
   static void *newArray_TSnFPNCalibSet(Long_t size, void *p);
   static void delete_TSnFPNCalibSet(void *p);
   static void deleteArray_TSnFPNCalibSet(void *p);
   static void destruct_TSnFPNCalibSet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnFPNCalibSet*)
   {
      ::TSnFPNCalibSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnFPNCalibSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnFPNCalibSet", ::TSnFPNCalibSet::Class_Version(), "./sigprocdat/TSnFPNCalibSet.h", 7,
                  typeid(::TSnFPNCalibSet), DefineBehavior(ptr, ptr),
                  &::TSnFPNCalibSet::Dictionary, isa_proxy, 4,
                  sizeof(::TSnFPNCalibSet) );
      instance.SetNew(&new_TSnFPNCalibSet);
      instance.SetNewArray(&newArray_TSnFPNCalibSet);
      instance.SetDelete(&delete_TSnFPNCalibSet);
      instance.SetDeleteArray(&deleteArray_TSnFPNCalibSet);
      instance.SetDestructor(&destruct_TSnFPNCalibSet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnFPNCalibSet*)
   {
      return GenerateInitInstanceLocal((::TSnFPNCalibSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnFPNCalibSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnGainCalibVal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnGainCalibVal(void *p = 0);
   static void *newArray_TSnGainCalibVal(Long_t size, void *p);
   static void delete_TSnGainCalibVal(void *p);
   static void deleteArray_TSnGainCalibVal(void *p);
   static void destruct_TSnGainCalibVal(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnGainCalibVal*)
   {
      ::TSnGainCalibVal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnGainCalibVal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnGainCalibVal", ::TSnGainCalibVal::Class_Version(), "./sigprocdat/TSnGainCalibVal.h", 6,
                  typeid(::TSnGainCalibVal), DefineBehavior(ptr, ptr),
                  &::TSnGainCalibVal::Dictionary, isa_proxy, 4,
                  sizeof(::TSnGainCalibVal) );
      instance.SetNew(&new_TSnGainCalibVal);
      instance.SetNewArray(&newArray_TSnGainCalibVal);
      instance.SetDelete(&delete_TSnGainCalibVal);
      instance.SetDeleteArray(&deleteArray_TSnGainCalibVal);
      instance.SetDestructor(&destruct_TSnGainCalibVal);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnGainCalibVal*)
   {
      return GenerateInitInstanceLocal((::TSnGainCalibVal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnGainCalibVal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnDualGainCalib_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnDualGainCalib(void *p = 0);
   static void *newArray_TSnDualGainCalib(Long_t size, void *p);
   static void delete_TSnDualGainCalib(void *p);
   static void deleteArray_TSnDualGainCalib(void *p);
   static void destruct_TSnDualGainCalib(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnDualGainCalib*)
   {
      ::TSnDualGainCalib *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnDualGainCalib >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnDualGainCalib", ::TSnDualGainCalib::Class_Version(), "./sigprocdat/TSnDualGainCalib.h", 7,
                  typeid(::TSnDualGainCalib), DefineBehavior(ptr, ptr),
                  &::TSnDualGainCalib::Dictionary, isa_proxy, 4,
                  sizeof(::TSnDualGainCalib) );
      instance.SetNew(&new_TSnDualGainCalib);
      instance.SetNewArray(&newArray_TSnDualGainCalib);
      instance.SetDelete(&delete_TSnDualGainCalib);
      instance.SetDeleteArray(&deleteArray_TSnDualGainCalib);
      instance.SetDestructor(&destruct_TSnDualGainCalib);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnDualGainCalib*)
   {
      return GenerateInitInstanceLocal((::TSnDualGainCalib*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnDualGainCalib*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnDualGainCalibSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnDualGainCalibSet(void *p = 0);
   static void *newArray_TSnDualGainCalibSet(Long_t size, void *p);
   static void delete_TSnDualGainCalibSet(void *p);
   static void deleteArray_TSnDualGainCalibSet(void *p);
   static void destruct_TSnDualGainCalibSet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnDualGainCalibSet*)
   {
      ::TSnDualGainCalibSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnDualGainCalibSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnDualGainCalibSet", ::TSnDualGainCalibSet::Class_Version(), "./sigprocdat/TSnDualGainCalibSet.h", 7,
                  typeid(::TSnDualGainCalibSet), DefineBehavior(ptr, ptr),
                  &::TSnDualGainCalibSet::Dictionary, isa_proxy, 4,
                  sizeof(::TSnDualGainCalibSet) );
      instance.SetNew(&new_TSnDualGainCalibSet);
      instance.SetNewArray(&newArray_TSnDualGainCalibSet);
      instance.SetDelete(&delete_TSnDualGainCalibSet);
      instance.SetDeleteArray(&deleteArray_TSnDualGainCalibSet);
      instance.SetDestructor(&destruct_TSnDualGainCalibSet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnDualGainCalibSet*)
   {
      return GenerateInitInstanceLocal((::TSnDualGainCalibSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnDualGainCalibSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnCalWvData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnCalWvData(void *p = 0);
   static void *newArray_TSnCalWvData(Long_t size, void *p);
   static void delete_TSnCalWvData(void *p);
   static void deleteArray_TSnCalWvData(void *p);
   static void destruct_TSnCalWvData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnCalWvData*)
   {
      ::TSnCalWvData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnCalWvData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnCalWvData", ::TSnCalWvData::Class_Version(), "./sigprocdat/TSnCalWvData.h", 10,
                  typeid(::TSnCalWvData), DefineBehavior(ptr, ptr),
                  &::TSnCalWvData::Dictionary, isa_proxy, 4,
                  sizeof(::TSnCalWvData) );
      instance.SetNew(&new_TSnCalWvData);
      instance.SetNewArray(&newArray_TSnCalWvData);
      instance.SetDelete(&delete_TSnCalWvData);
      instance.SetDeleteArray(&deleteArray_TSnCalWvData);
      instance.SetDestructor(&destruct_TSnCalWvData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnCalWvData*)
   {
      return GenerateInitInstanceLocal((::TSnCalWvData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnCalWvData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnInterp1DWvData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TSnInterp1DWvData(void *p);
   static void deleteArray_TSnInterp1DWvData(void *p);
   static void destruct_TSnInterp1DWvData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnInterp1DWvData*)
   {
      ::TSnInterp1DWvData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnInterp1DWvData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnInterp1DWvData", ::TSnInterp1DWvData::Class_Version(), "./sigprocdat/TSnInterp1DWvData.h", 6,
                  typeid(::TSnInterp1DWvData), DefineBehavior(ptr, ptr),
                  &::TSnInterp1DWvData::Dictionary, isa_proxy, 4,
                  sizeof(::TSnInterp1DWvData) );
      instance.SetDelete(&delete_TSnInterp1DWvData);
      instance.SetDeleteArray(&deleteArray_TSnInterp1DWvData);
      instance.SetDestructor(&destruct_TSnInterp1DWvData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnInterp1DWvData*)
   {
      return GenerateInitInstanceLocal((::TSnInterp1DWvData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnInterp1DWvData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnInterp1DSpline3_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnInterp1DSpline3(void *p = 0);
   static void *newArray_TSnInterp1DSpline3(Long_t size, void *p);
   static void delete_TSnInterp1DSpline3(void *p);
   static void deleteArray_TSnInterp1DSpline3(void *p);
   static void destruct_TSnInterp1DSpline3(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnInterp1DSpline3*)
   {
      ::TSnInterp1DSpline3 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnInterp1DSpline3 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnInterp1DSpline3", ::TSnInterp1DSpline3::Class_Version(), "./sigprocdat/TSnInterp1DSpline3.h", 10,
                  typeid(::TSnInterp1DSpline3), DefineBehavior(ptr, ptr),
                  &::TSnInterp1DSpline3::Dictionary, isa_proxy, 4,
                  sizeof(::TSnInterp1DSpline3) );
      instance.SetNew(&new_TSnInterp1DSpline3);
      instance.SetNewArray(&newArray_TSnInterp1DSpline3);
      instance.SetDelete(&delete_TSnInterp1DSpline3);
      instance.SetDeleteArray(&deleteArray_TSnInterp1DSpline3);
      instance.SetDestructor(&destruct_TSnInterp1DSpline3);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnInterp1DSpline3*)
   {
      return GenerateInitInstanceLocal((::TSnInterp1DSpline3*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnInterp1DSpline3*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnStopPosnSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnStopPosnSet(void *p = 0);
   static void *newArray_TSnStopPosnSet(Long_t size, void *p);
   static void delete_TSnStopPosnSet(void *p);
   static void deleteArray_TSnStopPosnSet(void *p);
   static void destruct_TSnStopPosnSet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnStopPosnSet*)
   {
      ::TSnStopPosnSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnStopPosnSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnStopPosnSet", ::TSnStopPosnSet::Class_Version(), "./sigprocdat/TSnStopPosnSet.h", 9,
                  typeid(::TSnStopPosnSet), DefineBehavior(ptr, ptr),
                  &::TSnStopPosnSet::Dictionary, isa_proxy, 4,
                  sizeof(::TSnStopPosnSet) );
      instance.SetNew(&new_TSnStopPosnSet);
      instance.SetNewArray(&newArray_TSnStopPosnSet);
      instance.SetDelete(&delete_TSnStopPosnSet);
      instance.SetDeleteArray(&deleteArray_TSnStopPosnSet);
      instance.SetDestructor(&destruct_TSnStopPosnSet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnStopPosnSet*)
   {
      return GenerateInitInstanceLocal((::TSnStopPosnSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnStopPosnSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSnCalFFTData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSnCalFFTData(void *p = 0);
   static void *newArray_TSnCalFFTData(Long_t size, void *p);
   static void delete_TSnCalFFTData(void *p);
   static void deleteArray_TSnCalFFTData(void *p);
   static void destruct_TSnCalFFTData(void *p);

   // Schema evolution read functions
   static void read_TSnCalFFTData_0( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
      TSnCalFFTData* newObj = (TSnCalFFTData*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
      newObj->ClearCache(); 
   }

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSnCalFFTData*)
   {
      ::TSnCalFFTData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSnCalFFTData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSnCalFFTData", ::TSnCalFFTData::Class_Version(), "./sigprocdat/TSnCalFFTData.h", 12,
                  typeid(::TSnCalFFTData), DefineBehavior(ptr, ptr),
                  &::TSnCalFFTData::Dictionary, isa_proxy, 4,
                  sizeof(::TSnCalFFTData) );
      instance.SetNew(&new_TSnCalFFTData);
      instance.SetNewArray(&newArray_TSnCalFFTData);
      instance.SetDelete(&delete_TSnCalFFTData);
      instance.SetDeleteArray(&deleteArray_TSnCalFFTData);
      instance.SetDestructor(&destruct_TSnCalFFTData);

      ROOT::TSchemaHelper* rule;

      // the io read rules
      std::vector<ROOT::TSchemaHelper> readrules(1);
      rule = &readrules[0];
      rule->fSourceClass = "TSnCalFFTData";
      rule->fTarget      = "";
      rule->fSource      = "";
      rule->fFunctionPtr = (void *)G__func2void( read_TSnCalFFTData_0);
      rule->fCode        = " newObj->ClearCache(); ";
      rule->fVersion     = "[1-]";
      instance.SetReadRules( readrules );
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSnCalFFTData*)
   {
      return GenerateInitInstanceLocal((::TSnCalFFTData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSnCalFFTData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TSnCalibObject::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnCalibObject::Class_Name()
{
   return "TSnCalibObject";
}

//______________________________________________________________________________
const char *TSnCalibObject::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalibObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnCalibObject::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalibObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnCalibObject::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalibObject*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnCalibObject::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalibObject*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnCalibSet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnCalibSet::Class_Name()
{
   return "TSnCalibSet";
}

//______________________________________________________________________________
const char *TSnCalibSet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalibSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnCalibSet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalibSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnCalibSet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalibSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnCalibSet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalibSet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnPerSampCalibSet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnPerSampCalibSet::Class_Name()
{
   return "TSnPerSampCalibSet";
}

//______________________________________________________________________________
const char *TSnPerSampCalibSet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPerSampCalibSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnPerSampCalibSet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPerSampCalibSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnPerSampCalibSet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPerSampCalibSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnPerSampCalibSet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPerSampCalibSet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnPerCardCalibSet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnPerCardCalibSet::Class_Name()
{
   return "TSnPerCardCalibSet";
}

//______________________________________________________________________________
const char *TSnPerCardCalibSet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPerCardCalibSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnPerCardCalibSet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnPerCardCalibSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnPerCardCalibSet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPerCardCalibSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnPerCardCalibSet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnPerCardCalibSet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnFPNCalibVal::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnFPNCalibVal::Class_Name()
{
   return "TSnFPNCalibVal";
}

//______________________________________________________________________________
const char *TSnFPNCalibVal::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNCalibVal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnFPNCalibVal::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNCalibVal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnFPNCalibVal::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNCalibVal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnFPNCalibVal::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNCalibVal*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnFPNCalibSet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnFPNCalibSet::Class_Name()
{
   return "TSnFPNCalibSet";
}

//______________________________________________________________________________
const char *TSnFPNCalibSet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNCalibSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnFPNCalibSet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNCalibSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnFPNCalibSet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNCalibSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnFPNCalibSet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnFPNCalibSet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnGainCalibVal::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnGainCalibVal::Class_Name()
{
   return "TSnGainCalibVal";
}

//______________________________________________________________________________
const char *TSnGainCalibVal::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnGainCalibVal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnGainCalibVal::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnGainCalibVal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnGainCalibVal::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnGainCalibVal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnGainCalibVal::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnGainCalibVal*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnDualGainCalib::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnDualGainCalib::Class_Name()
{
   return "TSnDualGainCalib";
}

//______________________________________________________________________________
const char *TSnDualGainCalib::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnDualGainCalib*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnDualGainCalib::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnDualGainCalib*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnDualGainCalib::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnDualGainCalib*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnDualGainCalib::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnDualGainCalib*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnDualGainCalibSet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnDualGainCalibSet::Class_Name()
{
   return "TSnDualGainCalibSet";
}

//______________________________________________________________________________
const char *TSnDualGainCalibSet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnDualGainCalibSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnDualGainCalibSet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnDualGainCalibSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnDualGainCalibSet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnDualGainCalibSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnDualGainCalibSet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnDualGainCalibSet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnCalWvData::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnCalWvData::Class_Name()
{
   return "TSnCalWvData";
}

//______________________________________________________________________________
const char *TSnCalWvData::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalWvData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnCalWvData::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalWvData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnCalWvData::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalWvData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnCalWvData::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalWvData*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnInterp1DWvData::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnInterp1DWvData::Class_Name()
{
   return "TSnInterp1DWvData";
}

//______________________________________________________________________________
const char *TSnInterp1DWvData::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnInterp1DWvData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnInterp1DWvData::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnInterp1DWvData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnInterp1DWvData::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnInterp1DWvData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnInterp1DWvData::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnInterp1DWvData*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnInterp1DSpline3::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnInterp1DSpline3::Class_Name()
{
   return "TSnInterp1DSpline3";
}

//______________________________________________________________________________
const char *TSnInterp1DSpline3::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnInterp1DSpline3*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnInterp1DSpline3::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnInterp1DSpline3*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnInterp1DSpline3::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnInterp1DSpline3*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnInterp1DSpline3::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnInterp1DSpline3*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnStopPosnSet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnStopPosnSet::Class_Name()
{
   return "TSnStopPosnSet";
}

//______________________________________________________________________________
const char *TSnStopPosnSet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnStopPosnSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnStopPosnSet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnStopPosnSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnStopPosnSet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnStopPosnSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnStopPosnSet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnStopPosnSet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSnCalFFTData::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSnCalFFTData::Class_Name()
{
   return "TSnCalFFTData";
}

//______________________________________________________________________________
const char *TSnCalFFTData::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalFFTData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSnCalFFTData::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSnCalFFTData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSnCalFFTData::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalFFTData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSnCalFFTData::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSnCalFFTData*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TSnCalibObject::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnCalibObject.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnCalibObject::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnCalibObject::Class(),this);
   }
}

//______________________________________________________________________________
void TSnCalibObject::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnCalibObject.
      TClass *R__cl = ::TSnCalibObject::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TSnCalibObject(void *p) {
      delete ((::TSnCalibObject*)p);
   }
   static void deleteArray_TSnCalibObject(void *p) {
      delete [] ((::TSnCalibObject*)p);
   }
   static void destruct_TSnCalibObject(void *p) {
      typedef ::TSnCalibObject current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnCalibObject

//______________________________________________________________________________
void TSnCalibSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnCalibSet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnCalibSet::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnCalibSet::Class(),this);
   }
}

//______________________________________________________________________________
void TSnCalibSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnCalibSet.
      TClass *R__cl = ::TSnCalibSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibs", &fCalibs);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TSnCalibSet(void *p) {
      delete ((::TSnCalibSet*)p);
   }
   static void deleteArray_TSnCalibSet(void *p) {
      delete [] ((::TSnCalibSet*)p);
   }
   static void destruct_TSnCalibSet(void *p) {
      typedef ::TSnCalibSet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnCalibSet

//______________________________________________________________________________
void TSnPerSampCalibSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnPerSampCalibSet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnPerSampCalibSet::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnPerSampCalibSet::Class(),this);
   }
}

//______________________________________________________________________________
void TSnPerSampCalibSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnPerSampCalibSet.
      TClass *R__cl = ::TSnPerSampCalibSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      TSnCalibSet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnPerSampCalibSet(void *p) {
      return  p ? new(p) ::TSnPerSampCalibSet : new ::TSnPerSampCalibSet;
   }
   static void *newArray_TSnPerSampCalibSet(Long_t nElements, void *p) {
      return p ? new(p) ::TSnPerSampCalibSet[nElements] : new ::TSnPerSampCalibSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnPerSampCalibSet(void *p) {
      delete ((::TSnPerSampCalibSet*)p);
   }
   static void deleteArray_TSnPerSampCalibSet(void *p) {
      delete [] ((::TSnPerSampCalibSet*)p);
   }
   static void destruct_TSnPerSampCalibSet(void *p) {
      typedef ::TSnPerSampCalibSet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnPerSampCalibSet

//______________________________________________________________________________
void TSnPerCardCalibSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnPerCardCalibSet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnPerCardCalibSet::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnPerCardCalibSet::Class(),this);
   }
}

//______________________________________________________________________________
void TSnPerCardCalibSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnPerCardCalibSet.
      TClass *R__cl = ::TSnPerCardCalibSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      TSnCalibSet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnPerCardCalibSet(void *p) {
      return  p ? new(p) ::TSnPerCardCalibSet : new ::TSnPerCardCalibSet;
   }
   static void *newArray_TSnPerCardCalibSet(Long_t nElements, void *p) {
      return p ? new(p) ::TSnPerCardCalibSet[nElements] : new ::TSnPerCardCalibSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnPerCardCalibSet(void *p) {
      delete ((::TSnPerCardCalibSet*)p);
   }
   static void deleteArray_TSnPerCardCalibSet(void *p) {
      delete [] ((::TSnPerCardCalibSet*)p);
   }
   static void destruct_TSnPerCardCalibSet(void *p) {
      typedef ::TSnPerCardCalibSet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnPerCardCalibSet

//______________________________________________________________________________
void TSnFPNCalibVal::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnFPNCalibVal.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnFPNCalibVal::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnFPNCalibVal::Class(),this);
   }
}

//______________________________________________________________________________
void TSnFPNCalibVal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnFPNCalibVal.
      TClass *R__cl = ::TSnFPNCalibVal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFpn", &fFpn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRms", &fRms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fN", &fN);
      TSnCalibObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnFPNCalibVal(void *p) {
      return  p ? new(p) ::TSnFPNCalibVal : new ::TSnFPNCalibVal;
   }
   static void *newArray_TSnFPNCalibVal(Long_t nElements, void *p) {
      return p ? new(p) ::TSnFPNCalibVal[nElements] : new ::TSnFPNCalibVal[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnFPNCalibVal(void *p) {
      delete ((::TSnFPNCalibVal*)p);
   }
   static void deleteArray_TSnFPNCalibVal(void *p) {
      delete [] ((::TSnFPNCalibVal*)p);
   }
   static void destruct_TSnFPNCalibVal(void *p) {
      typedef ::TSnFPNCalibVal current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnFPNCalibVal

//______________________________________________________________________________
void TSnFPNCalibSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnFPNCalibSet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnFPNCalibSet::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnFPNCalibSet::Class(),this);
   }
}

//______________________________________________________________________________
void TSnFPNCalibSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnFPNCalibSet.
      TClass *R__cl = ::TSnFPNCalibSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      TSnPerSampCalibSet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnFPNCalibSet(void *p) {
      return  p ? new(p) ::TSnFPNCalibSet : new ::TSnFPNCalibSet;
   }
   static void *newArray_TSnFPNCalibSet(Long_t nElements, void *p) {
      return p ? new(p) ::TSnFPNCalibSet[nElements] : new ::TSnFPNCalibSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnFPNCalibSet(void *p) {
      delete ((::TSnFPNCalibSet*)p);
   }
   static void deleteArray_TSnFPNCalibSet(void *p) {
      delete [] ((::TSnFPNCalibSet*)p);
   }
   static void destruct_TSnFPNCalibSet(void *p) {
      typedef ::TSnFPNCalibSet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnFPNCalibSet

//______________________________________________________________________________
void TSnGainCalibVal::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnGainCalibVal.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnGainCalibVal::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnGainCalibVal::Class(),this);
   }
}

//______________________________________________________________________________
void TSnGainCalibVal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnGainCalibVal.
      TClass *R__cl = ::TSnGainCalibVal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM", &fM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEM", &fEM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fB", &fB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEB", &fEB);
      TSnCalibObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnGainCalibVal(void *p) {
      return  p ? new(p) ::TSnGainCalibVal : new ::TSnGainCalibVal;
   }
   static void *newArray_TSnGainCalibVal(Long_t nElements, void *p) {
      return p ? new(p) ::TSnGainCalibVal[nElements] : new ::TSnGainCalibVal[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnGainCalibVal(void *p) {
      delete ((::TSnGainCalibVal*)p);
   }
   static void deleteArray_TSnGainCalibVal(void *p) {
      delete [] ((::TSnGainCalibVal*)p);
   }
   static void destruct_TSnGainCalibVal(void *p) {
      typedef ::TSnGainCalibVal current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnGainCalibVal

//______________________________________________________________________________
void TSnDualGainCalib::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnDualGainCalib.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnDualGainCalib::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnDualGainCalib::Class(),this);
   }
}

//______________________________________________________________________________
void TSnDualGainCalib::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnDualGainCalib.
      TClass *R__cl = ::TSnDualGainCalib::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosCal", &fPosCal);
      R__insp.InspectMember(fPosCal, "fPosCal.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNegCal", &fNegCal);
      R__insp.InspectMember(fNegCal, "fNegCal.");
      TSnCalibObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnDualGainCalib(void *p) {
      return  p ? new(p) ::TSnDualGainCalib : new ::TSnDualGainCalib;
   }
   static void *newArray_TSnDualGainCalib(Long_t nElements, void *p) {
      return p ? new(p) ::TSnDualGainCalib[nElements] : new ::TSnDualGainCalib[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnDualGainCalib(void *p) {
      delete ((::TSnDualGainCalib*)p);
   }
   static void deleteArray_TSnDualGainCalib(void *p) {
      delete [] ((::TSnDualGainCalib*)p);
   }
   static void destruct_TSnDualGainCalib(void *p) {
      typedef ::TSnDualGainCalib current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnDualGainCalib

//______________________________________________________________________________
void TSnDualGainCalibSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnDualGainCalibSet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnDualGainCalibSet::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnDualGainCalibSet::Class(),this);
   }
}

//______________________________________________________________________________
void TSnDualGainCalibSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnDualGainCalibSet.
      TClass *R__cl = ::TSnDualGainCalibSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      TSnPerCardCalibSet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnDualGainCalibSet(void *p) {
      return  p ? new(p) ::TSnDualGainCalibSet : new ::TSnDualGainCalibSet;
   }
   static void *newArray_TSnDualGainCalibSet(Long_t nElements, void *p) {
      return p ? new(p) ::TSnDualGainCalibSet[nElements] : new ::TSnDualGainCalibSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnDualGainCalibSet(void *p) {
      delete ((::TSnDualGainCalibSet*)p);
   }
   static void deleteArray_TSnDualGainCalibSet(void *p) {
      delete [] ((::TSnDualGainCalibSet*)p);
   }
   static void destruct_TSnDualGainCalibSet(void *p) {
      typedef ::TSnDualGainCalibSet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnDualGainCalibSet

//______________________________________________________________________________
void TSnCalWvData::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnCalWvData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnCalWvData::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnCalWvData::Class(),this);
   }
}

//______________________________________________________________________________
void TSnCalWvData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnCalWvData.
      TClass *R__cl = ::TSnCalWvData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fData[512]", fData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fError[512]", fError);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnCalWvData(void *p) {
      return  p ? new(p) ::TSnCalWvData : new ::TSnCalWvData;
   }
   static void *newArray_TSnCalWvData(Long_t nElements, void *p) {
      return p ? new(p) ::TSnCalWvData[nElements] : new ::TSnCalWvData[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnCalWvData(void *p) {
      delete ((::TSnCalWvData*)p);
   }
   static void deleteArray_TSnCalWvData(void *p) {
      delete [] ((::TSnCalWvData*)p);
   }
   static void destruct_TSnCalWvData(void *p) {
      typedef ::TSnCalWvData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnCalWvData

//______________________________________________________________________________
void TSnInterp1DWvData::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnInterp1DWvData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnInterp1DWvData::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnInterp1DWvData::Class(),this);
   }
}

//______________________________________________________________________________
void TSnInterp1DWvData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnInterp1DWvData.
      TClass *R__cl = ::TSnInterp1DWvData::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TSnInterp1DWvData(void *p) {
      delete ((::TSnInterp1DWvData*)p);
   }
   static void deleteArray_TSnInterp1DWvData(void *p) {
      delete [] ((::TSnInterp1DWvData*)p);
   }
   static void destruct_TSnInterp1DWvData(void *p) {
      typedef ::TSnInterp1DWvData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnInterp1DWvData

//______________________________________________________________________________
void TSnInterp1DSpline3::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnInterp1DSpline3.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnInterp1DSpline3::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnInterp1DSpline3::Class(),this);
   }
}

//______________________________________________________________________________
void TSnInterp1DSpline3::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnInterp1DSpline3.
      TClass *R__cl = ::TSnInterp1DSpline3::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSpline", &fSpline);
      TSnInterp1DWvData::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnInterp1DSpline3(void *p) {
      return  p ? new(p) ::TSnInterp1DSpline3 : new ::TSnInterp1DSpline3;
   }
   static void *newArray_TSnInterp1DSpline3(Long_t nElements, void *p) {
      return p ? new(p) ::TSnInterp1DSpline3[nElements] : new ::TSnInterp1DSpline3[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnInterp1DSpline3(void *p) {
      delete ((::TSnInterp1DSpline3*)p);
   }
   static void deleteArray_TSnInterp1DSpline3(void *p) {
      delete [] ((::TSnInterp1DSpline3*)p);
   }
   static void destruct_TSnInterp1DSpline3(void *p) {
      typedef ::TSnInterp1DSpline3 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnInterp1DSpline3

//______________________________________________________________________________
void TSnStopPosnSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnStopPosnSet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnStopPosnSet::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnStopPosnSet::Class(),this);
   }
}

//______________________________________________________________________________
void TSnStopPosnSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnStopPosnSet.
      TClass *R__cl = ::TSnStopPosnSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirst[4]", fFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth", &fWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQual", &fQual);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnStopPosnSet(void *p) {
      return  p ? new(p) ::TSnStopPosnSet : new ::TSnStopPosnSet;
   }
   static void *newArray_TSnStopPosnSet(Long_t nElements, void *p) {
      return p ? new(p) ::TSnStopPosnSet[nElements] : new ::TSnStopPosnSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnStopPosnSet(void *p) {
      delete ((::TSnStopPosnSet*)p);
   }
   static void deleteArray_TSnStopPosnSet(void *p) {
      delete [] ((::TSnStopPosnSet*)p);
   }
   static void destruct_TSnStopPosnSet(void *p) {
      typedef ::TSnStopPosnSet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnStopPosnSet

//______________________________________________________________________________
void TSnCalFFTData::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSnCalFFTData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSnCalFFTData::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSnCalFFTData::Class(),this);
   }
}

//______________________________________________________________________________
void TSnCalFFTData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSnCalFFTData.
      TClass *R__cl = ::TSnCalFFTData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFFT[4][65]", fFFT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFreq[65]", fFreq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCache[4]", &fCache);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSnCalFFTData(void *p) {
      return  p ? new(p) ::TSnCalFFTData : new ::TSnCalFFTData;
   }
   static void *newArray_TSnCalFFTData(Long_t nElements, void *p) {
      return p ? new(p) ::TSnCalFFTData[nElements] : new ::TSnCalFFTData[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSnCalFFTData(void *p) {
      delete ((::TSnCalFFTData*)p);
   }
   static void deleteArray_TSnCalFFTData(void *p) {
      delete [] ((::TSnCalFFTData*)p);
   }
   static void destruct_TSnCalFFTData(void *p) {
      typedef ::TSnCalFFTData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSnCalFFTData

/********************************************************
* sigprocdat/G__sigprocdat.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__sigprocdat();

extern "C" void G__set_cpp_environmentG__sigprocdat() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("sigprocdat/TSnCalibObject.h");
  G__add_compiledheader("sigprocdat/TSnCalibSet.h");
  G__add_compiledheader("sigprocdat/TSnPerSampCalibSet.h");
  G__add_compiledheader("sigprocdat/TSnPerCardCalibSet.h");
  G__add_compiledheader("sigprocdat/TSnFPNCalibVal.h");
  G__add_compiledheader("sigprocdat/TSnFPNCalibSet.h");
  G__add_compiledheader("sigprocdat/TSnGainCalibVal.h");
  G__add_compiledheader("sigprocdat/TSnDualGainCalib.h");
  G__add_compiledheader("sigprocdat/TSnDualGainCalibSet.h");
  G__add_compiledheader("sigprocdat/TSnCalWvData.h");
  G__add_compiledheader("sigprocdat/TSnInterp1DWvData.h");
  G__add_compiledheader("sigprocdat/TSnInterp1DSpline3.h");
  G__add_compiledheader("sigprocdat/TSnStopPosnSet.h");
  G__add_compiledheader("sigprocdat/TSnCalFFTData.h");
  G__cpp_reset_tagtableG__sigprocdat();
}
#include <new>
extern "C" int G__cpp_dllrevG__sigprocdat() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TSnCalibObject */
static int G__G__sigprocdat_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnCalibObject*) G__getstructoffset())->Calibrate((const Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnCalibObject*) G__getstructoffset())->CalibError((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TSnCalibObject*) G__getstructoffset())->CalibrateWithErr((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnCalibObject::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalibObject::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnCalibObject::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnCalibObject::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalibObject*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalibObject::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalibObject::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalibObject::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_168_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalibObject::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnCalibObject G__TTSnCalibObject;
static int G__G__sigprocdat_168_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnCalibObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnCalibObject*) (soff+(sizeof(TSnCalibObject)*i)))->~G__TTSnCalibObject();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnCalibObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnCalibObject*) (soff))->~G__TTSnCalibObject();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigprocdat_168_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalibObject* dest = (TSnCalibObject*) G__getstructoffset();
   *dest = *(TSnCalibObject*) libp->para[0].ref;
   const TSnCalibObject& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnCalibSet */
static int G__G__sigprocdat_184_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnCalibSet*) G__getstructoffset())->NewCopy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnCalibSet::Swap(*(TSnCalibSet*) libp->para[0].ref, *(TSnCalibSet*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnCalibSet& obj = ((TSnCalibSet*) G__getstructoffset())->operator=(*(TSnCalibSet*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnCalibObject& obj = ((const TSnCalibSet*) G__getstructoffset())->GetCalibFor((const Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnCalibObject& obj = ((TSnCalibSet*) G__getstructoffset())->GetCalibFor((const Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSnCalibSet*) G__getstructoffset())->HasCalibsFor((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnCalibSet*) G__getstructoffset())->Calibrate((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnCalibSet*) G__getstructoffset())->CalibError((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TSnCalibSet*) G__getstructoffset())->CalibrateWithErr((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalibSet*) G__getstructoffset())->ChangeCalibOf((const Int_t) G__int(libp->para[0]), *(TSnCalibObject*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalibSet*) G__getstructoffset())->AddCalibAt((const Int_t) G__int(libp->para[0]), *(TSnCalibObject*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnCalibSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalibSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnCalibSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnCalibSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalibSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalibSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalibSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalibSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_184_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalibSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnCalibSet G__TTSnCalibSet;
static int G__G__sigprocdat_184_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnCalibSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnCalibSet*) (soff+(sizeof(TSnCalibSet)*i)))->~G__TTSnCalibSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnCalibSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnCalibSet*) (soff))->~G__TTSnCalibSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnPerSampCalibSet */
static int G__G__sigprocdat_186_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPerSampCalibSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPerSampCalibSet[n];
     } else {
       p = new((void*) gvp) TSnPerSampCalibSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPerSampCalibSet;
     } else {
       p = new((void*) gvp) TSnPerSampCalibSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_186_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPerSampCalibSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnPerSampCalibSet((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TSnPerSampCalibSet((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_186_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnPerSampCalibSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_186_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPerSampCalibSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_186_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnPerSampCalibSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_186_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnPerSampCalibSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_186_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPerSampCalibSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_186_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPerSampCalibSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_186_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPerSampCalibSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_186_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPerSampCalibSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_186_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPerSampCalibSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigprocdat_186_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnPerSampCalibSet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnPerSampCalibSet(*(TSnPerSampCalibSet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnPerSampCalibSet G__TTSnPerSampCalibSet;
static int G__G__sigprocdat_186_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnPerSampCalibSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnPerSampCalibSet*) (soff+(sizeof(TSnPerSampCalibSet)*i)))->~G__TTSnPerSampCalibSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnPerSampCalibSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnPerSampCalibSet*) (soff))->~G__TTSnPerSampCalibSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigprocdat_186_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPerSampCalibSet* dest = (TSnPerSampCalibSet*) G__getstructoffset();
   *dest = *(TSnPerSampCalibSet*) libp->para[0].ref;
   const TSnPerSampCalibSet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnPerCardCalibSet */
static int G__G__sigprocdat_187_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPerCardCalibSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPerCardCalibSet[n];
     } else {
       p = new((void*) gvp) TSnPerCardCalibSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnPerCardCalibSet;
     } else {
       p = new((void*) gvp) TSnPerCardCalibSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_187_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPerCardCalibSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnPerCardCalibSet((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TSnPerCardCalibSet((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_187_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnPerCardCalibSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_187_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPerCardCalibSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_187_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnPerCardCalibSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_187_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnPerCardCalibSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_187_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnPerCardCalibSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_187_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPerCardCalibSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_187_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPerCardCalibSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_187_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnPerCardCalibSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_187_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnPerCardCalibSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigprocdat_187_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnPerCardCalibSet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnPerCardCalibSet(*(TSnPerCardCalibSet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnPerCardCalibSet G__TTSnPerCardCalibSet;
static int G__G__sigprocdat_187_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnPerCardCalibSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnPerCardCalibSet*) (soff+(sizeof(TSnPerCardCalibSet)*i)))->~G__TTSnPerCardCalibSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnPerCardCalibSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnPerCardCalibSet*) (soff))->~G__TTSnPerCardCalibSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigprocdat_187_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnPerCardCalibSet* dest = (TSnPerCardCalibSet*) G__getstructoffset();
   *dest = *(TSnPerCardCalibSet*) libp->para[0].ref;
   const TSnPerCardCalibSet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnFPNCalibVal */
static int G__G__sigprocdat_188_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFPNCalibVal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFPNCalibVal[n];
     } else {
       p = new((void*) gvp) TSnFPNCalibVal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFPNCalibVal;
     } else {
       p = new((void*) gvp) TSnFPNCalibVal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibVal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFPNCalibVal* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnFPNCalibVal(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TSnFPNCalibVal(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibVal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnFPNCalibVal*) G__getstructoffset())->GetFPN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnFPNCalibVal*) G__getstructoffset())->GetRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnFPNCalibVal*) G__getstructoffset())->GetN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnFPNCalibVal*) G__getstructoffset())->GetFPNError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnFPNCalibVal*) G__getstructoffset())->GetRMSError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNCalibVal*) G__getstructoffset())->SetFPN((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNCalibVal*) G__getstructoffset())->SetRMS((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNCalibVal*) G__getstructoffset())->SetN((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnFPNCalibVal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFPNCalibVal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnFPNCalibVal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnFPNCalibVal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNCalibVal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFPNCalibVal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFPNCalibVal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFPNCalibVal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_188_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFPNCalibVal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigprocdat_188_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnFPNCalibVal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnFPNCalibVal(*(TSnFPNCalibVal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibVal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnFPNCalibVal G__TTSnFPNCalibVal;
static int G__G__sigprocdat_188_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnFPNCalibVal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnFPNCalibVal*) (soff+(sizeof(TSnFPNCalibVal)*i)))->~G__TTSnFPNCalibVal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnFPNCalibVal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnFPNCalibVal*) (soff))->~G__TTSnFPNCalibVal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigprocdat_188_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFPNCalibVal* dest = (TSnFPNCalibVal*) G__getstructoffset();
   *dest = *(TSnFPNCalibVal*) libp->para[0].ref;
   const TSnFPNCalibVal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnFPNCalibSet */
static int G__G__sigprocdat_189_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFPNCalibSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFPNCalibSet[n];
     } else {
       p = new((void*) gvp) TSnFPNCalibSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnFPNCalibSet;
     } else {
       p = new((void*) gvp) TSnFPNCalibSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFPNCalibSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnFPNCalibSet((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSnFPNCalibSet((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnFPNCalibSet*) G__getstructoffset())->GetFPNError((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnFPNCalibSet*) G__getstructoffset())->GetRMSError((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNCalibSet*) G__getstructoffset())->ChangeCalibOf((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNCalibSet*) G__getstructoffset())->AddCalibAt((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnFPNCalibSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFPNCalibSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnFPNCalibSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnFPNCalibSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnFPNCalibSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFPNCalibSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFPNCalibSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnFPNCalibSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_189_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnFPNCalibSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigprocdat_189_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnFPNCalibSet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnFPNCalibSet(*(TSnFPNCalibSet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnFPNCalibSet G__TTSnFPNCalibSet;
static int G__G__sigprocdat_189_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnFPNCalibSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnFPNCalibSet*) (soff+(sizeof(TSnFPNCalibSet)*i)))->~G__TTSnFPNCalibSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnFPNCalibSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnFPNCalibSet*) (soff))->~G__TTSnFPNCalibSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigprocdat_189_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnFPNCalibSet* dest = (TSnFPNCalibSet*) G__getstructoffset();
   *dest = *(TSnFPNCalibSet*) libp->para[0].ref;
   const TSnFPNCalibSet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnGainCalibVal */
static int G__G__sigprocdat_190_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnGainCalibVal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnGainCalibVal[n];
     } else {
       p = new((void*) gvp) TSnGainCalibVal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnGainCalibVal;
     } else {
       p = new((void*) gvp) TSnGainCalibVal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnGainCalibVal* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnGainCalibVal(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TSnGainCalibVal(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnGainCalibVal*) G__getstructoffset())->GetSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnGainCalibVal*) G__getstructoffset())->GetSlopeErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnGainCalibVal*) G__getstructoffset())->GetOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnGainCalibVal*) G__getstructoffset())->GetOFfsetErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGainCalibVal*) G__getstructoffset())->SetSlope((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGainCalibVal*) G__getstructoffset())->SetSlopeErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGainCalibVal*) G__getstructoffset())->SetSlope((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGainCalibVal*) G__getstructoffset())->SetOffset((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGainCalibVal*) G__getstructoffset())->SetOffsetErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGainCalibVal*) G__getstructoffset())->SetOffset((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGainCalibVal*) G__getstructoffset())->SetParameters((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnGainCalibVal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnGainCalibVal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnGainCalibVal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnGainCalibVal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnGainCalibVal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnGainCalibVal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnGainCalibVal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnGainCalibVal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_190_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnGainCalibVal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigprocdat_190_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnGainCalibVal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnGainCalibVal(*(TSnGainCalibVal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnGainCalibVal G__TTSnGainCalibVal;
static int G__G__sigprocdat_190_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnGainCalibVal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnGainCalibVal*) (soff+(sizeof(TSnGainCalibVal)*i)))->~G__TTSnGainCalibVal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnGainCalibVal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnGainCalibVal*) (soff))->~G__TTSnGainCalibVal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigprocdat_190_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnGainCalibVal* dest = (TSnGainCalibVal*) G__getstructoffset();
   *dest = *(TSnGainCalibVal*) libp->para[0].ref;
   const TSnGainCalibVal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnDualGainCalib */
static int G__G__sigprocdat_191_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnDualGainCalib* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnDualGainCalib[n];
     } else {
       p = new((void*) gvp) TSnDualGainCalib[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnDualGainCalib;
     } else {
       p = new((void*) gvp) TSnDualGainCalib;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnDualGainCalib* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnDualGainCalib(*(TSnGainCalibVal*) libp->para[0].ref, *(TSnGainCalibVal*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) TSnDualGainCalib(*(TSnGainCalibVal*) libp->para[0].ref, *(TSnGainCalibVal*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnDualGainCalib* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 8
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnDualGainCalib(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]), (const Float_t) G__double(libp->para[5])
, (const Float_t) G__double(libp->para[6]), (const Float_t) G__double(libp->para[7]));
   } else {
     p = new((void*) gvp) TSnDualGainCalib(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]), (const Float_t) G__double(libp->para[5])
, (const Float_t) G__double(libp->para[6]), (const Float_t) G__double(libp->para[7]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnGainCalibVal& obj = ((const TSnDualGainCalib*) G__getstructoffset())->GetPosGainCalib();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnGainCalibVal& obj = ((TSnDualGainCalib*) G__getstructoffset())->GetPosGainCalib();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnGainCalibVal& obj = ((const TSnDualGainCalib*) G__getstructoffset())->GetNegGainCalib();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnGainCalibVal& obj = ((TSnDualGainCalib*) G__getstructoffset())->GetNegGainCalib();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnDualGainCalib::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnDualGainCalib::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnDualGainCalib::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnDualGainCalib::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDualGainCalib*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnDualGainCalib::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnDualGainCalib::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnDualGainCalib::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_191_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnDualGainCalib::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigprocdat_191_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnDualGainCalib* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnDualGainCalib(*(TSnDualGainCalib*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnDualGainCalib G__TTSnDualGainCalib;
static int G__G__sigprocdat_191_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnDualGainCalib*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnDualGainCalib*) (soff+(sizeof(TSnDualGainCalib)*i)))->~G__TTSnDualGainCalib();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnDualGainCalib*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnDualGainCalib*) (soff))->~G__TTSnDualGainCalib();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigprocdat_191_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnDualGainCalib* dest = (TSnDualGainCalib*) G__getstructoffset();
   *dest = *(TSnDualGainCalib*) libp->para[0].ref;
   const TSnDualGainCalib& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnDualGainCalibSet */
static int G__G__sigprocdat_192_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnDualGainCalibSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnDualGainCalibSet[n];
     } else {
       p = new((void*) gvp) TSnDualGainCalibSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnDualGainCalibSet;
     } else {
       p = new((void*) gvp) TSnDualGainCalibSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnDualGainCalibSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnDualGainCalibSet((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSnDualGainCalibSet((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDualGainCalibSet*) G__getstructoffset())->ChangeCalibOfChan((const Int_t) G__int(libp->para[0]), *(TSnGainCalibVal*) libp->para[1].ref
, *(TSnGainCalibVal*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDualGainCalibSet*) G__getstructoffset())->ChangeCalibOfOfChan(
(const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]), (const Float_t) G__double(libp->para[5])
, (const Float_t) G__double(libp->para[6]), (const Float_t) G__double(libp->para[7])
, (const Float_t) G__double(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDualGainCalibSet*) G__getstructoffset())->ChangeCalibOf((const Int_t) G__int(libp->para[0]), *(TSnGainCalibVal*) libp->para[1].ref
, *(TSnGainCalibVal*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDualGainCalibSet*) G__getstructoffset())->ChangeCalibOf(
(const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]), (const Float_t) G__double(libp->para[5])
, (const Float_t) G__double(libp->para[6]), (const Float_t) G__double(libp->para[7])
, (const Float_t) G__double(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDualGainCalibSet*) G__getstructoffset())->AddCalibAt((const Int_t) G__int(libp->para[0]), *(TSnGainCalibVal*) libp->para[1].ref
, *(TSnGainCalibVal*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDualGainCalibSet*) G__getstructoffset())->AddCalibAt(
(const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]), (const Float_t) G__double(libp->para[5])
, (const Float_t) G__double(libp->para[6]), (const Float_t) G__double(libp->para[7])
, (const Float_t) G__double(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDualGainCalibSet*) G__getstructoffset())->AddCalibAtChan((const Int_t) G__int(libp->para[0]), *(TSnGainCalibVal*) libp->para[1].ref
, *(TSnGainCalibVal*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDualGainCalibSet*) G__getstructoffset())->AddCalibAtChan(
(const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]), (const Float_t) G__double(libp->para[5])
, (const Float_t) G__double(libp->para[6]), (const Float_t) G__double(libp->para[7])
, (const Float_t) G__double(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnDualGainCalibSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnDualGainCalibSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnDualGainCalibSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnDualGainCalibSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnDualGainCalibSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnDualGainCalibSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnDualGainCalibSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnDualGainCalibSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_192_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnDualGainCalibSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__sigprocdat_192_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSnDualGainCalibSet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSnDualGainCalibSet(*(TSnDualGainCalibSet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnDualGainCalibSet G__TTSnDualGainCalibSet;
static int G__G__sigprocdat_192_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnDualGainCalibSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnDualGainCalibSet*) (soff+(sizeof(TSnDualGainCalibSet)*i)))->~G__TTSnDualGainCalibSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnDualGainCalibSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnDualGainCalibSet*) (soff))->~G__TTSnDualGainCalibSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigprocdat_192_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnDualGainCalibSet* dest = (TSnDualGainCalibSet*) G__getstructoffset();
   *dest = *(TSnDualGainCalibSet*) libp->para[0].ref;
   const TSnDualGainCalibSet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnCalWvData */
static int G__G__sigprocdat_196_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalWvData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnCalWvData[n];
     } else {
       p = new((void*) gvp) TSnCalWvData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnCalWvData;
     } else {
       p = new((void*) gvp) TSnCalWvData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalWvData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalWvData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnCalWvData((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TSnCalWvData((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalWvData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalWvData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnCalWvData(*(TSnCalWvData*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TSnCalWvData(*(TSnCalWvData*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalWvData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalWvData*) G__getstructoffset())->ClearAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalWvData*) G__getstructoffset())->CopyDataFrom(*(TSnCalWvData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnCalWvData::Swap(*(TSnCalWvData*) libp->para[0].ref, *(TSnCalWvData*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnCalWvData& obj = ((TSnCalWvData*) G__getstructoffset())->operator=(*((TSnCalWvData*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TSnCalWvData*) G__getstructoffset())->GetData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((TSnCalWvData*) G__getstructoffset())->GetData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TSnCalWvData*) G__getstructoffset())->GetData((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((TSnCalWvData*) G__getstructoffset())->GetData((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnCalWvData*) G__getstructoffset())->GetData((const UChar_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TSnCalWvData*) G__getstructoffset())->GetError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((TSnCalWvData*) G__getstructoffset())->GetError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TSnCalWvData*) G__getstructoffset())->GetError((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((TSnCalWvData*) G__getstructoffset())->GetError((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnCalWvData*) G__getstructoffset())->GetError((const UChar_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalWvData*) G__getstructoffset())->SetData((const UChar_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalWvData*) G__getstructoffset())->SetError((const UChar_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) ((const TSnCalWvData*) G__getstructoffset())->NewGraphForChan((const UChar_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1])
, (const Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (const Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((const TSnCalWvData*) G__getstructoffset())->NewGraphForChan((const UChar_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1])
, (const Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((const TSnCalWvData*) G__getstructoffset())->NewGraphForChan((const UChar_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1])
, (const Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const TSnCalWvData*) G__getstructoffset())->NewGraphForChan((const UChar_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const TSnCalWvData*) G__getstructoffset())->NewGraphForChan((const UChar_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnCalWvData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalWvData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnCalWvData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnCalWvData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalWvData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalWvData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalWvData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalWvData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_196_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalWvData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnCalWvData G__TTSnCalWvData;
static int G__G__sigprocdat_196_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnCalWvData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnCalWvData*) (soff+(sizeof(TSnCalWvData)*i)))->~G__TTSnCalWvData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnCalWvData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnCalWvData*) (soff))->~G__TTSnCalWvData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnInterp1DWvData */
static int G__G__sigprocdat_197_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const TSnInterp1DWvData*) G__getstructoffset())->FindXAtExtremum((const Bool_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const TSnInterp1DWvData*) G__getstructoffset())->FindXAtExtremum((const Bool_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnInterp1DWvData*) G__getstructoffset())->Eval((const Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnInterp1DWvData*) G__getstructoffset())->GetInterpolator());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnInterp1DWvData*) G__getstructoffset())->GetInterpolator());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnInterp1DWvData*) G__getstructoffset())->CopyFrom(*(TSnInterp1DWvData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnInterp1DWvData*) G__getstructoffset())->FindXAtMaximum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSnInterp1DWvData*) G__getstructoffset())->FindXAtMinimum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnInterp1DWvData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnInterp1DWvData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnInterp1DWvData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnInterp1DWvData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnInterp1DWvData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnInterp1DWvData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnInterp1DWvData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnInterp1DWvData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_197_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnInterp1DWvData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnInterp1DWvData G__TTSnInterp1DWvData;
static int G__G__sigprocdat_197_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnInterp1DWvData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnInterp1DWvData*) (soff+(sizeof(TSnInterp1DWvData)*i)))->~G__TTSnInterp1DWvData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnInterp1DWvData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnInterp1DWvData*) (soff))->~G__TTSnInterp1DWvData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__sigprocdat_197_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnInterp1DWvData* dest = (TSnInterp1DWvData*) G__getstructoffset();
   *dest = *(TSnInterp1DWvData*) libp->para[0].ref;
   const TSnInterp1DWvData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnInterp1DSpline3 */
static int G__G__sigprocdat_199_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnInterp1DSpline3* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnInterp1DSpline3[n];
     } else {
       p = new((void*) gvp) TSnInterp1DSpline3[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnInterp1DSpline3;
     } else {
       p = new((void*) gvp) TSnInterp1DSpline3;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnInterp1DSpline3* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnInterp1DSpline3(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (const Int_t) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) TSnInterp1DSpline3(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (const Int_t) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnInterp1DSpline3* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnInterp1DSpline3(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (TGraph*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TSnInterp1DSpline3(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (TGraph*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnInterp1DSpline3* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnInterp1DSpline3(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, *(TSnCalWvData*) libp->para[2].ref, (const UChar_t) G__int(libp->para[3])
, (const Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TSnInterp1DSpline3(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, *(TSnCalWvData*) libp->para[2].ref, (const UChar_t) G__int(libp->para[3])
, (const Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnInterp1DSpline3(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, *(TSnCalWvData*) libp->para[2].ref, (const UChar_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TSnInterp1DSpline3(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, *(TSnCalWvData*) libp->para[2].ref, (const UChar_t) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnInterp1DSpline3* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnInterp1DSpline3(*(TSnInterp1DSpline3*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TSnInterp1DSpline3(*(TSnInterp1DSpline3*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnInterp1DSpline3::Swap(*(TSnInterp1DSpline3*) libp->para[0].ref, *(TSnInterp1DSpline3*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnInterp1DSpline3& obj = ((TSnInterp1DSpline3*) G__getstructoffset())->operator=(*((TSnInterp1DSpline3*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnInterp1DSpline3*) G__getstructoffset())->GetSpline());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSnInterp1DSpline3*) G__getstructoffset())->GetSpline());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnInterp1DSpline3*) G__getstructoffset())->SetSpline(*(TSpline3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnInterp1DSpline3::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnInterp1DSpline3::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnInterp1DSpline3::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnInterp1DSpline3::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnInterp1DSpline3*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnInterp1DSpline3::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnInterp1DSpline3::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnInterp1DSpline3::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_199_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnInterp1DSpline3::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnInterp1DSpline3 G__TTSnInterp1DSpline3;
static int G__G__sigprocdat_199_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnInterp1DSpline3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnInterp1DSpline3*) (soff+(sizeof(TSnInterp1DSpline3)*i)))->~G__TTSnInterp1DSpline3();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnInterp1DSpline3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnInterp1DSpline3*) (soff))->~G__TTSnInterp1DSpline3();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnStopPosnSet */
static int G__G__sigprocdat_200_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnStopPosnSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStopPosnSet[n];
     } else {
       p = new((void*) gvp) TSnStopPosnSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStopPosnSet;
     } else {
       p = new((void*) gvp) TSnStopPosnSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnStopPosnSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnStopPosnSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStopPosnSet(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const TSnStopPosnSet::SmpNum_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSnStopPosnSet(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const TSnStopPosnSet::SmpNum_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnStopPosnSet((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TSnStopPosnSet((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnStopPosnSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnStopPosnSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnStopPosnSet(*(TSnStopPosnSet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TSnStopPosnSet(*(TSnStopPosnSet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnStopPosnSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnStopPosnSet::Swap(*(TSnStopPosnSet*) libp->para[0].ref, *(TSnStopPosnSet*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnStopPosnSet& obj = ((TSnStopPosnSet*) G__getstructoffset())->operator=(*((TSnStopPosnSet*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const TSnStopPosnSet*) G__getstructoffset())->GetFirstSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((TSnStopPosnSet*) G__getstructoffset())->GetFirstSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const TSnStopPosnSet*) G__getstructoffset())->GetFirstSample((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const TSnStopPosnSet*) G__getstructoffset())->GetWaveBeginSample((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const TSnStopPosnSet*) G__getstructoffset())->GetStopWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnStopPosnSet*) G__getstructoffset())->GetStopQuality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnStopPosnSet*) G__getstructoffset())->NewShiftedData(*(TSnCalWvData*) libp->para[0].ref, (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStopPosnSet*) G__getstructoffset())->SetFirstSamples((const TSnStopPosnSet::SmpNum_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStopPosnSet*) G__getstructoffset())->SetFirstSample((const UChar_t) G__int(libp->para[0]), (const TSnStopPosnSet::SmpNum_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStopPosnSet*) G__getstructoffset())->SetStopWidth((const TSnStopPosnSet::SmpNum_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStopPosnSet*) G__getstructoffset())->SetStopQuality((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnStopPosnSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnStopPosnSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnStopPosnSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnStopPosnSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnStopPosnSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnStopPosnSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnStopPosnSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnStopPosnSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_200_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnStopPosnSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnStopPosnSet G__TTSnStopPosnSet;
static int G__G__sigprocdat_200_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnStopPosnSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnStopPosnSet*) (soff+(sizeof(TSnStopPosnSet)*i)))->~G__TTSnStopPosnSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnStopPosnSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnStopPosnSet*) (soff))->~G__TTSnStopPosnSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSnCalFFTData */
static int G__G__sigprocdat_201_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalFFTData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnCalFFTData[n];
     } else {
       p = new((void*) gvp) TSnCalFFTData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSnCalFFTData;
     } else {
       p = new((void*) gvp) TSnCalFFTData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalFFTData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnCalFFTData((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TSnCalFFTData((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalFFTData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnCalFFTData(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, *(TSnCalWvData*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) TSnCalFFTData(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, *(TSnCalWvData*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSnCalFFTData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSnCalFFTData(*(TSnCalFFTData*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TSnCalFFTData(*(TSnCalFFTData*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalFFTData*) G__getstructoffset())->ClearCache();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalFFTData*) G__getstructoffset())->CopyDataFrom(*(TSnCalFFTData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalFFTData*) G__getstructoffset())->ClearAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnCalFFTData::Swap(*(TSnCalFFTData*) libp->para[0].ref, *(TSnCalFFTData*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TSnCalFFTData& obj = ((TSnCalFFTData*) G__getstructoffset())->operator=(*((TSnCalFFTData*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TSnCalFFTData*) G__getstructoffset())->GetFFTData((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((TSnCalFFTData*) G__getstructoffset())->GetFFTData((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TSnCalFFTData*) G__getstructoffset())->GetFreqData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((TSnCalFFTData*) G__getstructoffset())->GetFreqData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) TSnCalFFTData::GetNumPoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnCalFFTData*) G__getstructoffset())->GetFFTData((const UChar_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnCalFFTData*) G__getstructoffset())->GetFFTInPower((const UChar_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnCalFFTData*) G__getstructoffset())->GetFFTInDb((const UChar_t) G__int(libp->para[0]), (const UChar_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSnCalFFTData*) G__getstructoffset())->GetFreqData((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TGraph& obj = ((const TSnCalFFTData*) G__getstructoffset())->GetFFTGraph((const UChar_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnCalFFTData*) G__getstructoffset())->NewFFTGraph((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnCalFFTData*) G__getstructoffset())->NewFFTGraphInPower((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSnCalFFTData*) G__getstructoffset())->NewFFTGraphInDb((const UChar_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalFFTData*) G__getstructoffset())->SetFFTFor(*(TSnCalWvData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSnCalFFTData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalFFTData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSnCalFFTData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSnCalFFTData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSnCalFFTData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalFFTData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalFFTData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSnCalFFTData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__sigprocdat_201_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSnCalFFTData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSnCalFFTData G__TTSnCalFFTData;
static int G__G__sigprocdat_201_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSnCalFFTData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSnCalFFTData*) (soff+(sizeof(TSnCalFFTData)*i)))->~G__TTSnCalFFTData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSnCalFFTData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSnCalFFTData*) (soff))->~G__TTSnCalFFTData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TSnCalibObject */

/* TSnCalibSet */

/* TSnPerSampCalibSet */

/* TSnPerCardCalibSet */

/* TSnFPNCalibVal */

/* TSnFPNCalibSet */

/* TSnGainCalibVal */

/* TSnDualGainCalib */

/* TSnDualGainCalibSet */

/* TSnCalWvData */

/* TSnInterp1DWvData */

/* TSnInterp1DSpline3 */

/* TSnStopPosnSet */

/* TSnCalFFTData */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__sigprocdat {
 public:
  G__Sizep2memfuncG__sigprocdat(): p(&G__Sizep2memfuncG__sigprocdat::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__sigprocdat::*p)();
};

size_t G__get_sizep2memfuncG__sigprocdat()
{
  G__Sizep2memfuncG__sigprocdat a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__sigprocdat() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibObject))) {
     TSnCalibObject *G__Lderived;
     G__Lderived=(TSnCalibObject*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibObject),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet))) {
     TSnCalibSet *G__Lderived;
     G__Lderived=(TSnCalibSet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet))) {
     TSnPerSampCalibSet *G__Lderived;
     G__Lderived=(TSnPerSampCalibSet*)0x1000;
     {
       TSnCalibSet *G__Lpbase=(TSnCalibSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet))) {
     TSnPerCardCalibSet *G__Lderived;
     G__Lderived=(TSnPerCardCalibSet*)0x1000;
     {
       TSnCalibSet *G__Lpbase=(TSnCalibSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibVal))) {
     TSnFPNCalibVal *G__Lderived;
     G__Lderived=(TSnFPNCalibVal*)0x1000;
     {
       TSnCalibObject *G__Lpbase=(TSnCalibObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibVal),G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibVal),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet))) {
     TSnFPNCalibSet *G__Lderived;
     G__Lderived=(TSnFPNCalibSet*)0x1000;
     {
       TSnPerSampCalibSet *G__Lpbase=(TSnPerSampCalibSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSnCalibSet *G__Lpbase=(TSnCalibSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal))) {
     TSnGainCalibVal *G__Lderived;
     G__Lderived=(TSnGainCalibVal*)0x1000;
     {
       TSnCalibObject *G__Lpbase=(TSnCalibObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal),G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib))) {
     TSnDualGainCalib *G__Lderived;
     G__Lderived=(TSnDualGainCalib*)0x1000;
     {
       TSnCalibObject *G__Lpbase=(TSnCalibObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib),G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet))) {
     TSnDualGainCalibSet *G__Lderived;
     G__Lderived=(TSnDualGainCalibSet*)0x1000;
     {
       TSnPerCardCalibSet *G__Lpbase=(TSnPerCardCalibSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSnCalibSet *G__Lpbase=(TSnCalibSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalWvData))) {
     TSnCalWvData *G__Lderived;
     G__Lderived=(TSnCalWvData*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalWvData),G__get_linked_tagnum(&G__G__sigprocdatLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalWvData),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DWvData))) {
     TSnInterp1DWvData *G__Lderived;
     G__Lderived=(TSnInterp1DWvData*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DWvData),G__get_linked_tagnum(&G__G__sigprocdatLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DWvData),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3))) {
     TSnInterp1DSpline3 *G__Lderived;
     G__Lderived=(TSnInterp1DSpline3*)0x1000;
     {
       TSnInterp1DWvData *G__Lpbase=(TSnInterp1DWvData*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3),G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DWvData),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3),G__get_linked_tagnum(&G__G__sigprocdatLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnStopPosnSet))) {
     TSnStopPosnSet *G__Lderived;
     G__Lderived=(TSnStopPosnSet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnStopPosnSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnStopPosnSet),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData))) {
     TSnCalFFTData *G__Lderived;
     G__Lderived=(TSnCalFFTData*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData),G__get_linked_tagnum(&G__G__sigprocdatLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData),G__get_linked_tagnum(&G__G__sigprocdatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__sigprocdat() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__sigprocdatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__sigprocdatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocdatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__sigprocdatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocdatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__sigprocdatLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__sigprocdatLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocdatLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__sigprocdatLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__sigprocdatLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("SmpNum_t",98,-1,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnStopPosnSet));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TSnCalibObject */
static void G__setup_memvarTSnCalibObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibObject));
   { TSnCalibObject *p; p=(TSnCalibObject*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnCalibSet */
static void G__setup_memvarTSnCalibSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet));
   { TSnCalibSet *p; p=(TSnCalibSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TObjArray),-1,-1,4,"fCalibs=",0,"-> a list of TSnCalibObject's. indexing depends on type of calib set");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnPerSampCalibSet */
static void G__setup_memvarTSnPerSampCalibSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet));
   { TSnPerSampCalibSet *p; p=(TSnPerSampCalibSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnPerCardCalibSet */
static void G__setup_memvarTSnPerCardCalibSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet));
   { TSnPerCardCalibSet *p; p=(TSnPerCardCalibSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnFPNCalibVal */
static void G__setup_memvarTSnFPNCalibVal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibVal));
   { TSnFPNCalibVal *p; p=(TSnFPNCalibVal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFpn=",0,"the FPN value on this sample");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRms=",0,"the RMS of the FPN on this sample");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fN=",0,"num of evts used to find the FPN,RMS (to calc Gauss error)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnFPNCalibSet */
static void G__setup_memvarTSnFPNCalibSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet));
   { TSnFPNCalibSet *p; p=(TSnFPNCalibSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnGainCalibVal */
static void G__setup_memvarTSnGainCalibVal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal));
   { TSnGainCalibVal *p; p=(TSnGainCalibVal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fM=",0,"gain slope");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEM=",0,"error on gain slope");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fB=",0,"offset");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEB=",0,"error on offset");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnDualGainCalib */
static void G__setup_memvarTSnDualGainCalib(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib));
   { TSnDualGainCalib *p; p=(TSnDualGainCalib*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal),-1,-1,4,"fPosCal=",0,"gain calib for non-negative ADCs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal),-1,-1,4,"fNegCal=",0,"gain calib for negative ADCs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnDualGainCalibSet */
static void G__setup_memvarTSnDualGainCalibSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet));
   { TSnDualGainCalibSet *p; p=(TSnDualGainCalibSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnCalWvData */
static void G__setup_memvarTSnCalWvData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalWvData));
   { TSnCalWvData *p; p=(TSnCalWvData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fData[512]=",0,"the calibrated data. use C array so it can be processed by TTree::Draw");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fError[512]=",0,"error on the calibrated value. use C array so it can be processed by TTree::Draw");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnInterp1DWvData */
static void G__setup_memvarTSnInterp1DWvData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DWvData));
   { TSnInterp1DWvData *p; p=(TSnInterp1DWvData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnInterp1DSpline3 */
static void G__setup_memvarTSnInterp1DSpline3(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3));
   { TSnInterp1DSpline3 *p; p=(TSnInterp1DSpline3*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TSpline3),-1,-1,4,"fSpline=",0,"the spline doing the interpolating");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnStopPosnSet */
static void G__setup_memvarTSnStopPosnSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnStopPosnSet));
   { TSnStopPosnSet *p; p=(TSnStopPosnSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("SmpNum_t"),-1,4,"fFirst[4]=",0,"the first sample in the stops");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("SmpNum_t"),-1,4,"fWidth=",0,"width of each stop in num samples");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fQual=",0,"quality/confidence parameter for stop fit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSnCalFFTData */
static void G__setup_memvarTSnCalFFTData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData));
   { TSnCalFFTData *p; p=(TSnCalFFTData*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("UChar_t"),-2,1,G__FastAllocString(4096).Format("kFftPts=%lluULL",(unsigned long long)TSnCalFFTData::kFftPts).data(),0,"Nsamps/2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFFT[4][65]=",0,"the FFT. use a C array so it can be processed by TTree::Draw");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFreq[65]=",0,"the frequencies on one channel. use a C array so it can be processed by TTree::Draw");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TGraph),-1,-1,4,"fCache[4]=",0,"! cache the graphs (not streamed ==> not stored in a TTree)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__sigprocdatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__sigprocdat() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTSnCalibObject(void) {
   /* TSnCalibObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibObject));
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Calibrate",903,G__G__sigprocdat_168_0_3, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "f - 'Float_t' 10 - x", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CalibError",997,G__G__sigprocdat_168_0_4, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 10 - x f - 'Float_t' 10 - ex", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CalibrateWithErr",1612,G__G__sigprocdat_168_0_5, 121, -1, -1, 0, 4, 1, 1, 8, 
"f - 'Float_t' 10 - x f - 'Float_t' 10 - ex "
"f - 'Float_t' 1 - y f - 'Float_t' 1 - ey", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__sigprocdat_168_0_6, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnCalibObject::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_168_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalibObject::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_168_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnCalibObject::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_168_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnCalibObject::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_168_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_168_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalibObject::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_168_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalibObject::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_168_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalibObject::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_168_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalibObject::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnCalibObject", 1477, G__G__sigprocdat_168_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigprocdat_168_0_19, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibObject), -1, 1, 1, 1, 1, 0, "u 'TSnCalibObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnCalibSet(void) {
   /* TSnCalibSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet));
   G__memfunc_setup("GetCalibIndex",1267,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 10 - smp", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("PassCalibTo",1077,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 10 - smp U 'TSnCalibObject' - 0 - vals", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewCopy",709,G__G__sigprocdat_184_0_6, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Swap",411,G__G__sigprocdat_184_0_7, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TSnCalibSet' - 1 - a u 'TSnCalibSet' - 1 - b", (char*)NULL, (void*) G__func2void( (void (*)(TSnCalibSet&, TSnCalibSet&))(&TSnCalibSet::Swap) ), 0);
   G__memfunc_setup("operator=",937,G__G__sigprocdat_184_0_8, 117, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet), -1, 1, 1, 1, 1, 0, "u 'TSnCalibSet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCalibFor",1058,G__G__sigprocdat_184_0_10, 117, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibObject), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 10 - smp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibFor",1058,G__G__sigprocdat_184_0_11, 117, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibObject), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 10 - smp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasCalibsFor",1169,G__G__sigprocdat_184_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - smp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calibrate",903,G__G__sigprocdat_184_0_13, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 10 - smp f - 'Float_t' 10 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibError",997,G__G__sigprocdat_184_0_14, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 10 - smp f - 'Float_t' 10 - x "
"f - 'Float_t' 10 - ex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrateWithErr",1612,G__G__sigprocdat_184_0_15, 121, -1, -1, 0, 5, 1, 1, 8, 
"i - 'Int_t' 10 - smp f - 'Float_t' 10 - x "
"f - 'Float_t' 10 - ex f - 'Float_t' 1 - y "
"f - 'Float_t' 1 - ey", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeCalibOf",1238,G__G__sigprocdat_184_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - smp u 'TSnCalibObject' - 11 - vals", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCalibAt",921,G__G__sigprocdat_184_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - smp u 'TSnCalibObject' - 11 - vals", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigprocdat_184_0_18, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnCalibSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_184_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalibSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_184_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnCalibSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_184_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnCalibSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_184_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_184_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalibSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_184_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalibSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_184_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalibSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_184_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalibSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnCalibSet", 1178, G__G__sigprocdat_184_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnPerSampCalibSet(void) {
   /* TSnPerSampCalibSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet));
   G__memfunc_setup("GetCalibIndex",1267,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 10 - smp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnPerSampCalibSet",1748,G__G__sigprocdat_186_0_2, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnPerSampCalibSet",1748,G__G__sigprocdat_186_0_3, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewCopy",709,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__sigprocdat_186_0_5, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnPerSampCalibSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_186_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPerSampCalibSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_186_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnPerSampCalibSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_186_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnPerSampCalibSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_186_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_186_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPerSampCalibSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_186_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPerSampCalibSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_186_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPerSampCalibSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_186_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPerSampCalibSet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnPerSampCalibSet", 1748, G__G__sigprocdat_186_0_17, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet), -1, 0, 1, 1, 1, 0, "u 'TSnPerSampCalibSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnPerSampCalibSet", 1874, G__G__sigprocdat_186_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigprocdat_186_0_19, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerSampCalibSet), -1, 1, 1, 1, 1, 0, "u 'TSnPerSampCalibSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnPerCardCalibSet(void) {
   /* TSnPerCardCalibSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet));
   G__memfunc_setup("GetCalibIndex",1267,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 10 - smp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSnPerCardCalibSet",1725,G__G__sigprocdat_187_0_2, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnPerCardCalibSet",1725,G__G__sigprocdat_187_0_3, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewCopy",709,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__sigprocdat_187_0_6, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnPerCardCalibSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_187_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPerCardCalibSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_187_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnPerCardCalibSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_187_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnPerCardCalibSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_187_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_187_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPerCardCalibSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_187_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPerCardCalibSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_187_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnPerCardCalibSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_187_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnPerCardCalibSet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnPerCardCalibSet", 1725, G__G__sigprocdat_187_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet), -1, 0, 1, 1, 1, 0, "u 'TSnPerCardCalibSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnPerCardCalibSet", 1851, G__G__sigprocdat_187_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigprocdat_187_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnPerCardCalibSet), -1, 1, 1, 1, 1, 0, "u 'TSnPerCardCalibSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnFPNCalibVal(void) {
   /* TSnFPNCalibVal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibVal));
   G__memfunc_setup("TSnFPNCalibVal",1271,G__G__sigprocdat_188_0_1, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibVal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnFPNCalibVal",1271,G__G__sigprocdat_188_0_2, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibVal), -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 - fpn f - 'Float_t' 10 - rms "
"f - 'Float_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFPN",516,G__G__sigprocdat_188_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRMS",530,G__G__sigprocdat_188_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN",366,G__G__sigprocdat_188_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFPNError",1038,G__G__sigprocdat_188_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRMSError",1052,G__G__sigprocdat_188_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calibrate",903,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "f - 'Float_t' 10 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalibError",997,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 10 - - f - 'Float_t' 10 - ex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFPN",528,G__G__sigprocdat_188_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRMS",542,G__G__sigprocdat_188_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetN",378,G__G__sigprocdat_188_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigprocdat_188_0_14, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnFPNCalibVal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_188_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFPNCalibVal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_188_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnFPNCalibVal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_188_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnFPNCalibVal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_188_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_188_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFPNCalibVal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_188_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFPNCalibVal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_188_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFPNCalibVal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_188_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFPNCalibVal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnFPNCalibVal", 1271, G__G__sigprocdat_188_0_26, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibVal), -1, 0, 1, 1, 1, 0, "u 'TSnFPNCalibVal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnFPNCalibVal", 1397, G__G__sigprocdat_188_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigprocdat_188_0_28, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibVal), -1, 1, 1, 1, 1, 0, "u 'TSnFPNCalibVal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnFPNCalibSet(void) {
   /* TSnFPNCalibSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet));
   G__memfunc_setup("TSnFPNCalibSet",1280,G__G__sigprocdat_189_0_1, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnFPNCalibSet",1280,G__G__sigprocdat_189_0_2, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewCopy",709,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFPNError",1038,G__G__sigprocdat_189_0_4, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - smp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRMSError",1052,G__G__sigprocdat_189_0_5, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - smp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeCalibOf",1238,G__G__sigprocdat_189_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 10 - smp f - 'Float_t' 10 - fpn "
"f - 'Float_t' 10 - rms f - 'Float_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCalibAt",921,G__G__sigprocdat_189_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 10 - smp f - 'Float_t' 10 - fpn "
"f - 'Float_t' 10 - rms f - 'Float_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigprocdat_189_0_8, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnFPNCalibSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_189_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFPNCalibSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_189_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnFPNCalibSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_189_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnFPNCalibSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_189_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_189_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFPNCalibSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_189_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFPNCalibSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_189_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnFPNCalibSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_189_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnFPNCalibSet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnFPNCalibSet", 1280, G__G__sigprocdat_189_0_20, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet), -1, 0, 1, 1, 1, 0, "u 'TSnFPNCalibSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnFPNCalibSet", 1406, G__G__sigprocdat_189_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigprocdat_189_0_22, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnFPNCalibSet), -1, 1, 1, 1, 1, 0, "u 'TSnFPNCalibSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnGainCalibVal(void) {
   /* TSnGainCalibVal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal));
   G__memfunc_setup("TSnGainCalibVal",1426,G__G__sigprocdat_190_0_1, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnGainCalibVal",1426,G__G__sigprocdat_190_0_2, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal), -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 10 - m f - 'Float_t' 10 - em "
"f - 'Float_t' 10 - b f - 'Float_t' 10 - eb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSlope",803,G__G__sigprocdat_190_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlopeErr",1100,G__G__sigprocdat_190_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOffset",903,G__G__sigprocdat_190_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOFfsetErr",1168,G__G__sigprocdat_190_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calibrate",903,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "f - 'Float_t' 10 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalibError",997,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 10 - x f - 'Float_t' 10 - ex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSlope",815,G__G__sigprocdat_190_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSlopeErr",1112,G__G__sigprocdat_190_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSlope",815,G__G__sigprocdat_190_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - m f - 'Float_t' 10 - em", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOffset",915,G__G__sigprocdat_190_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOffsetErr",1212,G__G__sigprocdat_190_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOffset",915,G__G__sigprocdat_190_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - b f - 'Float_t' 10 - eb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameters",1344,G__G__sigprocdat_190_0_16, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 10 - m f - 'Float_t' 10 - em "
"f - 'Float_t' 10 - b f - 'Float_t' 10 - eb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigprocdat_190_0_17, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnGainCalibVal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_190_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnGainCalibVal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_190_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnGainCalibVal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_190_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnGainCalibVal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_190_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_190_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnGainCalibVal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_190_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnGainCalibVal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_190_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnGainCalibVal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_190_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnGainCalibVal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnGainCalibVal", 1426, G__G__sigprocdat_190_0_29, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal), -1, 0, 1, 1, 1, 0, "u 'TSnGainCalibVal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnGainCalibVal", 1552, G__G__sigprocdat_190_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigprocdat_190_0_31, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal), -1, 1, 1, 1, 1, 0, "u 'TSnGainCalibVal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnDualGainCalib(void) {
   /* TSnDualGainCalib */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib));
   G__memfunc_setup("TSnDualGainCalib",1525,G__G__sigprocdat_191_0_1, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnDualGainCalib",1525,G__G__sigprocdat_191_0_2, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib), -1, 0, 2, 1, 1, 0, 
"u 'TSnGainCalibVal' - 11 - pos u 'TSnGainCalibVal' - 11 - neg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnDualGainCalib",1525,G__G__sigprocdat_191_0_3, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib), -1, 0, 8, 1, 1, 0, 
"f - 'Float_t' 10 - mPos f - 'Float_t' 10 - emPos "
"f - 'Float_t' 10 - bPos f - 'Float_t' 10 - ebPos "
"f - 'Float_t' 10 - mNeg f - 'Float_t' 10 - emNeg "
"f - 'Float_t' 10 - bNeg f - 'Float_t' 10 - ebNeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Calibrate",903,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "f - 'Float_t' 10 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalibError",997,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 10 - x f - 'Float_t' 10 - ex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPosGainCalib",1452,G__G__sigprocdat_191_0_7, 117, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosGainCalib",1452,G__G__sigprocdat_191_0_8, 117, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNegGainCalib",1428,G__G__sigprocdat_191_0_9, 117, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNegGainCalib",1428,G__G__sigprocdat_191_0_10, 117, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnGainCalibVal), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigprocdat_191_0_11, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnDualGainCalib::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_191_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnDualGainCalib::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_191_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnDualGainCalib::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_191_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnDualGainCalib::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_191_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_191_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnDualGainCalib::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_191_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnDualGainCalib::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_191_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnDualGainCalib::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_191_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnDualGainCalib::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnDualGainCalib", 1525, G__G__sigprocdat_191_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib), -1, 0, 1, 1, 1, 0, "u 'TSnDualGainCalib' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnDualGainCalib", 1651, G__G__sigprocdat_191_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigprocdat_191_0_25, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalib), -1, 1, 1, 1, 1, 0, "u 'TSnDualGainCalib' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnDualGainCalibSet(void) {
   /* TSnDualGainCalibSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet));
   G__memfunc_setup("TSnDualGainCalibSet",1825,G__G__sigprocdat_192_0_1, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnDualGainCalibSet",1825,G__G__sigprocdat_192_0_2, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewCopy",709,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalibSet), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ChangeCalibOfChan",1616,G__G__sigprocdat_192_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - ch u 'TSnGainCalibVal' - 11 - pos "
"u 'TSnGainCalibVal' - 11 - neg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeCalibOfOfChan",1797,G__G__sigprocdat_192_0_5, 121, -1, -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 10 - ch f - 'Float_t' 10 - mPos "
"f - 'Float_t' 10 - emPos f - 'Float_t' 10 - bPos "
"f - 'Float_t' 10 - ebPos f - 'Float_t' 10 - mNeg "
"f - 'Float_t' 10 - emNeg f - 'Float_t' 10 - bNeg "
"f - 'Float_t' 10 - ebNeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeCalibOf",1238,G__G__sigprocdat_192_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - smp u 'TSnGainCalibVal' - 11 - pos "
"u 'TSnGainCalibVal' - 11 - neg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeCalibOf",1238,G__G__sigprocdat_192_0_7, 121, -1, -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 10 - smp f - 'Float_t' 10 - mPos "
"f - 'Float_t' 10 - emPos f - 'Float_t' 10 - bPos "
"f - 'Float_t' 10 - ebPos f - 'Float_t' 10 - mNeg "
"f - 'Float_t' 10 - emNeg f - 'Float_t' 10 - bNeg "
"f - 'Float_t' 10 - ebNeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCalibAt",921,G__G__sigprocdat_192_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - smp u 'TSnGainCalibVal' - 11 - pos "
"u 'TSnGainCalibVal' - 11 - neg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCalibAt",921,G__G__sigprocdat_192_0_9, 121, -1, -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 10 - smp f - 'Float_t' 10 - mPos "
"f - 'Float_t' 10 - emPos f - 'Float_t' 10 - bPos "
"f - 'Float_t' 10 - ebPos f - 'Float_t' 10 - mNeg "
"f - 'Float_t' 10 - emNeg f - 'Float_t' 10 - bNeg "
"f - 'Float_t' 10 - ebNeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCalibAtChan",1299,G__G__sigprocdat_192_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - ch u 'TSnGainCalibVal' - 11 - pos "
"u 'TSnGainCalibVal' - 11 - neg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCalibAtChan",1299,G__G__sigprocdat_192_0_11, 121, -1, -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 10 - ch f - 'Float_t' 10 - mPos "
"f - 'Float_t' 10 - emPos f - 'Float_t' 10 - bPos "
"f - 'Float_t' 10 - ebPos f - 'Float_t' 10 - mNeg "
"f - 'Float_t' 10 - emNeg f - 'Float_t' 10 - bNeg "
"f - 'Float_t' 10 - ebNeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigprocdat_192_0_12, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnDualGainCalibSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_192_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnDualGainCalibSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_192_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnDualGainCalibSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_192_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnDualGainCalibSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_192_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_192_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnDualGainCalibSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_192_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnDualGainCalibSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_192_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnDualGainCalibSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_192_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnDualGainCalibSet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSnDualGainCalibSet", 1825, G__G__sigprocdat_192_0_24, (int) ('i'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet), -1, 0, 1, 1, 1, 0, "u 'TSnDualGainCalibSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSnDualGainCalibSet", 1951, G__G__sigprocdat_192_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigprocdat_192_0_26, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnDualGainCalibSet), -1, 1, 1, 1, 1, 0, "u 'TSnDualGainCalibSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnCalWvData(void) {
   /* TSnCalWvData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalWvData));
   G__memfunc_setup("TSnCalWvData",1132,G__G__sigprocdat_196_0_1, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalWvData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnCalWvData",1132,G__G__sigprocdat_196_0_2, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalWvData), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnCalWvData",1132,G__G__sigprocdat_196_0_3, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalWvData), -1, 0, 1, 1, 1, 0, "u 'TSnCalWvData' - 11 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearAll",768,G__G__sigprocdat_196_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyDataFrom",1193,G__G__sigprocdat_196_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TSnCalWvData' - 11 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Swap",411,G__G__sigprocdat_196_0_6, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TSnCalWvData' - 1 - a u 'TSnCalWvData' - 1 - b", (char*)NULL, (void*) G__func2void( (void (*)(TSnCalWvData&, TSnCalWvData&))(&TSnCalWvData::Swap) ), 0);
   G__memfunc_setup("operator=",937,G__G__sigprocdat_196_0_7, 117, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalWvData), -1, 1, 1, 1, 1, 0, "u 'TSnCalWvData' - 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__G__sigprocdat_196_0_8, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__G__sigprocdat_196_0_9, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__G__sigprocdat_196_0_10, 70, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 9, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__G__sigprocdat_196_0_11, 70, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__G__sigprocdat_196_0_12, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetError",810,G__G__sigprocdat_196_0_13, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetError",810,G__G__sigprocdat_196_0_14, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetError",810,G__G__sigprocdat_196_0_15, 70, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 9, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetError",810,G__G__sigprocdat_196_0_16, 70, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetError",810,G__G__sigprocdat_196_0_17, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetData",678,G__G__sigprocdat_196_0_18, 121, -1, -1, 0, 3, 1, 1, 0, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - s "
"f - 'Float_t' 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetError",822,G__G__sigprocdat_196_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - s "
"f - 'Float_t' 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewGraphForChan",1469,G__G__sigprocdat_196_0_20, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TGraph), -1, 0, 5, 1, 1, 8, 
"b - 'UChar_t' 10 - ch g - 'Bool_t' 10 'kFALSE' vsTime "
"g - 'Bool_t' 10 'kTRUE' withErrors d - 'Double_t' 0 '0' shift "
"g - 'Bool_t' 10 'kTRUE' doWrap", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__sigprocdat_196_0_21, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnCalWvData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_196_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalWvData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_196_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnCalWvData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_196_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnCalWvData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_196_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_196_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalWvData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_196_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalWvData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_196_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalWvData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_196_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalWvData::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnCalWvData", 1258, G__G__sigprocdat_196_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnInterp1DWvData(void) {
   /* TSnInterp1DWvData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DWvData));
   G__memfunc_setup("FindXAtExtremum",1509,G__G__sigprocdat_197_0_3, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"g - 'Bool_t' 10 - min D - 'Double_t' 40 '0' ymax", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Eval",392,G__G__sigprocdat_197_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 10 - x", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetInterpolator",1571,G__G__sigprocdat_197_0_5, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetInterpolator",1571,G__G__sigprocdat_197_0_6, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TObject), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CopyFrom",815,G__G__sigprocdat_197_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TSnInterp1DWvData' - 11 - x", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("FindXAtMaximum",1388,G__G__sigprocdat_197_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindXAtMinimum",1386,G__G__sigprocdat_197_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__sigprocdat_197_0_11, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnInterp1DWvData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_197_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnInterp1DWvData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_197_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnInterp1DWvData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_197_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnInterp1DWvData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_197_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_197_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnInterp1DWvData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_197_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnInterp1DWvData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_197_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnInterp1DWvData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_197_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnInterp1DWvData::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnInterp1DWvData", 1729, G__G__sigprocdat_197_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__sigprocdat_197_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DWvData), -1, 1, 1, 1, 1, 0, "u 'TSnInterp1DWvData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnInterp1DSpline3(void) {
   /* TSnInterp1DSpline3 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3));
   G__memfunc_setup("AssertSpline",1245,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "C - 'Char_t' 10 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnInterp1DSpline3",1690,G__G__sigprocdat_199_0_2, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnInterp1DSpline3",1690,G__G__sigprocdat_199_0_3, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title "
"D - 'Double_t' 0 - x D - 'Double_t' 0 - y "
"i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnInterp1DSpline3",1690,G__G__sigprocdat_199_0_4, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title "
"U 'TGraph' - 10 - g", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnInterp1DSpline3",1690,G__G__sigprocdat_199_0_5, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title "
"u 'TSnCalWvData' - 11 - wvd b - 'UChar_t' 10 - ch "
"g - 'Bool_t' 10 'kTRUE' vsTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnInterp1DSpline3",1690,G__G__sigprocdat_199_0_6, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3), -1, 0, 1, 1, 1, 0, "u 'TSnInterp1DSpline3' - 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Swap",411,G__G__sigprocdat_199_0_7, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TSnInterp1DSpline3' - 1 - a u 'TSnInterp1DSpline3' - 1 - b", (char*)NULL, (void*) G__func2void( (void (*)(TSnInterp1DSpline3&, TSnInterp1DSpline3&))(&TSnInterp1DSpline3::Swap) ), 0);
   G__memfunc_setup("operator=",937,G__G__sigprocdat_199_0_8, 117, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnInterp1DSpline3), -1, 1, 1, 1, 1, 0, "u 'TSnInterp1DSpline3' - 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindXAtExtremum",1509,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"g - 'Bool_t' 10 - min D - 'Double_t' 40 '0' ymax", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Eval",392,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 10 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetInterpolator",1571,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetInterpolator",1571,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TObject), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CopyFrom",815,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TSnInterp1DWvData' - 11 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSpline",907,G__G__sigprocdat_199_0_14, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TSpline3), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpline",907,G__G__sigprocdat_199_0_15, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TSpline3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpline",919,G__G__sigprocdat_199_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TSpline3' - 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigprocdat_199_0_17, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnInterp1DSpline3::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_199_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnInterp1DSpline3::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_199_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnInterp1DSpline3::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_199_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnInterp1DSpline3::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_199_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_199_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnInterp1DSpline3::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_199_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnInterp1DSpline3::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_199_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnInterp1DSpline3::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_199_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnInterp1DSpline3::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnInterp1DSpline3", 1816, G__G__sigprocdat_199_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnStopPosnSet(void) {
   /* TSnStopPosnSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnStopPosnSet));
   G__memfunc_setup("ClearArrays",1113,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssertBounds",1245,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnStopPosnSet",1415,G__G__sigprocdat_200_0_3, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnStopPosnSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnStopPosnSet",1415,G__G__sigprocdat_200_0_4, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnStopPosnSet), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title "
"b - 'TSnStopPosnSet::SmpNum_t' 10 '6' width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnStopPosnSet",1415,G__G__sigprocdat_200_0_5, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnStopPosnSet), -1, 0, 1, 1, 1, 0, "u 'TSnStopPosnSet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Swap",411,G__G__sigprocdat_200_0_6, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TSnStopPosnSet' - 1 - a u 'TSnStopPosnSet' - 1 - b", (char*)NULL, (void*) G__func2void( (void (*)(TSnStopPosnSet&, TSnStopPosnSet&))(&TSnStopPosnSet::Swap) ), 0);
   G__memfunc_setup("operator=",937,G__G__sigprocdat_200_0_7, 117, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnStopPosnSet), -1, 1, 1, 1, 1, 0, "u 'TSnStopPosnSet' - 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFirstSamples",1533,G__G__sigprocdat_200_0_9, 66, -1, G__defined_typename("TSnStopPosnSet::SmpNum_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstSamples",1533,G__G__sigprocdat_200_0_10, 66, -1, G__defined_typename("TSnStopPosnSet::SmpNum_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstSample",1418,G__G__sigprocdat_200_0_11, 98, -1, G__defined_typename("TSnStopPosnSet::SmpNum_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWaveBeginSample",1786,G__G__sigprocdat_200_0_12, 98, -1, G__defined_typename("TSnStopPosnSet::SmpNum_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStopWidth",1222,G__G__sigprocdat_200_0_13, 98, -1, G__defined_typename("TSnStopPosnSet::SmpNum_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStopQuality",1455,G__G__sigprocdat_200_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewShiftedData",1387,G__G__sigprocdat_200_0_15, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalWvData), -1, 0, 3, 1, 1, 8, 
"u 'TSnCalWvData' - 11 - rw C - 'Char_t' 10 - name "
"C - 'Char_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFirstSamples",1545,G__G__sigprocdat_200_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "B - 'TSnStopPosnSet::SmpNum_t' 10 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFirstSample",1430,G__G__sigprocdat_200_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 10 - ch b - 'TSnStopPosnSet::SmpNum_t' 10 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStopWidth",1234,G__G__sigprocdat_200_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'TSnStopPosnSet::SmpNum_t' 10 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStopQuality",1467,G__G__sigprocdat_200_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigprocdat_200_0_20, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnStopPosnSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_200_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnStopPosnSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_200_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnStopPosnSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_200_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnStopPosnSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_200_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_200_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnStopPosnSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_200_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnStopPosnSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_200_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnStopPosnSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_200_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnStopPosnSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnStopPosnSet", 1541, G__G__sigprocdat_200_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSnCalFFTData(void) {
   /* TSnCalFFTData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData));
   G__memfunc_setup("AssertPoint",1148,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "b - 'UChar_t' 10 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssertChan",1004,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssertRefPower",1436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "f - 'Float_t' 10 - p0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildFFTGraph",1218,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"b - 'UChar_t' 10 - ch u 'TArrayF' - 1 - fft", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FrommVToPower",1319,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 4, 0, "f - 'Float_t' 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FromPowerToDb",1290,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 4, 0, 
"f - 'Float_t' 10 - v f - 'Float_t' 10 - p0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewFFTGraphPowOrDb",1689,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TGraph), -1, 0, 2, 1, 4, 8, 
"b - 'UChar_t' 10 - ch f - 'Float_t' 10 - p0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnCalFFTData",1151,G__G__sigprocdat_201_0_8, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnCalFFTData",1151,G__G__sigprocdat_201_0_9, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnCalFFTData",1151,G__G__sigprocdat_201_0_10, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title "
"u 'TSnCalWvData' - 11 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSnCalFFTData",1151,G__G__sigprocdat_201_0_11, 105, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData), -1, 0, 1, 1, 1, 0, "u 'TSnCalFFTData' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearCache",955,G__G__sigprocdat_201_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyDataFrom",1193,G__G__sigprocdat_201_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TSnCalFFTData' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearAll",768,G__G__sigprocdat_201_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Swap",411,G__G__sigprocdat_201_0_15, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TSnCalFFTData' - 1 - a u 'TSnCalFFTData' - 1 - b", (char*)NULL, (void*) G__func2void( (void (*)(TSnCalFFTData&, TSnCalFFTData&))(&TSnCalFFTData::Swap) ), 0);
   G__memfunc_setup("operator=",937,G__G__sigprocdat_201_0_16, 117, G__get_linked_tagnum(&G__G__sigprocdatLN_TSnCalFFTData), -1, 1, 1, 1, 1, 0, "u 'TSnCalFFTData' - 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFFTData",890,G__G__sigprocdat_201_0_17, 70, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 9, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFFTData",890,G__G__sigprocdat_201_0_18, 70, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFreqData",1064,G__G__sigprocdat_201_0_19, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFreqData",1064,G__G__sigprocdat_201_0_20, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPoints",1229,G__G__sigprocdat_201_0_21, 114, -1, G__defined_typename("UShort_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (UShort_t (*)())(&TSnCalFFTData::GetNumPoints) ), 0);
   G__memfunc_setup("GetFFTData",890,G__G__sigprocdat_201_0_22, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFFTInPower",1220,G__G__sigprocdat_201_0_23, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFFTInDb",861,G__G__sigprocdat_201_0_24, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"b - 'UChar_t' 10 - ch b - 'UChar_t' 10 - point "
"f - 'Float_t' 10 - p0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFreqData",1064,G__G__sigprocdat_201_0_25, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 10 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFFTGraph",1010,G__G__sigprocdat_201_0_26, 117, G__get_linked_tagnum(&G__G__sigprocdatLN_TGraph), -1, 1, 1, 1, 1, 9, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewFFTGraph",1020,G__G__sigprocdat_201_0_27, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TGraph), -1, 0, 1, 1, 1, 8, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewFFTGraphInPower",1728,G__G__sigprocdat_201_0_28, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TGraph), -1, 0, 1, 1, 1, 8, "b - 'UChar_t' 10 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewFFTGraphInDb",1369,G__G__sigprocdat_201_0_29, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TGraph), -1, 0, 2, 1, 1, 8, 
"b - 'UChar_t' 10 - ch f - 'Float_t' 10 - p0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFFTFor",819,G__G__sigprocdat_201_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TSnCalWvData' - 11 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__sigprocdat_201_0_31, 85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSnCalFFTData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__sigprocdat_201_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalFFTData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__sigprocdat_201_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSnCalFFTData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__sigprocdat_201_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSnCalFFTData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__sigprocdatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__sigprocdat_201_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__sigprocdat_201_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalFFTData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__sigprocdat_201_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalFFTData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__sigprocdat_201_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSnCalFFTData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__sigprocdat_201_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSnCalFFTData::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSnCalFFTData", 1277, G__G__sigprocdat_201_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__sigprocdat() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__sigprocdat() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__sigprocdat() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__sigprocdatLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnCalibObject = { "TSnCalibObject" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnCalibSet = { "TSnCalibSet" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnPerSampCalibSet = { "TSnPerSampCalibSet" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnPerCardCalibSet = { "TSnPerCardCalibSet" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnFPNCalibVal = { "TSnFPNCalibVal" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnFPNCalibSet = { "TSnFPNCalibSet" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnGainCalibVal = { "TSnGainCalibVal" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnDualGainCalib = { "TSnDualGainCalib" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnDualGainCalibSet = { "TSnDualGainCalibSet" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnCalWvData = { "TSnCalWvData" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnInterp1DWvData = { "TSnInterp1DWvData" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSpline3 = { "TSpline3" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnInterp1DSpline3 = { "TSnInterp1DSpline3" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnStopPosnSet = { "TSnStopPosnSet" , 99 , -1 };
G__linked_taginfo G__G__sigprocdatLN_TSnCalFFTData = { "TSnCalFFTData" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__sigprocdat() {
  G__G__sigprocdatLN_TClass.tagnum = -1 ;
  G__G__sigprocdatLN_TBuffer.tagnum = -1 ;
  G__G__sigprocdatLN_TMemberInspector.tagnum = -1 ;
  G__G__sigprocdatLN_TObject.tagnum = -1 ;
  G__G__sigprocdatLN_TNamed.tagnum = -1 ;
  G__G__sigprocdatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__sigprocdatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__sigprocdatLN_TObjArray.tagnum = -1 ;
  G__G__sigprocdatLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__sigprocdatLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__sigprocdatLN_TSnCalibObject.tagnum = -1 ;
  G__G__sigprocdatLN_TSnCalibSet.tagnum = -1 ;
  G__G__sigprocdatLN_TSnPerSampCalibSet.tagnum = -1 ;
  G__G__sigprocdatLN_TSnPerCardCalibSet.tagnum = -1 ;
  G__G__sigprocdatLN_TSnFPNCalibVal.tagnum = -1 ;
  G__G__sigprocdatLN_TSnFPNCalibSet.tagnum = -1 ;
  G__G__sigprocdatLN_TSnGainCalibVal.tagnum = -1 ;
  G__G__sigprocdatLN_TSnDualGainCalib.tagnum = -1 ;
  G__G__sigprocdatLN_TSnDualGainCalibSet.tagnum = -1 ;
  G__G__sigprocdatLN_TArrayF.tagnum = -1 ;
  G__G__sigprocdatLN_TGraph.tagnum = -1 ;
  G__G__sigprocdatLN_TSnCalWvData.tagnum = -1 ;
  G__G__sigprocdatLN_TSnInterp1DWvData.tagnum = -1 ;
  G__G__sigprocdatLN_TSpline3.tagnum = -1 ;
  G__G__sigprocdatLN_TSnInterp1DSpline3.tagnum = -1 ;
  G__G__sigprocdatLN_TSnStopPosnSet.tagnum = -1 ;
  G__G__sigprocdatLN_TSnCalFFTData.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__sigprocdat() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnCalibObject),sizeof(TSnCalibObject),-1,292099,"ABC for object storing calibration parameters",G__setup_memvarTSnCalibObject,G__setup_memfuncTSnCalibObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnCalibSet),sizeof(TSnCalibSet),-1,327426,"ABC to store a list of calibrations",G__setup_memvarTSnCalibSet,G__setup_memfuncTSnCalibSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnPerSampCalibSet),sizeof(TSnPerSampCalibSet),-1,324864,"base class storing calib objs on a per sample basis",G__setup_memvarTSnPerSampCalibSet,G__setup_memfuncTSnPerSampCalibSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnPerCardCalibSet),sizeof(TSnPerCardCalibSet),-1,324864,"base class storing calib objects on a per card basis",G__setup_memvarTSnPerCardCalibSet,G__setup_memfuncTSnPerCardCalibSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnFPNCalibVal),sizeof(TSnFPNCalibVal),-1,324864,"store the FPN of a sample",G__setup_memvarTSnFPNCalibVal,G__setup_memfuncTSnFPNCalibVal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnFPNCalibSet),sizeof(TSnFPNCalibSet),-1,324864,"set of TSnFPNCalibVal's for each sample",G__setup_memvarTSnFPNCalibSet,G__setup_memfuncTSnFPNCalibSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnGainCalibVal),sizeof(TSnGainCalibVal),-1,324864,"store linear gain calibration parameters (i.e. to calibrate digitizer chip readout or thresholds)",G__setup_memvarTSnGainCalibVal,G__setup_memfuncTSnGainCalibVal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnDualGainCalib),sizeof(TSnDualGainCalib),-1,324864,"has a separate TSnGainCalibVal for pos and neg ADCs",G__setup_memvarTSnDualGainCalib,G__setup_memfuncTSnDualGainCalib);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnDualGainCalibSet),sizeof(TSnDualGainCalibSet),-1,324864,"set of dual gain calib objects on a per card basis",G__setup_memvarTSnDualGainCalibSet,G__setup_memfuncTSnDualGainCalibSet);
   G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TGraph);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnCalWvData),sizeof(TSnCalWvData),-1,327424,"calibrated waveform data",G__setup_memvarTSnCalWvData,G__setup_memfuncTSnCalWvData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnInterp1DWvData),sizeof(TSnInterp1DWvData),-1,324869,"ABC defining interface for 1D interpolation of event data",G__setup_memvarTSnInterp1DWvData,G__setup_memfuncTSnInterp1DWvData);
   G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSpline3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnInterp1DSpline3),sizeof(TSnInterp1DSpline3),-1,327424,"1D TSpline3 interpolator of event (waveform) data using",G__setup_memvarTSnInterp1DSpline3,G__setup_memfuncTSnInterp1DSpline3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnStopPosnSet),sizeof(TSnStopPosnSet),-1,327424,"store a set of stop positions, per card",G__setup_memvarTSnStopPosnSet,G__setup_memfuncTSnStopPosnSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__sigprocdatLN_TSnCalFFTData),sizeof(TSnCalFFTData),-1,327424,"store FFT data (from calib data) for all channels",G__setup_memvarTSnCalFFTData,G__setup_memfuncTSnCalFFTData);
}
extern "C" void G__cpp_setupG__sigprocdat(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__sigprocdat()");
  G__set_cpp_environmentG__sigprocdat();
  G__cpp_setup_tagtableG__sigprocdat();

  G__cpp_setup_inheritanceG__sigprocdat();

  G__cpp_setup_typetableG__sigprocdat();

  G__cpp_setup_memvarG__sigprocdat();

  G__cpp_setup_memfuncG__sigprocdat();
  G__cpp_setup_globalG__sigprocdat();
  G__cpp_setup_funcG__sigprocdat();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__sigprocdat();
  return;
}
class G__cpp_setup_initG__sigprocdat {
  public:
    G__cpp_setup_initG__sigprocdat() { G__add_setup_func("G__sigprocdat",(G__incsetup)(&G__cpp_setupG__sigprocdat)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__sigprocdat() { G__remove_setup_func("G__sigprocdat"); }
};
G__cpp_setup_initG__sigprocdat G__cpp_setup_initializerG__sigprocdat;

